
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Funcionario
 * 
 */
export type Funcionario = $Result.DefaultSelection<Prisma.$FuncionarioPayload>
/**
 * Model Cliente
 * 
 */
export type Cliente = $Result.DefaultSelection<Prisma.$ClientePayload>
/**
 * Model Funil_Vendas
 * 
 */
export type Funil_Vendas = $Result.DefaultSelection<Prisma.$Funil_VendasPayload>
/**
 * Model Evento
 * 
 */
export type Evento = $Result.DefaultSelection<Prisma.$EventoPayload>
/**
 * Model ContatoCliente
 * 
 */
export type ContatoCliente = $Result.DefaultSelection<Prisma.$ContatoClientePayload>
/**
 * Model AgendamentoInteracao
 * 
 */
export type AgendamentoInteracao = $Result.DefaultSelection<Prisma.$AgendamentoInteracaoPayload>
/**
 * Model HistoricoFunil
 * 
 */
export type HistoricoFunil = $Result.DefaultSelection<Prisma.$HistoricoFunilPayload>
/**
 * Model InteracaoCliente
 * 
 */
export type InteracaoCliente = $Result.DefaultSelection<Prisma.$InteracaoClientePayload>
/**
 * Model Venda
 * 
 */
export type Venda = $Result.DefaultSelection<Prisma.$VendaPayload>
/**
 * Model FuncionariosConvidados
 * 
 */
export type FuncionariosConvidados = $Result.DefaultSelection<Prisma.$FuncionariosConvidadosPayload>
/**
 * Model Notificacao
 * 
 */
export type Notificacao = $Result.DefaultSelection<Prisma.$NotificacaoPayload>
/**
 * Model NotificacaoConvidados
 * 
 */
export type NotificacaoConvidados = $Result.DefaultSelection<Prisma.$NotificacaoConvidadosPayload>
/**
 * Model Presenca
 * 
 */
export type Presenca = $Result.DefaultSelection<Prisma.$PresencaPayload>
/**
 * Model FormTemplate
 * 
 */
export type FormTemplate = $Result.DefaultSelection<Prisma.$FormTemplatePayload>
/**
 * Model Candidato
 * 
 */
export type Candidato = $Result.DefaultSelection<Prisma.$CandidatoPayload>
/**
 * Model ArquivoCandidato
 * 
 */
export type ArquivoCandidato = $Result.DefaultSelection<Prisma.$ArquivoCandidatoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Funcionarios
 * const funcionarios = await prisma.funcionario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Funcionarios
   * const funcionarios = await prisma.funcionario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.funcionario`: Exposes CRUD operations for the **Funcionario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funcionarios
    * const funcionarios = await prisma.funcionario.findMany()
    * ```
    */
  get funcionario(): Prisma.FuncionarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cliente`: Exposes CRUD operations for the **Cliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.cliente.findMany()
    * ```
    */
  get cliente(): Prisma.ClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.funil_Vendas`: Exposes CRUD operations for the **Funil_Vendas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funil_Vendas
    * const funil_Vendas = await prisma.funil_Vendas.findMany()
    * ```
    */
  get funil_Vendas(): Prisma.Funil_VendasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.evento`: Exposes CRUD operations for the **Evento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eventos
    * const eventos = await prisma.evento.findMany()
    * ```
    */
  get evento(): Prisma.EventoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contatoCliente`: Exposes CRUD operations for the **ContatoCliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContatoClientes
    * const contatoClientes = await prisma.contatoCliente.findMany()
    * ```
    */
  get contatoCliente(): Prisma.ContatoClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agendamentoInteracao`: Exposes CRUD operations for the **AgendamentoInteracao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgendamentoInteracaos
    * const agendamentoInteracaos = await prisma.agendamentoInteracao.findMany()
    * ```
    */
  get agendamentoInteracao(): Prisma.AgendamentoInteracaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historicoFunil`: Exposes CRUD operations for the **HistoricoFunil** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistoricoFunils
    * const historicoFunils = await prisma.historicoFunil.findMany()
    * ```
    */
  get historicoFunil(): Prisma.HistoricoFunilDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interacaoCliente`: Exposes CRUD operations for the **InteracaoCliente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InteracaoClientes
    * const interacaoClientes = await prisma.interacaoCliente.findMany()
    * ```
    */
  get interacaoCliente(): Prisma.InteracaoClienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venda`: Exposes CRUD operations for the **Venda** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendas
    * const vendas = await prisma.venda.findMany()
    * ```
    */
  get venda(): Prisma.VendaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.funcionariosConvidados`: Exposes CRUD operations for the **FuncionariosConvidados** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FuncionariosConvidados
    * const funcionariosConvidados = await prisma.funcionariosConvidados.findMany()
    * ```
    */
  get funcionariosConvidados(): Prisma.FuncionariosConvidadosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificacao`: Exposes CRUD operations for the **Notificacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notificacaos
    * const notificacaos = await prisma.notificacao.findMany()
    * ```
    */
  get notificacao(): Prisma.NotificacaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificacaoConvidados`: Exposes CRUD operations for the **NotificacaoConvidados** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificacaoConvidados
    * const notificacaoConvidados = await prisma.notificacaoConvidados.findMany()
    * ```
    */
  get notificacaoConvidados(): Prisma.NotificacaoConvidadosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presenca`: Exposes CRUD operations for the **Presenca** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presencas
    * const presencas = await prisma.presenca.findMany()
    * ```
    */
  get presenca(): Prisma.PresencaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.formTemplate`: Exposes CRUD operations for the **FormTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FormTemplates
    * const formTemplates = await prisma.formTemplate.findMany()
    * ```
    */
  get formTemplate(): Prisma.FormTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidato`: Exposes CRUD operations for the **Candidato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidatoes
    * const candidatoes = await prisma.candidato.findMany()
    * ```
    */
  get candidato(): Prisma.CandidatoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.arquivoCandidato`: Exposes CRUD operations for the **ArquivoCandidato** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ArquivoCandidatoes
    * const arquivoCandidatoes = await prisma.arquivoCandidato.findMany()
    * ```
    */
  get arquivoCandidato(): Prisma.ArquivoCandidatoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Funcionario: 'Funcionario',
    Cliente: 'Cliente',
    Funil_Vendas: 'Funil_Vendas',
    Evento: 'Evento',
    ContatoCliente: 'ContatoCliente',
    AgendamentoInteracao: 'AgendamentoInteracao',
    HistoricoFunil: 'HistoricoFunil',
    InteracaoCliente: 'InteracaoCliente',
    Venda: 'Venda',
    FuncionariosConvidados: 'FuncionariosConvidados',
    Notificacao: 'Notificacao',
    NotificacaoConvidados: 'NotificacaoConvidados',
    Presenca: 'Presenca',
    FormTemplate: 'FormTemplate',
    Candidato: 'Candidato',
    ArquivoCandidato: 'ArquivoCandidato'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "funcionario" | "cliente" | "funil_Vendas" | "evento" | "contatoCliente" | "agendamentoInteracao" | "historicoFunil" | "interacaoCliente" | "venda" | "funcionariosConvidados" | "notificacao" | "notificacaoConvidados" | "presenca" | "formTemplate" | "candidato" | "arquivoCandidato"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Funcionario: {
        payload: Prisma.$FuncionarioPayload<ExtArgs>
        fields: Prisma.FuncionarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuncionarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuncionarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          findFirst: {
            args: Prisma.FuncionarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuncionarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          findMany: {
            args: Prisma.FuncionarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>[]
          }
          create: {
            args: Prisma.FuncionarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          createMany: {
            args: Prisma.FuncionarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FuncionarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          update: {
            args: Prisma.FuncionarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          deleteMany: {
            args: Prisma.FuncionarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FuncionarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FuncionarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionarioPayload>
          }
          aggregate: {
            args: Prisma.FuncionarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFuncionario>
          }
          groupBy: {
            args: Prisma.FuncionarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<FuncionarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuncionarioCountArgs<ExtArgs>
            result: $Utils.Optional<FuncionarioCountAggregateOutputType> | number
          }
        }
      }
      Cliente: {
        payload: Prisma.$ClientePayload<ExtArgs>
        fields: Prisma.ClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findFirst: {
            args: Prisma.ClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          findMany: {
            args: Prisma.ClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>[]
          }
          create: {
            args: Prisma.ClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          createMany: {
            args: Prisma.ClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          update: {
            args: Prisma.ClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          deleteMany: {
            args: Prisma.ClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientePayload>
          }
          aggregate: {
            args: Prisma.ClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCliente>
          }
          groupBy: {
            args: Prisma.ClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ClienteCountAggregateOutputType> | number
          }
        }
      }
      Funil_Vendas: {
        payload: Prisma.$Funil_VendasPayload<ExtArgs>
        fields: Prisma.Funil_VendasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Funil_VendasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Funil_VendasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>
          }
          findFirst: {
            args: Prisma.Funil_VendasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Funil_VendasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>
          }
          findMany: {
            args: Prisma.Funil_VendasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>[]
          }
          create: {
            args: Prisma.Funil_VendasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>
          }
          createMany: {
            args: Prisma.Funil_VendasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Funil_VendasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>
          }
          update: {
            args: Prisma.Funil_VendasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>
          }
          deleteMany: {
            args: Prisma.Funil_VendasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Funil_VendasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Funil_VendasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Funil_VendasPayload>
          }
          aggregate: {
            args: Prisma.Funil_VendasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFunil_Vendas>
          }
          groupBy: {
            args: Prisma.Funil_VendasGroupByArgs<ExtArgs>
            result: $Utils.Optional<Funil_VendasGroupByOutputType>[]
          }
          count: {
            args: Prisma.Funil_VendasCountArgs<ExtArgs>
            result: $Utils.Optional<Funil_VendasCountAggregateOutputType> | number
          }
        }
      }
      Evento: {
        payload: Prisma.$EventoPayload<ExtArgs>
        fields: Prisma.EventoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findFirst: {
            args: Prisma.EventoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findMany: {
            args: Prisma.EventoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>[]
          }
          create: {
            args: Prisma.EventoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          createMany: {
            args: Prisma.EventoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          update: {
            args: Prisma.EventoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          deleteMany: {
            args: Prisma.EventoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          aggregate: {
            args: Prisma.EventoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvento>
          }
          groupBy: {
            args: Prisma.EventoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventoCountArgs<ExtArgs>
            result: $Utils.Optional<EventoCountAggregateOutputType> | number
          }
        }
      }
      ContatoCliente: {
        payload: Prisma.$ContatoClientePayload<ExtArgs>
        fields: Prisma.ContatoClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContatoClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContatoClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>
          }
          findFirst: {
            args: Prisma.ContatoClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContatoClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>
          }
          findMany: {
            args: Prisma.ContatoClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>[]
          }
          create: {
            args: Prisma.ContatoClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>
          }
          createMany: {
            args: Prisma.ContatoClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ContatoClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>
          }
          update: {
            args: Prisma.ContatoClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>
          }
          deleteMany: {
            args: Prisma.ContatoClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContatoClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContatoClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContatoClientePayload>
          }
          aggregate: {
            args: Prisma.ContatoClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContatoCliente>
          }
          groupBy: {
            args: Prisma.ContatoClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContatoClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContatoClienteCountArgs<ExtArgs>
            result: $Utils.Optional<ContatoClienteCountAggregateOutputType> | number
          }
        }
      }
      AgendamentoInteracao: {
        payload: Prisma.$AgendamentoInteracaoPayload<ExtArgs>
        fields: Prisma.AgendamentoInteracaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendamentoInteracaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendamentoInteracaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>
          }
          findFirst: {
            args: Prisma.AgendamentoInteracaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendamentoInteracaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>
          }
          findMany: {
            args: Prisma.AgendamentoInteracaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>[]
          }
          create: {
            args: Prisma.AgendamentoInteracaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>
          }
          createMany: {
            args: Prisma.AgendamentoInteracaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AgendamentoInteracaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>
          }
          update: {
            args: Prisma.AgendamentoInteracaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>
          }
          deleteMany: {
            args: Prisma.AgendamentoInteracaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgendamentoInteracaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgendamentoInteracaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendamentoInteracaoPayload>
          }
          aggregate: {
            args: Prisma.AgendamentoInteracaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgendamentoInteracao>
          }
          groupBy: {
            args: Prisma.AgendamentoInteracaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgendamentoInteracaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendamentoInteracaoCountArgs<ExtArgs>
            result: $Utils.Optional<AgendamentoInteracaoCountAggregateOutputType> | number
          }
        }
      }
      HistoricoFunil: {
        payload: Prisma.$HistoricoFunilPayload<ExtArgs>
        fields: Prisma.HistoricoFunilFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoricoFunilFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoricoFunilFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>
          }
          findFirst: {
            args: Prisma.HistoricoFunilFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoricoFunilFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>
          }
          findMany: {
            args: Prisma.HistoricoFunilFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>[]
          }
          create: {
            args: Prisma.HistoricoFunilCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>
          }
          createMany: {
            args: Prisma.HistoricoFunilCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HistoricoFunilDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>
          }
          update: {
            args: Prisma.HistoricoFunilUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>
          }
          deleteMany: {
            args: Prisma.HistoricoFunilDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistoricoFunilUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HistoricoFunilUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoFunilPayload>
          }
          aggregate: {
            args: Prisma.HistoricoFunilAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistoricoFunil>
          }
          groupBy: {
            args: Prisma.HistoricoFunilGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoricoFunilGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoricoFunilCountArgs<ExtArgs>
            result: $Utils.Optional<HistoricoFunilCountAggregateOutputType> | number
          }
        }
      }
      InteracaoCliente: {
        payload: Prisma.$InteracaoClientePayload<ExtArgs>
        fields: Prisma.InteracaoClienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InteracaoClienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InteracaoClienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>
          }
          findFirst: {
            args: Prisma.InteracaoClienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InteracaoClienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>
          }
          findMany: {
            args: Prisma.InteracaoClienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>[]
          }
          create: {
            args: Prisma.InteracaoClienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>
          }
          createMany: {
            args: Prisma.InteracaoClienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InteracaoClienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>
          }
          update: {
            args: Prisma.InteracaoClienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>
          }
          deleteMany: {
            args: Prisma.InteracaoClienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InteracaoClienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InteracaoClienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoClientePayload>
          }
          aggregate: {
            args: Prisma.InteracaoClienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInteracaoCliente>
          }
          groupBy: {
            args: Prisma.InteracaoClienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<InteracaoClienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.InteracaoClienteCountArgs<ExtArgs>
            result: $Utils.Optional<InteracaoClienteCountAggregateOutputType> | number
          }
        }
      }
      Venda: {
        payload: Prisma.$VendaPayload<ExtArgs>
        fields: Prisma.VendaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VendaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>
          }
          findFirst: {
            args: Prisma.VendaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>
          }
          findMany: {
            args: Prisma.VendaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>[]
          }
          create: {
            args: Prisma.VendaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>
          }
          createMany: {
            args: Prisma.VendaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VendaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>
          }
          update: {
            args: Prisma.VendaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>
          }
          deleteMany: {
            args: Prisma.VendaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VendaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VendaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VendaPayload>
          }
          aggregate: {
            args: Prisma.VendaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenda>
          }
          groupBy: {
            args: Prisma.VendaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VendaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendaCountArgs<ExtArgs>
            result: $Utils.Optional<VendaCountAggregateOutputType> | number
          }
        }
      }
      FuncionariosConvidados: {
        payload: Prisma.$FuncionariosConvidadosPayload<ExtArgs>
        fields: Prisma.FuncionariosConvidadosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FuncionariosConvidadosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FuncionariosConvidadosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>
          }
          findFirst: {
            args: Prisma.FuncionariosConvidadosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FuncionariosConvidadosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>
          }
          findMany: {
            args: Prisma.FuncionariosConvidadosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>[]
          }
          create: {
            args: Prisma.FuncionariosConvidadosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>
          }
          createMany: {
            args: Prisma.FuncionariosConvidadosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FuncionariosConvidadosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>
          }
          update: {
            args: Prisma.FuncionariosConvidadosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>
          }
          deleteMany: {
            args: Prisma.FuncionariosConvidadosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FuncionariosConvidadosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FuncionariosConvidadosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FuncionariosConvidadosPayload>
          }
          aggregate: {
            args: Prisma.FuncionariosConvidadosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFuncionariosConvidados>
          }
          groupBy: {
            args: Prisma.FuncionariosConvidadosGroupByArgs<ExtArgs>
            result: $Utils.Optional<FuncionariosConvidadosGroupByOutputType>[]
          }
          count: {
            args: Prisma.FuncionariosConvidadosCountArgs<ExtArgs>
            result: $Utils.Optional<FuncionariosConvidadosCountAggregateOutputType> | number
          }
        }
      }
      Notificacao: {
        payload: Prisma.$NotificacaoPayload<ExtArgs>
        fields: Prisma.NotificacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          findFirst: {
            args: Prisma.NotificacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          findMany: {
            args: Prisma.NotificacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>[]
          }
          create: {
            args: Prisma.NotificacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          createMany: {
            args: Prisma.NotificacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          update: {
            args: Prisma.NotificacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          deleteMany: {
            args: Prisma.NotificacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoPayload>
          }
          aggregate: {
            args: Prisma.NotificacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificacao>
          }
          groupBy: {
            args: Prisma.NotificacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificacaoCountArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoCountAggregateOutputType> | number
          }
        }
      }
      NotificacaoConvidados: {
        payload: Prisma.$NotificacaoConvidadosPayload<ExtArgs>
        fields: Prisma.NotificacaoConvidadosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificacaoConvidadosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificacaoConvidadosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>
          }
          findFirst: {
            args: Prisma.NotificacaoConvidadosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificacaoConvidadosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>
          }
          findMany: {
            args: Prisma.NotificacaoConvidadosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>[]
          }
          create: {
            args: Prisma.NotificacaoConvidadosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>
          }
          createMany: {
            args: Prisma.NotificacaoConvidadosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificacaoConvidadosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>
          }
          update: {
            args: Prisma.NotificacaoConvidadosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>
          }
          deleteMany: {
            args: Prisma.NotificacaoConvidadosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificacaoConvidadosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificacaoConvidadosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacaoConvidadosPayload>
          }
          aggregate: {
            args: Prisma.NotificacaoConvidadosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificacaoConvidados>
          }
          groupBy: {
            args: Prisma.NotificacaoConvidadosGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoConvidadosGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificacaoConvidadosCountArgs<ExtArgs>
            result: $Utils.Optional<NotificacaoConvidadosCountAggregateOutputType> | number
          }
        }
      }
      Presenca: {
        payload: Prisma.$PresencaPayload<ExtArgs>
        fields: Prisma.PresencaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PresencaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PresencaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>
          }
          findFirst: {
            args: Prisma.PresencaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PresencaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>
          }
          findMany: {
            args: Prisma.PresencaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>[]
          }
          create: {
            args: Prisma.PresencaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>
          }
          createMany: {
            args: Prisma.PresencaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PresencaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>
          }
          update: {
            args: Prisma.PresencaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>
          }
          deleteMany: {
            args: Prisma.PresencaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PresencaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PresencaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PresencaPayload>
          }
          aggregate: {
            args: Prisma.PresencaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresenca>
          }
          groupBy: {
            args: Prisma.PresencaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PresencaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PresencaCountArgs<ExtArgs>
            result: $Utils.Optional<PresencaCountAggregateOutputType> | number
          }
        }
      }
      FormTemplate: {
        payload: Prisma.$FormTemplatePayload<ExtArgs>
        fields: Prisma.FormTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FormTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FormTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>
          }
          findFirst: {
            args: Prisma.FormTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FormTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>
          }
          findMany: {
            args: Prisma.FormTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>[]
          }
          create: {
            args: Prisma.FormTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>
          }
          createMany: {
            args: Prisma.FormTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FormTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>
          }
          update: {
            args: Prisma.FormTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>
          }
          deleteMany: {
            args: Prisma.FormTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FormTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FormTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FormTemplatePayload>
          }
          aggregate: {
            args: Prisma.FormTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFormTemplate>
          }
          groupBy: {
            args: Prisma.FormTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<FormTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.FormTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<FormTemplateCountAggregateOutputType> | number
          }
        }
      }
      Candidato: {
        payload: Prisma.$CandidatoPayload<ExtArgs>
        fields: Prisma.CandidatoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidatoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidatoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          findFirst: {
            args: Prisma.CandidatoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidatoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          findMany: {
            args: Prisma.CandidatoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>[]
          }
          create: {
            args: Prisma.CandidatoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          createMany: {
            args: Prisma.CandidatoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CandidatoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          update: {
            args: Prisma.CandidatoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          deleteMany: {
            args: Prisma.CandidatoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidatoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CandidatoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatoPayload>
          }
          aggregate: {
            args: Prisma.CandidatoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidato>
          }
          groupBy: {
            args: Prisma.CandidatoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidatoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidatoCountArgs<ExtArgs>
            result: $Utils.Optional<CandidatoCountAggregateOutputType> | number
          }
        }
      }
      ArquivoCandidato: {
        payload: Prisma.$ArquivoCandidatoPayload<ExtArgs>
        fields: Prisma.ArquivoCandidatoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArquivoCandidatoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArquivoCandidatoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>
          }
          findFirst: {
            args: Prisma.ArquivoCandidatoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArquivoCandidatoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>
          }
          findMany: {
            args: Prisma.ArquivoCandidatoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>[]
          }
          create: {
            args: Prisma.ArquivoCandidatoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>
          }
          createMany: {
            args: Prisma.ArquivoCandidatoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ArquivoCandidatoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>
          }
          update: {
            args: Prisma.ArquivoCandidatoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>
          }
          deleteMany: {
            args: Prisma.ArquivoCandidatoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArquivoCandidatoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ArquivoCandidatoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArquivoCandidatoPayload>
          }
          aggregate: {
            args: Prisma.ArquivoCandidatoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArquivoCandidato>
          }
          groupBy: {
            args: Prisma.ArquivoCandidatoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArquivoCandidatoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArquivoCandidatoCountArgs<ExtArgs>
            result: $Utils.Optional<ArquivoCandidatoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    funcionario?: FuncionarioOmit
    cliente?: ClienteOmit
    funil_Vendas?: Funil_VendasOmit
    evento?: EventoOmit
    contatoCliente?: ContatoClienteOmit
    agendamentoInteracao?: AgendamentoInteracaoOmit
    historicoFunil?: HistoricoFunilOmit
    interacaoCliente?: InteracaoClienteOmit
    venda?: VendaOmit
    funcionariosConvidados?: FuncionariosConvidadosOmit
    notificacao?: NotificacaoOmit
    notificacaoConvidados?: NotificacaoConvidadosOmit
    presenca?: PresencaOmit
    formTemplate?: FormTemplateOmit
    candidato?: CandidatoOmit
    arquivoCandidato?: ArquivoCandidatoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FuncionarioCountOutputType
   */

  export type FuncionarioCountOutputType = {
    subordinados: number
    agendamentosInteracao: number
    clientesGerenciados: number
    interacoesCliente: number
    eventosOrganizados: number
    convitesEventos: number
    vendasRealizadas: number
    formTemplatesCriados: number
  }

  export type FuncionarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subordinados?: boolean | FuncionarioCountOutputTypeCountSubordinadosArgs
    agendamentosInteracao?: boolean | FuncionarioCountOutputTypeCountAgendamentosInteracaoArgs
    clientesGerenciados?: boolean | FuncionarioCountOutputTypeCountClientesGerenciadosArgs
    interacoesCliente?: boolean | FuncionarioCountOutputTypeCountInteracoesClienteArgs
    eventosOrganizados?: boolean | FuncionarioCountOutputTypeCountEventosOrganizadosArgs
    convitesEventos?: boolean | FuncionarioCountOutputTypeCountConvitesEventosArgs
    vendasRealizadas?: boolean | FuncionarioCountOutputTypeCountVendasRealizadasArgs
    formTemplatesCriados?: boolean | FuncionarioCountOutputTypeCountFormTemplatesCriadosArgs
  }

  // Custom InputTypes
  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionarioCountOutputType
     */
    select?: FuncionarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountSubordinadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionarioWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountAgendamentosInteracaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentoInteracaoWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountClientesGerenciadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountInteracoesClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteracaoClienteWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountEventosOrganizadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountConvitesEventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionariosConvidadosWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountVendasRealizadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendaWhereInput
  }

  /**
   * FuncionarioCountOutputType without action
   */
  export type FuncionarioCountOutputTypeCountFormTemplatesCriadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormTemplateWhereInput
  }


  /**
   * Count Type ClienteCountOutputType
   */

  export type ClienteCountOutputType = {
    contatos: number
    agendamentos: number
    historicoFunil: number
    interacoes: number
    vendas: number
  }

  export type ClienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contatos?: boolean | ClienteCountOutputTypeCountContatosArgs
    agendamentos?: boolean | ClienteCountOutputTypeCountAgendamentosArgs
    historicoFunil?: boolean | ClienteCountOutputTypeCountHistoricoFunilArgs
    interacoes?: boolean | ClienteCountOutputTypeCountInteracoesArgs
    vendas?: boolean | ClienteCountOutputTypeCountVendasArgs
  }

  // Custom InputTypes
  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClienteCountOutputType
     */
    select?: ClienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountContatosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContatoClienteWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountAgendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentoInteracaoWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountHistoricoFunilArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoFunilWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountInteracoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteracaoClienteWhereInput
  }

  /**
   * ClienteCountOutputType without action
   */
  export type ClienteCountOutputTypeCountVendasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendaWhereInput
  }


  /**
   * Count Type Funil_VendasCountOutputType
   */

  export type Funil_VendasCountOutputType = {
    clientes: number
    historico: number
  }

  export type Funil_VendasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Funil_VendasCountOutputTypeCountClientesArgs
    historico?: boolean | Funil_VendasCountOutputTypeCountHistoricoArgs
  }

  // Custom InputTypes
  /**
   * Funil_VendasCountOutputType without action
   */
  export type Funil_VendasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_VendasCountOutputType
     */
    select?: Funil_VendasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Funil_VendasCountOutputType without action
   */
  export type Funil_VendasCountOutputTypeCountClientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
  }

  /**
   * Funil_VendasCountOutputType without action
   */
  export type Funil_VendasCountOutputTypeCountHistoricoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoFunilWhereInput
  }


  /**
   * Count Type EventoCountOutputType
   */

  export type EventoCountOutputType = {
    funcionariosConvidados: number
    notificacoes: number
  }

  export type EventoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    funcionariosConvidados?: boolean | EventoCountOutputTypeCountFuncionariosConvidadosArgs
    notificacoes?: boolean | EventoCountOutputTypeCountNotificacoesArgs
  }

  // Custom InputTypes
  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventoCountOutputType
     */
    select?: EventoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountFuncionariosConvidadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionariosConvidadosWhereInput
  }

  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountNotificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
  }


  /**
   * Count Type FuncionariosConvidadosCountOutputType
   */

  export type FuncionariosConvidadosCountOutputType = {
    notificacoes: number
  }

  export type FuncionariosConvidadosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notificacoes?: boolean | FuncionariosConvidadosCountOutputTypeCountNotificacoesArgs
  }

  // Custom InputTypes
  /**
   * FuncionariosConvidadosCountOutputType without action
   */
  export type FuncionariosConvidadosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidadosCountOutputType
     */
    select?: FuncionariosConvidadosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FuncionariosConvidadosCountOutputType without action
   */
  export type FuncionariosConvidadosCountOutputTypeCountNotificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoConvidadosWhereInput
  }


  /**
   * Count Type NotificacaoCountOutputType
   */

  export type NotificacaoCountOutputType = {
    convidados: number
  }

  export type NotificacaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    convidados?: boolean | NotificacaoCountOutputTypeCountConvidadosArgs
  }

  // Custom InputTypes
  /**
   * NotificacaoCountOutputType without action
   */
  export type NotificacaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoCountOutputType
     */
    select?: NotificacaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificacaoCountOutputType without action
   */
  export type NotificacaoCountOutputTypeCountConvidadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoConvidadosWhereInput
  }


  /**
   * Count Type CandidatoCountOutputType
   */

  export type CandidatoCountOutputType = {
    arquivos: number
  }

  export type CandidatoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arquivos?: boolean | CandidatoCountOutputTypeCountArquivosArgs
  }

  // Custom InputTypes
  /**
   * CandidatoCountOutputType without action
   */
  export type CandidatoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidatoCountOutputType
     */
    select?: CandidatoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidatoCountOutputType without action
   */
  export type CandidatoCountOutputTypeCountArquivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArquivoCandidatoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Funcionario
   */

  export type AggregateFuncionario = {
    _count: FuncionarioCountAggregateOutputType | null
    _avg: FuncionarioAvgAggregateOutputType | null
    _sum: FuncionarioSumAggregateOutputType | null
    _min: FuncionarioMinAggregateOutputType | null
    _max: FuncionarioMaxAggregateOutputType | null
  }

  export type FuncionarioAvgAggregateOutputType = {
    id: number | null
    gerenteId: number | null
  }

  export type FuncionarioSumAggregateOutputType = {
    id: number | null
    gerenteId: number | null
  }

  export type FuncionarioMinAggregateOutputType = {
    id: number | null
    cpf: string | null
    nome: string | null
    endereco: string | null
    genero: string | null
    telefone: string | null
    cargo: string | null
    email: string | null
    local: string | null
    nivelAcesso: string | null
    senhaHash: string | null
    dataNascimento: Date | null
    gerenteId: number | null
  }

  export type FuncionarioMaxAggregateOutputType = {
    id: number | null
    cpf: string | null
    nome: string | null
    endereco: string | null
    genero: string | null
    telefone: string | null
    cargo: string | null
    email: string | null
    local: string | null
    nivelAcesso: string | null
    senhaHash: string | null
    dataNascimento: Date | null
    gerenteId: number | null
  }

  export type FuncionarioCountAggregateOutputType = {
    id: number
    cpf: number
    nome: number
    endereco: number
    genero: number
    telefone: number
    cargo: number
    email: number
    local: number
    nivelAcesso: number
    senhaHash: number
    dataNascimento: number
    gerenteId: number
    _all: number
  }


  export type FuncionarioAvgAggregateInputType = {
    id?: true
    gerenteId?: true
  }

  export type FuncionarioSumAggregateInputType = {
    id?: true
    gerenteId?: true
  }

  export type FuncionarioMinAggregateInputType = {
    id?: true
    cpf?: true
    nome?: true
    endereco?: true
    genero?: true
    telefone?: true
    cargo?: true
    email?: true
    local?: true
    nivelAcesso?: true
    senhaHash?: true
    dataNascimento?: true
    gerenteId?: true
  }

  export type FuncionarioMaxAggregateInputType = {
    id?: true
    cpf?: true
    nome?: true
    endereco?: true
    genero?: true
    telefone?: true
    cargo?: true
    email?: true
    local?: true
    nivelAcesso?: true
    senhaHash?: true
    dataNascimento?: true
    gerenteId?: true
  }

  export type FuncionarioCountAggregateInputType = {
    id?: true
    cpf?: true
    nome?: true
    endereco?: true
    genero?: true
    telefone?: true
    cargo?: true
    email?: true
    local?: true
    nivelAcesso?: true
    senhaHash?: true
    dataNascimento?: true
    gerenteId?: true
    _all?: true
  }

  export type FuncionarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcionario to aggregate.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funcionarios
    **/
    _count?: true | FuncionarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncionarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncionarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncionarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncionarioMaxAggregateInputType
  }

  export type GetFuncionarioAggregateType<T extends FuncionarioAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncionario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncionario[P]>
      : GetScalarType<T[P], AggregateFuncionario[P]>
  }




  export type FuncionarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionarioWhereInput
    orderBy?: FuncionarioOrderByWithAggregationInput | FuncionarioOrderByWithAggregationInput[]
    by: FuncionarioScalarFieldEnum[] | FuncionarioScalarFieldEnum
    having?: FuncionarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncionarioCountAggregateInputType | true
    _avg?: FuncionarioAvgAggregateInputType
    _sum?: FuncionarioSumAggregateInputType
    _min?: FuncionarioMinAggregateInputType
    _max?: FuncionarioMaxAggregateInputType
  }

  export type FuncionarioGroupByOutputType = {
    id: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date
    gerenteId: number | null
    _count: FuncionarioCountAggregateOutputType | null
    _avg: FuncionarioAvgAggregateOutputType | null
    _sum: FuncionarioSumAggregateOutputType | null
    _min: FuncionarioMinAggregateOutputType | null
    _max: FuncionarioMaxAggregateOutputType | null
  }

  type GetFuncionarioGroupByPayload<T extends FuncionarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuncionarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncionarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncionarioGroupByOutputType[P]>
            : GetScalarType<T[P], FuncionarioGroupByOutputType[P]>
        }
      >
    >


  export type FuncionarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cpf?: boolean
    nome?: boolean
    endereco?: boolean
    genero?: boolean
    telefone?: boolean
    cargo?: boolean
    email?: boolean
    local?: boolean
    nivelAcesso?: boolean
    senhaHash?: boolean
    dataNascimento?: boolean
    gerenteId?: boolean
    gerente?: boolean | Funcionario$gerenteArgs<ExtArgs>
    subordinados?: boolean | Funcionario$subordinadosArgs<ExtArgs>
    agendamentosInteracao?: boolean | Funcionario$agendamentosInteracaoArgs<ExtArgs>
    clientesGerenciados?: boolean | Funcionario$clientesGerenciadosArgs<ExtArgs>
    interacoesCliente?: boolean | Funcionario$interacoesClienteArgs<ExtArgs>
    eventosOrganizados?: boolean | Funcionario$eventosOrganizadosArgs<ExtArgs>
    convitesEventos?: boolean | Funcionario$convitesEventosArgs<ExtArgs>
    vendasRealizadas?: boolean | Funcionario$vendasRealizadasArgs<ExtArgs>
    formTemplatesCriados?: boolean | Funcionario$formTemplatesCriadosArgs<ExtArgs>
    _count?: boolean | FuncionarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["funcionario"]>



  export type FuncionarioSelectScalar = {
    id?: boolean
    cpf?: boolean
    nome?: boolean
    endereco?: boolean
    genero?: boolean
    telefone?: boolean
    cargo?: boolean
    email?: boolean
    local?: boolean
    nivelAcesso?: boolean
    senhaHash?: boolean
    dataNascimento?: boolean
    gerenteId?: boolean
  }

  export type FuncionarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cpf" | "nome" | "endereco" | "genero" | "telefone" | "cargo" | "email" | "local" | "nivelAcesso" | "senhaHash" | "dataNascimento" | "gerenteId", ExtArgs["result"]["funcionario"]>
  export type FuncionarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gerente?: boolean | Funcionario$gerenteArgs<ExtArgs>
    subordinados?: boolean | Funcionario$subordinadosArgs<ExtArgs>
    agendamentosInteracao?: boolean | Funcionario$agendamentosInteracaoArgs<ExtArgs>
    clientesGerenciados?: boolean | Funcionario$clientesGerenciadosArgs<ExtArgs>
    interacoesCliente?: boolean | Funcionario$interacoesClienteArgs<ExtArgs>
    eventosOrganizados?: boolean | Funcionario$eventosOrganizadosArgs<ExtArgs>
    convitesEventos?: boolean | Funcionario$convitesEventosArgs<ExtArgs>
    vendasRealizadas?: boolean | Funcionario$vendasRealizadasArgs<ExtArgs>
    formTemplatesCriados?: boolean | Funcionario$formTemplatesCriadosArgs<ExtArgs>
    _count?: boolean | FuncionarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FuncionarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Funcionario"
    objects: {
      gerente: Prisma.$FuncionarioPayload<ExtArgs> | null
      subordinados: Prisma.$FuncionarioPayload<ExtArgs>[]
      agendamentosInteracao: Prisma.$AgendamentoInteracaoPayload<ExtArgs>[]
      clientesGerenciados: Prisma.$ClientePayload<ExtArgs>[]
      interacoesCliente: Prisma.$InteracaoClientePayload<ExtArgs>[]
      eventosOrganizados: Prisma.$EventoPayload<ExtArgs>[]
      convitesEventos: Prisma.$FuncionariosConvidadosPayload<ExtArgs>[]
      vendasRealizadas: Prisma.$VendaPayload<ExtArgs>[]
      formTemplatesCriados: Prisma.$FormTemplatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cpf: string
      nome: string
      endereco: string
      genero: string
      telefone: string
      cargo: string
      email: string
      local: string
      nivelAcesso: string
      senhaHash: string
      dataNascimento: Date
      gerenteId: number | null
    }, ExtArgs["result"]["funcionario"]>
    composites: {}
  }

  type FuncionarioGetPayload<S extends boolean | null | undefined | FuncionarioDefaultArgs> = $Result.GetResult<Prisma.$FuncionarioPayload, S>

  type FuncionarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FuncionarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FuncionarioCountAggregateInputType | true
    }

  export interface FuncionarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Funcionario'], meta: { name: 'Funcionario' } }
    /**
     * Find zero or one Funcionario that matches the filter.
     * @param {FuncionarioFindUniqueArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FuncionarioFindUniqueArgs>(args: SelectSubset<T, FuncionarioFindUniqueArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Funcionario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FuncionarioFindUniqueOrThrowArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FuncionarioFindUniqueOrThrowArgs>(args: SelectSubset<T, FuncionarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funcionario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindFirstArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FuncionarioFindFirstArgs>(args?: SelectSubset<T, FuncionarioFindFirstArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funcionario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindFirstOrThrowArgs} args - Arguments to find a Funcionario
     * @example
     * // Get one Funcionario
     * const funcionario = await prisma.funcionario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FuncionarioFindFirstOrThrowArgs>(args?: SelectSubset<T, FuncionarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Funcionarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funcionarios
     * const funcionarios = await prisma.funcionario.findMany()
     * 
     * // Get first 10 Funcionarios
     * const funcionarios = await prisma.funcionario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const funcionarioWithIdOnly = await prisma.funcionario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FuncionarioFindManyArgs>(args?: SelectSubset<T, FuncionarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Funcionario.
     * @param {FuncionarioCreateArgs} args - Arguments to create a Funcionario.
     * @example
     * // Create one Funcionario
     * const Funcionario = await prisma.funcionario.create({
     *   data: {
     *     // ... data to create a Funcionario
     *   }
     * })
     * 
     */
    create<T extends FuncionarioCreateArgs>(args: SelectSubset<T, FuncionarioCreateArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Funcionarios.
     * @param {FuncionarioCreateManyArgs} args - Arguments to create many Funcionarios.
     * @example
     * // Create many Funcionarios
     * const funcionario = await prisma.funcionario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FuncionarioCreateManyArgs>(args?: SelectSubset<T, FuncionarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Funcionario.
     * @param {FuncionarioDeleteArgs} args - Arguments to delete one Funcionario.
     * @example
     * // Delete one Funcionario
     * const Funcionario = await prisma.funcionario.delete({
     *   where: {
     *     // ... filter to delete one Funcionario
     *   }
     * })
     * 
     */
    delete<T extends FuncionarioDeleteArgs>(args: SelectSubset<T, FuncionarioDeleteArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Funcionario.
     * @param {FuncionarioUpdateArgs} args - Arguments to update one Funcionario.
     * @example
     * // Update one Funcionario
     * const funcionario = await prisma.funcionario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FuncionarioUpdateArgs>(args: SelectSubset<T, FuncionarioUpdateArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Funcionarios.
     * @param {FuncionarioDeleteManyArgs} args - Arguments to filter Funcionarios to delete.
     * @example
     * // Delete a few Funcionarios
     * const { count } = await prisma.funcionario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FuncionarioDeleteManyArgs>(args?: SelectSubset<T, FuncionarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funcionarios
     * const funcionario = await prisma.funcionario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FuncionarioUpdateManyArgs>(args: SelectSubset<T, FuncionarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Funcionario.
     * @param {FuncionarioUpsertArgs} args - Arguments to update or create a Funcionario.
     * @example
     * // Update or create a Funcionario
     * const funcionario = await prisma.funcionario.upsert({
     *   create: {
     *     // ... data to create a Funcionario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funcionario we want to update
     *   }
     * })
     */
    upsert<T extends FuncionarioUpsertArgs>(args: SelectSubset<T, FuncionarioUpsertArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Funcionarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioCountArgs} args - Arguments to filter Funcionarios to count.
     * @example
     * // Count the number of Funcionarios
     * const count = await prisma.funcionario.count({
     *   where: {
     *     // ... the filter for the Funcionarios we want to count
     *   }
     * })
    **/
    count<T extends FuncionarioCountArgs>(
      args?: Subset<T, FuncionarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncionarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funcionario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncionarioAggregateArgs>(args: Subset<T, FuncionarioAggregateArgs>): Prisma.PrismaPromise<GetFuncionarioAggregateType<T>>

    /**
     * Group by Funcionario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncionarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncionarioGroupByArgs['orderBy'] }
        : { orderBy?: FuncionarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncionarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncionarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Funcionario model
   */
  readonly fields: FuncionarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Funcionario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuncionarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gerente<T extends Funcionario$gerenteArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$gerenteArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    subordinados<T extends Funcionario$subordinadosArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$subordinadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    agendamentosInteracao<T extends Funcionario$agendamentosInteracaoArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$agendamentosInteracaoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clientesGerenciados<T extends Funcionario$clientesGerenciadosArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$clientesGerenciadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interacoesCliente<T extends Funcionario$interacoesClienteArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$interacoesClienteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    eventosOrganizados<T extends Funcionario$eventosOrganizadosArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$eventosOrganizadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    convitesEventos<T extends Funcionario$convitesEventosArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$convitesEventosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendasRealizadas<T extends Funcionario$vendasRealizadasArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$vendasRealizadasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    formTemplatesCriados<T extends Funcionario$formTemplatesCriadosArgs<ExtArgs> = {}>(args?: Subset<T, Funcionario$formTemplatesCriadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Funcionario model
   */
  interface FuncionarioFieldRefs {
    readonly id: FieldRef<"Funcionario", 'Int'>
    readonly cpf: FieldRef<"Funcionario", 'String'>
    readonly nome: FieldRef<"Funcionario", 'String'>
    readonly endereco: FieldRef<"Funcionario", 'String'>
    readonly genero: FieldRef<"Funcionario", 'String'>
    readonly telefone: FieldRef<"Funcionario", 'String'>
    readonly cargo: FieldRef<"Funcionario", 'String'>
    readonly email: FieldRef<"Funcionario", 'String'>
    readonly local: FieldRef<"Funcionario", 'String'>
    readonly nivelAcesso: FieldRef<"Funcionario", 'String'>
    readonly senhaHash: FieldRef<"Funcionario", 'String'>
    readonly dataNascimento: FieldRef<"Funcionario", 'DateTime'>
    readonly gerenteId: FieldRef<"Funcionario", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Funcionario findUnique
   */
  export type FuncionarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario findUniqueOrThrow
   */
  export type FuncionarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario findFirst
   */
  export type FuncionarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     */
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario findFirstOrThrow
   */
  export type FuncionarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionario to fetch.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funcionarios.
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funcionarios.
     */
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario findMany
   */
  export type FuncionarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter, which Funcionarios to fetch.
     */
    where?: FuncionarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funcionarios to fetch.
     */
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funcionarios.
     */
    cursor?: FuncionarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funcionarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funcionarios.
     */
    skip?: number
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario create
   */
  export type FuncionarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Funcionario.
     */
    data: XOR<FuncionarioCreateInput, FuncionarioUncheckedCreateInput>
  }

  /**
   * Funcionario createMany
   */
  export type FuncionarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funcionarios.
     */
    data: FuncionarioCreateManyInput | FuncionarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Funcionario update
   */
  export type FuncionarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Funcionario.
     */
    data: XOR<FuncionarioUpdateInput, FuncionarioUncheckedUpdateInput>
    /**
     * Choose, which Funcionario to update.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario updateMany
   */
  export type FuncionarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funcionarios.
     */
    data: XOR<FuncionarioUpdateManyMutationInput, FuncionarioUncheckedUpdateManyInput>
    /**
     * Filter which Funcionarios to update
     */
    where?: FuncionarioWhereInput
    /**
     * Limit how many Funcionarios to update.
     */
    limit?: number
  }

  /**
   * Funcionario upsert
   */
  export type FuncionarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Funcionario to update in case it exists.
     */
    where: FuncionarioWhereUniqueInput
    /**
     * In case the Funcionario found by the `where` argument doesn't exist, create a new Funcionario with this data.
     */
    create: XOR<FuncionarioCreateInput, FuncionarioUncheckedCreateInput>
    /**
     * In case the Funcionario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuncionarioUpdateInput, FuncionarioUncheckedUpdateInput>
  }

  /**
   * Funcionario delete
   */
  export type FuncionarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    /**
     * Filter which Funcionario to delete.
     */
    where: FuncionarioWhereUniqueInput
  }

  /**
   * Funcionario deleteMany
   */
  export type FuncionarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funcionarios to delete
     */
    where?: FuncionarioWhereInput
    /**
     * Limit how many Funcionarios to delete.
     */
    limit?: number
  }

  /**
   * Funcionario.gerente
   */
  export type Funcionario$gerenteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    where?: FuncionarioWhereInput
  }

  /**
   * Funcionario.subordinados
   */
  export type Funcionario$subordinadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
    where?: FuncionarioWhereInput
    orderBy?: FuncionarioOrderByWithRelationInput | FuncionarioOrderByWithRelationInput[]
    cursor?: FuncionarioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FuncionarioScalarFieldEnum | FuncionarioScalarFieldEnum[]
  }

  /**
   * Funcionario.agendamentosInteracao
   */
  export type Funcionario$agendamentosInteracaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    where?: AgendamentoInteracaoWhereInput
    orderBy?: AgendamentoInteracaoOrderByWithRelationInput | AgendamentoInteracaoOrderByWithRelationInput[]
    cursor?: AgendamentoInteracaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentoInteracaoScalarFieldEnum | AgendamentoInteracaoScalarFieldEnum[]
  }

  /**
   * Funcionario.clientesGerenciados
   */
  export type Funcionario$clientesGerenciadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Funcionario.interacoesCliente
   */
  export type Funcionario$interacoesClienteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    where?: InteracaoClienteWhereInput
    orderBy?: InteracaoClienteOrderByWithRelationInput | InteracaoClienteOrderByWithRelationInput[]
    cursor?: InteracaoClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InteracaoClienteScalarFieldEnum | InteracaoClienteScalarFieldEnum[]
  }

  /**
   * Funcionario.eventosOrganizados
   */
  export type Funcionario$eventosOrganizadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Funcionario.convitesEventos
   */
  export type Funcionario$convitesEventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    where?: FuncionariosConvidadosWhereInput
    orderBy?: FuncionariosConvidadosOrderByWithRelationInput | FuncionariosConvidadosOrderByWithRelationInput[]
    cursor?: FuncionariosConvidadosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FuncionariosConvidadosScalarFieldEnum | FuncionariosConvidadosScalarFieldEnum[]
  }

  /**
   * Funcionario.vendasRealizadas
   */
  export type Funcionario$vendasRealizadasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    where?: VendaWhereInput
    orderBy?: VendaOrderByWithRelationInput | VendaOrderByWithRelationInput[]
    cursor?: VendaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendaScalarFieldEnum | VendaScalarFieldEnum[]
  }

  /**
   * Funcionario.formTemplatesCriados
   */
  export type Funcionario$formTemplatesCriadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    where?: FormTemplateWhereInput
    orderBy?: FormTemplateOrderByWithRelationInput | FormTemplateOrderByWithRelationInput[]
    cursor?: FormTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FormTemplateScalarFieldEnum | FormTemplateScalarFieldEnum[]
  }

  /**
   * Funcionario without action
   */
  export type FuncionarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funcionario
     */
    select?: FuncionarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funcionario
     */
    omit?: FuncionarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionarioInclude<ExtArgs> | null
  }


  /**
   * Model Cliente
   */

  export type AggregateCliente = {
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  export type ClienteAvgAggregateOutputType = {
    id: number | null
    funcionarioId: number | null
    funilId: number | null
  }

  export type ClienteSumAggregateOutputType = {
    id: number | null
    funcionarioId: number | null
    funilId: number | null
  }

  export type ClienteMinAggregateOutputType = {
    id: number | null
    nome: string | null
    endereco: string | null
    funcionarioId: number | null
    funilId: number | null
  }

  export type ClienteMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    endereco: string | null
    funcionarioId: number | null
    funilId: number | null
  }

  export type ClienteCountAggregateOutputType = {
    id: number
    nome: number
    endereco: number
    funcionarioId: number
    funilId: number
    _all: number
  }


  export type ClienteAvgAggregateInputType = {
    id?: true
    funcionarioId?: true
    funilId?: true
  }

  export type ClienteSumAggregateInputType = {
    id?: true
    funcionarioId?: true
    funilId?: true
  }

  export type ClienteMinAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    funcionarioId?: true
    funilId?: true
  }

  export type ClienteMaxAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    funcionarioId?: true
    funilId?: true
  }

  export type ClienteCountAggregateInputType = {
    id?: true
    nome?: true
    endereco?: true
    funcionarioId?: true
    funilId?: true
    _all?: true
  }

  export type ClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cliente to aggregate.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClienteMaxAggregateInputType
  }

  export type GetClienteAggregateType<T extends ClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCliente[P]>
      : GetScalarType<T[P], AggregateCliente[P]>
  }




  export type ClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithAggregationInput | ClienteOrderByWithAggregationInput[]
    by: ClienteScalarFieldEnum[] | ClienteScalarFieldEnum
    having?: ClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClienteCountAggregateInputType | true
    _avg?: ClienteAvgAggregateInputType
    _sum?: ClienteSumAggregateInputType
    _min?: ClienteMinAggregateInputType
    _max?: ClienteMaxAggregateInputType
  }

  export type ClienteGroupByOutputType = {
    id: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    _count: ClienteCountAggregateOutputType | null
    _avg: ClienteAvgAggregateOutputType | null
    _sum: ClienteSumAggregateOutputType | null
    _min: ClienteMinAggregateOutputType | null
    _max: ClienteMaxAggregateOutputType | null
  }

  type GetClienteGroupByPayload<T extends ClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ClienteGroupByOutputType[P]>
        }
      >
    >


  export type ClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    endereco?: boolean
    funcionarioId?: boolean
    funilId?: boolean
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    funilVendas?: boolean | Funil_VendasDefaultArgs<ExtArgs>
    contatos?: boolean | Cliente$contatosArgs<ExtArgs>
    agendamentos?: boolean | Cliente$agendamentosArgs<ExtArgs>
    historicoFunil?: boolean | Cliente$historicoFunilArgs<ExtArgs>
    interacoes?: boolean | Cliente$interacoesArgs<ExtArgs>
    vendas?: boolean | Cliente$vendasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cliente"]>



  export type ClienteSelectScalar = {
    id?: boolean
    nome?: boolean
    endereco?: boolean
    funcionarioId?: boolean
    funilId?: boolean
  }

  export type ClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "endereco" | "funcionarioId" | "funilId", ExtArgs["result"]["cliente"]>
  export type ClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    funilVendas?: boolean | Funil_VendasDefaultArgs<ExtArgs>
    contatos?: boolean | Cliente$contatosArgs<ExtArgs>
    agendamentos?: boolean | Cliente$agendamentosArgs<ExtArgs>
    historicoFunil?: boolean | Cliente$historicoFunilArgs<ExtArgs>
    interacoes?: boolean | Cliente$interacoesArgs<ExtArgs>
    vendas?: boolean | Cliente$vendasArgs<ExtArgs>
    _count?: boolean | ClienteCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cliente"
    objects: {
      funcionario: Prisma.$FuncionarioPayload<ExtArgs>
      funilVendas: Prisma.$Funil_VendasPayload<ExtArgs>
      contatos: Prisma.$ContatoClientePayload<ExtArgs>[]
      agendamentos: Prisma.$AgendamentoInteracaoPayload<ExtArgs>[]
      historicoFunil: Prisma.$HistoricoFunilPayload<ExtArgs>[]
      interacoes: Prisma.$InteracaoClientePayload<ExtArgs>[]
      vendas: Prisma.$VendaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      endereco: string
      funcionarioId: number
      funilId: number
    }, ExtArgs["result"]["cliente"]>
    composites: {}
  }

  type ClienteGetPayload<S extends boolean | null | undefined | ClienteDefaultArgs> = $Result.GetResult<Prisma.$ClientePayload, S>

  type ClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClienteCountAggregateInputType | true
    }

  export interface ClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cliente'], meta: { name: 'Cliente' } }
    /**
     * Find zero or one Cliente that matches the filter.
     * @param {ClienteFindUniqueArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClienteFindUniqueArgs>(args: SelectSubset<T, ClienteFindUniqueArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClienteFindUniqueOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClienteFindFirstArgs>(args?: SelectSubset<T, ClienteFindFirstArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindFirstOrThrowArgs} args - Arguments to find a Cliente
     * @example
     * // Get one Cliente
     * const cliente = await prisma.cliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.cliente.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.cliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clienteWithIdOnly = await prisma.cliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClienteFindManyArgs>(args?: SelectSubset<T, ClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cliente.
     * @param {ClienteCreateArgs} args - Arguments to create a Cliente.
     * @example
     * // Create one Cliente
     * const Cliente = await prisma.cliente.create({
     *   data: {
     *     // ... data to create a Cliente
     *   }
     * })
     * 
     */
    create<T extends ClienteCreateArgs>(args: SelectSubset<T, ClienteCreateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clientes.
     * @param {ClienteCreateManyArgs} args - Arguments to create many Clientes.
     * @example
     * // Create many Clientes
     * const cliente = await prisma.cliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClienteCreateManyArgs>(args?: SelectSubset<T, ClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cliente.
     * @param {ClienteDeleteArgs} args - Arguments to delete one Cliente.
     * @example
     * // Delete one Cliente
     * const Cliente = await prisma.cliente.delete({
     *   where: {
     *     // ... filter to delete one Cliente
     *   }
     * })
     * 
     */
    delete<T extends ClienteDeleteArgs>(args: SelectSubset<T, ClienteDeleteArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cliente.
     * @param {ClienteUpdateArgs} args - Arguments to update one Cliente.
     * @example
     * // Update one Cliente
     * const cliente = await prisma.cliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClienteUpdateArgs>(args: SelectSubset<T, ClienteUpdateArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clientes.
     * @param {ClienteDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.cliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClienteDeleteManyArgs>(args?: SelectSubset<T, ClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const cliente = await prisma.cliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClienteUpdateManyArgs>(args: SelectSubset<T, ClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cliente.
     * @param {ClienteUpsertArgs} args - Arguments to update or create a Cliente.
     * @example
     * // Update or create a Cliente
     * const cliente = await prisma.cliente.upsert({
     *   create: {
     *     // ... data to create a Cliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cliente we want to update
     *   }
     * })
     */
    upsert<T extends ClienteUpsertArgs>(args: SelectSubset<T, ClienteUpsertArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.cliente.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClienteCountArgs>(
      args?: Subset<T, ClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClienteAggregateArgs>(args: Subset<T, ClienteAggregateArgs>): Prisma.PrismaPromise<GetClienteAggregateType<T>>

    /**
     * Group by Cliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClienteGroupByArgs['orderBy'] }
        : { orderBy?: ClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cliente model
   */
  readonly fields: ClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    funcionario<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    funilVendas<T extends Funil_VendasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Funil_VendasDefaultArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contatos<T extends Cliente$contatosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$contatosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    agendamentos<T extends Cliente$agendamentosArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$agendamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    historicoFunil<T extends Cliente$historicoFunilArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$historicoFunilArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interacoes<T extends Cliente$interacoesArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$interacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vendas<T extends Cliente$vendasArgs<ExtArgs> = {}>(args?: Subset<T, Cliente$vendasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cliente model
   */
  interface ClienteFieldRefs {
    readonly id: FieldRef<"Cliente", 'Int'>
    readonly nome: FieldRef<"Cliente", 'String'>
    readonly endereco: FieldRef<"Cliente", 'String'>
    readonly funcionarioId: FieldRef<"Cliente", 'Int'>
    readonly funilId: FieldRef<"Cliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cliente findUnique
   */
  export type ClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findUniqueOrThrow
   */
  export type ClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente findFirst
   */
  export type ClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findFirstOrThrow
   */
  export type ClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Cliente to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     */
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente findMany
   */
  export type ClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter, which Clientes to fetch.
     */
    where?: ClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     */
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     */
    cursor?: ClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     */
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Cliente create
   */
  export type ClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Cliente.
     */
    data: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
  }

  /**
   * Cliente createMany
   */
  export type ClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clientes.
     */
    data: ClienteCreateManyInput | ClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cliente update
   */
  export type ClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Cliente.
     */
    data: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
    /**
     * Choose, which Cliente to update.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente updateMany
   */
  export type ClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clientes.
     */
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to update.
     */
    limit?: number
  }

  /**
   * Cliente upsert
   */
  export type ClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Cliente to update in case it exists.
     */
    where: ClienteWhereUniqueInput
    /**
     * In case the Cliente found by the `where` argument doesn't exist, create a new Cliente with this data.
     */
    create: XOR<ClienteCreateInput, ClienteUncheckedCreateInput>
    /**
     * In case the Cliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClienteUpdateInput, ClienteUncheckedUpdateInput>
  }

  /**
   * Cliente delete
   */
  export type ClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    /**
     * Filter which Cliente to delete.
     */
    where: ClienteWhereUniqueInput
  }

  /**
   * Cliente deleteMany
   */
  export type ClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clientes to delete
     */
    where?: ClienteWhereInput
    /**
     * Limit how many Clientes to delete.
     */
    limit?: number
  }

  /**
   * Cliente.contatos
   */
  export type Cliente$contatosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    where?: ContatoClienteWhereInput
    orderBy?: ContatoClienteOrderByWithRelationInput | ContatoClienteOrderByWithRelationInput[]
    cursor?: ContatoClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContatoClienteScalarFieldEnum | ContatoClienteScalarFieldEnum[]
  }

  /**
   * Cliente.agendamentos
   */
  export type Cliente$agendamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    where?: AgendamentoInteracaoWhereInput
    orderBy?: AgendamentoInteracaoOrderByWithRelationInput | AgendamentoInteracaoOrderByWithRelationInput[]
    cursor?: AgendamentoInteracaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendamentoInteracaoScalarFieldEnum | AgendamentoInteracaoScalarFieldEnum[]
  }

  /**
   * Cliente.historicoFunil
   */
  export type Cliente$historicoFunilArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    where?: HistoricoFunilWhereInput
    orderBy?: HistoricoFunilOrderByWithRelationInput | HistoricoFunilOrderByWithRelationInput[]
    cursor?: HistoricoFunilWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricoFunilScalarFieldEnum | HistoricoFunilScalarFieldEnum[]
  }

  /**
   * Cliente.interacoes
   */
  export type Cliente$interacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    where?: InteracaoClienteWhereInput
    orderBy?: InteracaoClienteOrderByWithRelationInput | InteracaoClienteOrderByWithRelationInput[]
    cursor?: InteracaoClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InteracaoClienteScalarFieldEnum | InteracaoClienteScalarFieldEnum[]
  }

  /**
   * Cliente.vendas
   */
  export type Cliente$vendasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    where?: VendaWhereInput
    orderBy?: VendaOrderByWithRelationInput | VendaOrderByWithRelationInput[]
    cursor?: VendaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VendaScalarFieldEnum | VendaScalarFieldEnum[]
  }

  /**
   * Cliente without action
   */
  export type ClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
  }


  /**
   * Model Funil_Vendas
   */

  export type AggregateFunil_Vendas = {
    _count: Funil_VendasCountAggregateOutputType | null
    _avg: Funil_VendasAvgAggregateOutputType | null
    _sum: Funil_VendasSumAggregateOutputType | null
    _min: Funil_VendasMinAggregateOutputType | null
    _max: Funil_VendasMaxAggregateOutputType | null
  }

  export type Funil_VendasAvgAggregateOutputType = {
    id: number | null
  }

  export type Funil_VendasSumAggregateOutputType = {
    id: number | null
  }

  export type Funil_VendasMinAggregateOutputType = {
    id: number | null
    estagioNome: string | null
  }

  export type Funil_VendasMaxAggregateOutputType = {
    id: number | null
    estagioNome: string | null
  }

  export type Funil_VendasCountAggregateOutputType = {
    id: number
    estagioNome: number
    _all: number
  }


  export type Funil_VendasAvgAggregateInputType = {
    id?: true
  }

  export type Funil_VendasSumAggregateInputType = {
    id?: true
  }

  export type Funil_VendasMinAggregateInputType = {
    id?: true
    estagioNome?: true
  }

  export type Funil_VendasMaxAggregateInputType = {
    id?: true
    estagioNome?: true
  }

  export type Funil_VendasCountAggregateInputType = {
    id?: true
    estagioNome?: true
    _all?: true
  }

  export type Funil_VendasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funil_Vendas to aggregate.
     */
    where?: Funil_VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funil_Vendas to fetch.
     */
    orderBy?: Funil_VendasOrderByWithRelationInput | Funil_VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Funil_VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funil_Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funil_Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funil_Vendas
    **/
    _count?: true | Funil_VendasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Funil_VendasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Funil_VendasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Funil_VendasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Funil_VendasMaxAggregateInputType
  }

  export type GetFunil_VendasAggregateType<T extends Funil_VendasAggregateArgs> = {
        [P in keyof T & keyof AggregateFunil_Vendas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFunil_Vendas[P]>
      : GetScalarType<T[P], AggregateFunil_Vendas[P]>
  }




  export type Funil_VendasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Funil_VendasWhereInput
    orderBy?: Funil_VendasOrderByWithAggregationInput | Funil_VendasOrderByWithAggregationInput[]
    by: Funil_VendasScalarFieldEnum[] | Funil_VendasScalarFieldEnum
    having?: Funil_VendasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Funil_VendasCountAggregateInputType | true
    _avg?: Funil_VendasAvgAggregateInputType
    _sum?: Funil_VendasSumAggregateInputType
    _min?: Funil_VendasMinAggregateInputType
    _max?: Funil_VendasMaxAggregateInputType
  }

  export type Funil_VendasGroupByOutputType = {
    id: number
    estagioNome: string
    _count: Funil_VendasCountAggregateOutputType | null
    _avg: Funil_VendasAvgAggregateOutputType | null
    _sum: Funil_VendasSumAggregateOutputType | null
    _min: Funil_VendasMinAggregateOutputType | null
    _max: Funil_VendasMaxAggregateOutputType | null
  }

  type GetFunil_VendasGroupByPayload<T extends Funil_VendasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Funil_VendasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Funil_VendasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Funil_VendasGroupByOutputType[P]>
            : GetScalarType<T[P], Funil_VendasGroupByOutputType[P]>
        }
      >
    >


  export type Funil_VendasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    estagioNome?: boolean
    clientes?: boolean | Funil_Vendas$clientesArgs<ExtArgs>
    historico?: boolean | Funil_Vendas$historicoArgs<ExtArgs>
    _count?: boolean | Funil_VendasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["funil_Vendas"]>



  export type Funil_VendasSelectScalar = {
    id?: boolean
    estagioNome?: boolean
  }

  export type Funil_VendasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "estagioNome", ExtArgs["result"]["funil_Vendas"]>
  export type Funil_VendasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientes?: boolean | Funil_Vendas$clientesArgs<ExtArgs>
    historico?: boolean | Funil_Vendas$historicoArgs<ExtArgs>
    _count?: boolean | Funil_VendasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Funil_VendasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Funil_Vendas"
    objects: {
      clientes: Prisma.$ClientePayload<ExtArgs>[]
      historico: Prisma.$HistoricoFunilPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      estagioNome: string
    }, ExtArgs["result"]["funil_Vendas"]>
    composites: {}
  }

  type Funil_VendasGetPayload<S extends boolean | null | undefined | Funil_VendasDefaultArgs> = $Result.GetResult<Prisma.$Funil_VendasPayload, S>

  type Funil_VendasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Funil_VendasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Funil_VendasCountAggregateInputType | true
    }

  export interface Funil_VendasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Funil_Vendas'], meta: { name: 'Funil_Vendas' } }
    /**
     * Find zero or one Funil_Vendas that matches the filter.
     * @param {Funil_VendasFindUniqueArgs} args - Arguments to find a Funil_Vendas
     * @example
     * // Get one Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Funil_VendasFindUniqueArgs>(args: SelectSubset<T, Funil_VendasFindUniqueArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Funil_Vendas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Funil_VendasFindUniqueOrThrowArgs} args - Arguments to find a Funil_Vendas
     * @example
     * // Get one Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Funil_VendasFindUniqueOrThrowArgs>(args: SelectSubset<T, Funil_VendasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funil_Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasFindFirstArgs} args - Arguments to find a Funil_Vendas
     * @example
     * // Get one Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Funil_VendasFindFirstArgs>(args?: SelectSubset<T, Funil_VendasFindFirstArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funil_Vendas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasFindFirstOrThrowArgs} args - Arguments to find a Funil_Vendas
     * @example
     * // Get one Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Funil_VendasFindFirstOrThrowArgs>(args?: SelectSubset<T, Funil_VendasFindFirstOrThrowArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Funil_Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.findMany()
     * 
     * // Get first 10 Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const funil_VendasWithIdOnly = await prisma.funil_Vendas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Funil_VendasFindManyArgs>(args?: SelectSubset<T, Funil_VendasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Funil_Vendas.
     * @param {Funil_VendasCreateArgs} args - Arguments to create a Funil_Vendas.
     * @example
     * // Create one Funil_Vendas
     * const Funil_Vendas = await prisma.funil_Vendas.create({
     *   data: {
     *     // ... data to create a Funil_Vendas
     *   }
     * })
     * 
     */
    create<T extends Funil_VendasCreateArgs>(args: SelectSubset<T, Funil_VendasCreateArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Funil_Vendas.
     * @param {Funil_VendasCreateManyArgs} args - Arguments to create many Funil_Vendas.
     * @example
     * // Create many Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Funil_VendasCreateManyArgs>(args?: SelectSubset<T, Funil_VendasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Funil_Vendas.
     * @param {Funil_VendasDeleteArgs} args - Arguments to delete one Funil_Vendas.
     * @example
     * // Delete one Funil_Vendas
     * const Funil_Vendas = await prisma.funil_Vendas.delete({
     *   where: {
     *     // ... filter to delete one Funil_Vendas
     *   }
     * })
     * 
     */
    delete<T extends Funil_VendasDeleteArgs>(args: SelectSubset<T, Funil_VendasDeleteArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Funil_Vendas.
     * @param {Funil_VendasUpdateArgs} args - Arguments to update one Funil_Vendas.
     * @example
     * // Update one Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Funil_VendasUpdateArgs>(args: SelectSubset<T, Funil_VendasUpdateArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Funil_Vendas.
     * @param {Funil_VendasDeleteManyArgs} args - Arguments to filter Funil_Vendas to delete.
     * @example
     * // Delete a few Funil_Vendas
     * const { count } = await prisma.funil_Vendas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Funil_VendasDeleteManyArgs>(args?: SelectSubset<T, Funil_VendasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funil_Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Funil_VendasUpdateManyArgs>(args: SelectSubset<T, Funil_VendasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Funil_Vendas.
     * @param {Funil_VendasUpsertArgs} args - Arguments to update or create a Funil_Vendas.
     * @example
     * // Update or create a Funil_Vendas
     * const funil_Vendas = await prisma.funil_Vendas.upsert({
     *   create: {
     *     // ... data to create a Funil_Vendas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funil_Vendas we want to update
     *   }
     * })
     */
    upsert<T extends Funil_VendasUpsertArgs>(args: SelectSubset<T, Funil_VendasUpsertArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Funil_Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasCountArgs} args - Arguments to filter Funil_Vendas to count.
     * @example
     * // Count the number of Funil_Vendas
     * const count = await prisma.funil_Vendas.count({
     *   where: {
     *     // ... the filter for the Funil_Vendas we want to count
     *   }
     * })
    **/
    count<T extends Funil_VendasCountArgs>(
      args?: Subset<T, Funil_VendasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Funil_VendasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funil_Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Funil_VendasAggregateArgs>(args: Subset<T, Funil_VendasAggregateArgs>): Prisma.PrismaPromise<GetFunil_VendasAggregateType<T>>

    /**
     * Group by Funil_Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funil_VendasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Funil_VendasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Funil_VendasGroupByArgs['orderBy'] }
        : { orderBy?: Funil_VendasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Funil_VendasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFunil_VendasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Funil_Vendas model
   */
  readonly fields: Funil_VendasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Funil_Vendas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Funil_VendasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientes<T extends Funil_Vendas$clientesArgs<ExtArgs> = {}>(args?: Subset<T, Funil_Vendas$clientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    historico<T extends Funil_Vendas$historicoArgs<ExtArgs> = {}>(args?: Subset<T, Funil_Vendas$historicoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Funil_Vendas model
   */
  interface Funil_VendasFieldRefs {
    readonly id: FieldRef<"Funil_Vendas", 'Int'>
    readonly estagioNome: FieldRef<"Funil_Vendas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Funil_Vendas findUnique
   */
  export type Funil_VendasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * Filter, which Funil_Vendas to fetch.
     */
    where: Funil_VendasWhereUniqueInput
  }

  /**
   * Funil_Vendas findUniqueOrThrow
   */
  export type Funil_VendasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * Filter, which Funil_Vendas to fetch.
     */
    where: Funil_VendasWhereUniqueInput
  }

  /**
   * Funil_Vendas findFirst
   */
  export type Funil_VendasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * Filter, which Funil_Vendas to fetch.
     */
    where?: Funil_VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funil_Vendas to fetch.
     */
    orderBy?: Funil_VendasOrderByWithRelationInput | Funil_VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funil_Vendas.
     */
    cursor?: Funil_VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funil_Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funil_Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funil_Vendas.
     */
    distinct?: Funil_VendasScalarFieldEnum | Funil_VendasScalarFieldEnum[]
  }

  /**
   * Funil_Vendas findFirstOrThrow
   */
  export type Funil_VendasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * Filter, which Funil_Vendas to fetch.
     */
    where?: Funil_VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funil_Vendas to fetch.
     */
    orderBy?: Funil_VendasOrderByWithRelationInput | Funil_VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funil_Vendas.
     */
    cursor?: Funil_VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funil_Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funil_Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funil_Vendas.
     */
    distinct?: Funil_VendasScalarFieldEnum | Funil_VendasScalarFieldEnum[]
  }

  /**
   * Funil_Vendas findMany
   */
  export type Funil_VendasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * Filter, which Funil_Vendas to fetch.
     */
    where?: Funil_VendasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funil_Vendas to fetch.
     */
    orderBy?: Funil_VendasOrderByWithRelationInput | Funil_VendasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funil_Vendas.
     */
    cursor?: Funil_VendasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funil_Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funil_Vendas.
     */
    skip?: number
    distinct?: Funil_VendasScalarFieldEnum | Funil_VendasScalarFieldEnum[]
  }

  /**
   * Funil_Vendas create
   */
  export type Funil_VendasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * The data needed to create a Funil_Vendas.
     */
    data: XOR<Funil_VendasCreateInput, Funil_VendasUncheckedCreateInput>
  }

  /**
   * Funil_Vendas createMany
   */
  export type Funil_VendasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funil_Vendas.
     */
    data: Funil_VendasCreateManyInput | Funil_VendasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Funil_Vendas update
   */
  export type Funil_VendasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * The data needed to update a Funil_Vendas.
     */
    data: XOR<Funil_VendasUpdateInput, Funil_VendasUncheckedUpdateInput>
    /**
     * Choose, which Funil_Vendas to update.
     */
    where: Funil_VendasWhereUniqueInput
  }

  /**
   * Funil_Vendas updateMany
   */
  export type Funil_VendasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funil_Vendas.
     */
    data: XOR<Funil_VendasUpdateManyMutationInput, Funil_VendasUncheckedUpdateManyInput>
    /**
     * Filter which Funil_Vendas to update
     */
    where?: Funil_VendasWhereInput
    /**
     * Limit how many Funil_Vendas to update.
     */
    limit?: number
  }

  /**
   * Funil_Vendas upsert
   */
  export type Funil_VendasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * The filter to search for the Funil_Vendas to update in case it exists.
     */
    where: Funil_VendasWhereUniqueInput
    /**
     * In case the Funil_Vendas found by the `where` argument doesn't exist, create a new Funil_Vendas with this data.
     */
    create: XOR<Funil_VendasCreateInput, Funil_VendasUncheckedCreateInput>
    /**
     * In case the Funil_Vendas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Funil_VendasUpdateInput, Funil_VendasUncheckedUpdateInput>
  }

  /**
   * Funil_Vendas delete
   */
  export type Funil_VendasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
    /**
     * Filter which Funil_Vendas to delete.
     */
    where: Funil_VendasWhereUniqueInput
  }

  /**
   * Funil_Vendas deleteMany
   */
  export type Funil_VendasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funil_Vendas to delete
     */
    where?: Funil_VendasWhereInput
    /**
     * Limit how many Funil_Vendas to delete.
     */
    limit?: number
  }

  /**
   * Funil_Vendas.clientes
   */
  export type Funil_Vendas$clientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cliente
     */
    select?: ClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cliente
     */
    omit?: ClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClienteInclude<ExtArgs> | null
    where?: ClienteWhereInput
    orderBy?: ClienteOrderByWithRelationInput | ClienteOrderByWithRelationInput[]
    cursor?: ClienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClienteScalarFieldEnum | ClienteScalarFieldEnum[]
  }

  /**
   * Funil_Vendas.historico
   */
  export type Funil_Vendas$historicoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    where?: HistoricoFunilWhereInput
    orderBy?: HistoricoFunilOrderByWithRelationInput | HistoricoFunilOrderByWithRelationInput[]
    cursor?: HistoricoFunilWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricoFunilScalarFieldEnum | HistoricoFunilScalarFieldEnum[]
  }

  /**
   * Funil_Vendas without action
   */
  export type Funil_VendasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Funil_Vendas
     */
    select?: Funil_VendasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Funil_Vendas
     */
    omit?: Funil_VendasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Funil_VendasInclude<ExtArgs> | null
  }


  /**
   * Model Evento
   */

  export type AggregateEvento = {
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  export type EventoAvgAggregateOutputType = {
    id: number | null
    duracaoH: number | null
    organizadorId: number | null
  }

  export type EventoSumAggregateOutputType = {
    id: number | null
    duracaoH: number | null
    organizadorId: number | null
  }

  export type EventoMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    desc: string | null
    dataIni: Date | null
    duracaoH: number | null
    link: string | null
    status: string | null
    organizadorId: number | null
  }

  export type EventoMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    desc: string | null
    dataIni: Date | null
    duracaoH: number | null
    link: string | null
    status: string | null
    organizadorId: number | null
  }

  export type EventoCountAggregateOutputType = {
    id: number
    titulo: number
    desc: number
    dataIni: number
    duracaoH: number
    link: number
    status: number
    organizadorId: number
    _all: number
  }


  export type EventoAvgAggregateInputType = {
    id?: true
    duracaoH?: true
    organizadorId?: true
  }

  export type EventoSumAggregateInputType = {
    id?: true
    duracaoH?: true
    organizadorId?: true
  }

  export type EventoMinAggregateInputType = {
    id?: true
    titulo?: true
    desc?: true
    dataIni?: true
    duracaoH?: true
    link?: true
    status?: true
    organizadorId?: true
  }

  export type EventoMaxAggregateInputType = {
    id?: true
    titulo?: true
    desc?: true
    dataIni?: true
    duracaoH?: true
    link?: true
    status?: true
    organizadorId?: true
  }

  export type EventoCountAggregateInputType = {
    id?: true
    titulo?: true
    desc?: true
    dataIni?: true
    duracaoH?: true
    link?: true
    status?: true
    organizadorId?: true
    _all?: true
  }

  export type EventoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evento to aggregate.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eventos
    **/
    _count?: true | EventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventoMaxAggregateInputType
  }

  export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
        [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvento[P]>
      : GetScalarType<T[P], AggregateEvento[P]>
  }




  export type EventoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithAggregationInput | EventoOrderByWithAggregationInput[]
    by: EventoScalarFieldEnum[] | EventoScalarFieldEnum
    having?: EventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventoCountAggregateInputType | true
    _avg?: EventoAvgAggregateInputType
    _sum?: EventoSumAggregateInputType
    _min?: EventoMinAggregateInputType
    _max?: EventoMaxAggregateInputType
  }

  export type EventoGroupByOutputType = {
    id: number
    titulo: string
    desc: string
    dataIni: Date
    duracaoH: number
    link: string
    status: string
    organizadorId: number
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventoGroupByOutputType[P]>
            : GetScalarType<T[P], EventoGroupByOutputType[P]>
        }
      >
    >


  export type EventoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    desc?: boolean
    dataIni?: boolean
    duracaoH?: boolean
    link?: boolean
    status?: boolean
    organizadorId?: boolean
    organizador?: boolean | FuncionarioDefaultArgs<ExtArgs>
    funcionariosConvidados?: boolean | Evento$funcionariosConvidadosArgs<ExtArgs>
    notificacoes?: boolean | Evento$notificacoesArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evento"]>



  export type EventoSelectScalar = {
    id?: boolean
    titulo?: boolean
    desc?: boolean
    dataIni?: boolean
    duracaoH?: boolean
    link?: boolean
    status?: boolean
    organizadorId?: boolean
  }

  export type EventoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "desc" | "dataIni" | "duracaoH" | "link" | "status" | "organizadorId", ExtArgs["result"]["evento"]>
  export type EventoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizador?: boolean | FuncionarioDefaultArgs<ExtArgs>
    funcionariosConvidados?: boolean | Evento$funcionariosConvidadosArgs<ExtArgs>
    notificacoes?: boolean | Evento$notificacoesArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EventoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evento"
    objects: {
      organizador: Prisma.$FuncionarioPayload<ExtArgs>
      funcionariosConvidados: Prisma.$FuncionariosConvidadosPayload<ExtArgs>[]
      notificacoes: Prisma.$NotificacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      desc: string
      dataIni: Date
      duracaoH: number
      link: string
      status: string
      organizadorId: number
    }, ExtArgs["result"]["evento"]>
    composites: {}
  }

  type EventoGetPayload<S extends boolean | null | undefined | EventoDefaultArgs> = $Result.GetResult<Prisma.$EventoPayload, S>

  type EventoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventoCountAggregateInputType | true
    }

  export interface EventoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evento'], meta: { name: 'Evento' } }
    /**
     * Find zero or one Evento that matches the filter.
     * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventoFindUniqueArgs>(args: SelectSubset<T, EventoFindUniqueArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Evento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs>(args: SelectSubset<T, EventoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Evento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventoFindFirstArgs>(args?: SelectSubset<T, EventoFindFirstArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Evento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventoFindFirstOrThrowArgs>(args?: SelectSubset<T, EventoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Eventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eventos
     * const eventos = await prisma.evento.findMany()
     * 
     * // Get first 10 Eventos
     * const eventos = await prisma.evento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventoFindManyArgs>(args?: SelectSubset<T, EventoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Evento.
     * @param {EventoCreateArgs} args - Arguments to create a Evento.
     * @example
     * // Create one Evento
     * const Evento = await prisma.evento.create({
     *   data: {
     *     // ... data to create a Evento
     *   }
     * })
     * 
     */
    create<T extends EventoCreateArgs>(args: SelectSubset<T, EventoCreateArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Eventos.
     * @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
     * @example
     * // Create many Eventos
     * const evento = await prisma.evento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventoCreateManyArgs>(args?: SelectSubset<T, EventoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Evento.
     * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
     * @example
     * // Delete one Evento
     * const Evento = await prisma.evento.delete({
     *   where: {
     *     // ... filter to delete one Evento
     *   }
     * })
     * 
     */
    delete<T extends EventoDeleteArgs>(args: SelectSubset<T, EventoDeleteArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Evento.
     * @param {EventoUpdateArgs} args - Arguments to update one Evento.
     * @example
     * // Update one Evento
     * const evento = await prisma.evento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventoUpdateArgs>(args: SelectSubset<T, EventoUpdateArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Eventos.
     * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
     * @example
     * // Delete a few Eventos
     * const { count } = await prisma.evento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventoDeleteManyArgs>(args?: SelectSubset<T, EventoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eventos
     * const evento = await prisma.evento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventoUpdateManyArgs>(args: SelectSubset<T, EventoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evento.
     * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
     * @example
     * // Update or create a Evento
     * const evento = await prisma.evento.upsert({
     *   create: {
     *     // ... data to create a Evento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evento we want to update
     *   }
     * })
     */
    upsert<T extends EventoUpsertArgs>(args: SelectSubset<T, EventoUpsertArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
     * @example
     * // Count the number of Eventos
     * const count = await prisma.evento.count({
     *   where: {
     *     // ... the filter for the Eventos we want to count
     *   }
     * })
    **/
    count<T extends EventoCountArgs>(
      args?: Subset<T, EventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventoAggregateArgs>(args: Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

    /**
     * Group by Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventoGroupByArgs['orderBy'] }
        : { orderBy?: EventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evento model
   */
  readonly fields: EventoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizador<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    funcionariosConvidados<T extends Evento$funcionariosConvidadosArgs<ExtArgs> = {}>(args?: Subset<T, Evento$funcionariosConvidadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificacoes<T extends Evento$notificacoesArgs<ExtArgs> = {}>(args?: Subset<T, Evento$notificacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Evento model
   */
  interface EventoFieldRefs {
    readonly id: FieldRef<"Evento", 'Int'>
    readonly titulo: FieldRef<"Evento", 'String'>
    readonly desc: FieldRef<"Evento", 'String'>
    readonly dataIni: FieldRef<"Evento", 'DateTime'>
    readonly duracaoH: FieldRef<"Evento", 'Int'>
    readonly link: FieldRef<"Evento", 'String'>
    readonly status: FieldRef<"Evento", 'String'>
    readonly organizadorId: FieldRef<"Evento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Evento findUnique
   */
  export type EventoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findUniqueOrThrow
   */
  export type EventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findFirst
   */
  export type EventoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento findFirstOrThrow
   */
  export type EventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento findMany
   */
  export type EventoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Eventos to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento create
   */
  export type EventoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to create a Evento.
     */
    data: XOR<EventoCreateInput, EventoUncheckedCreateInput>
  }

  /**
   * Evento createMany
   */
  export type EventoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eventos.
     */
    data: EventoCreateManyInput | EventoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Evento update
   */
  export type EventoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to update a Evento.
     */
    data: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
    /**
     * Choose, which Evento to update.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento updateMany
   */
  export type EventoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eventos.
     */
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyInput>
    /**
     * Filter which Eventos to update
     */
    where?: EventoWhereInput
    /**
     * Limit how many Eventos to update.
     */
    limit?: number
  }

  /**
   * Evento upsert
   */
  export type EventoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The filter to search for the Evento to update in case it exists.
     */
    where: EventoWhereUniqueInput
    /**
     * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
     */
    create: XOR<EventoCreateInput, EventoUncheckedCreateInput>
    /**
     * In case the Evento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
  }

  /**
   * Evento delete
   */
  export type EventoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter which Evento to delete.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento deleteMany
   */
  export type EventoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eventos to delete
     */
    where?: EventoWhereInput
    /**
     * Limit how many Eventos to delete.
     */
    limit?: number
  }

  /**
   * Evento.funcionariosConvidados
   */
  export type Evento$funcionariosConvidadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    where?: FuncionariosConvidadosWhereInput
    orderBy?: FuncionariosConvidadosOrderByWithRelationInput | FuncionariosConvidadosOrderByWithRelationInput[]
    cursor?: FuncionariosConvidadosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FuncionariosConvidadosScalarFieldEnum | FuncionariosConvidadosScalarFieldEnum[]
  }

  /**
   * Evento.notificacoes
   */
  export type Evento$notificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    where?: NotificacaoWhereInput
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    cursor?: NotificacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Evento without action
   */
  export type EventoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Evento
     */
    omit?: EventoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
  }


  /**
   * Model ContatoCliente
   */

  export type AggregateContatoCliente = {
    _count: ContatoClienteCountAggregateOutputType | null
    _avg: ContatoClienteAvgAggregateOutputType | null
    _sum: ContatoClienteSumAggregateOutputType | null
    _min: ContatoClienteMinAggregateOutputType | null
    _max: ContatoClienteMaxAggregateOutputType | null
  }

  export type ContatoClienteAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ContatoClienteSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
  }

  export type ContatoClienteMinAggregateOutputType = {
    id: number | null
    tipoContato: string | null
    valorContrato: string | null
    clienteId: number | null
  }

  export type ContatoClienteMaxAggregateOutputType = {
    id: number | null
    tipoContato: string | null
    valorContrato: string | null
    clienteId: number | null
  }

  export type ContatoClienteCountAggregateOutputType = {
    id: number
    tipoContato: number
    valorContrato: number
    clienteId: number
    _all: number
  }


  export type ContatoClienteAvgAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ContatoClienteSumAggregateInputType = {
    id?: true
    clienteId?: true
  }

  export type ContatoClienteMinAggregateInputType = {
    id?: true
    tipoContato?: true
    valorContrato?: true
    clienteId?: true
  }

  export type ContatoClienteMaxAggregateInputType = {
    id?: true
    tipoContato?: true
    valorContrato?: true
    clienteId?: true
  }

  export type ContatoClienteCountAggregateInputType = {
    id?: true
    tipoContato?: true
    valorContrato?: true
    clienteId?: true
    _all?: true
  }

  export type ContatoClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContatoCliente to aggregate.
     */
    where?: ContatoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContatoClientes to fetch.
     */
    orderBy?: ContatoClienteOrderByWithRelationInput | ContatoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContatoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContatoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContatoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContatoClientes
    **/
    _count?: true | ContatoClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContatoClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContatoClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContatoClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContatoClienteMaxAggregateInputType
  }

  export type GetContatoClienteAggregateType<T extends ContatoClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateContatoCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContatoCliente[P]>
      : GetScalarType<T[P], AggregateContatoCliente[P]>
  }




  export type ContatoClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContatoClienteWhereInput
    orderBy?: ContatoClienteOrderByWithAggregationInput | ContatoClienteOrderByWithAggregationInput[]
    by: ContatoClienteScalarFieldEnum[] | ContatoClienteScalarFieldEnum
    having?: ContatoClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContatoClienteCountAggregateInputType | true
    _avg?: ContatoClienteAvgAggregateInputType
    _sum?: ContatoClienteSumAggregateInputType
    _min?: ContatoClienteMinAggregateInputType
    _max?: ContatoClienteMaxAggregateInputType
  }

  export type ContatoClienteGroupByOutputType = {
    id: number
    tipoContato: string
    valorContrato: string
    clienteId: number
    _count: ContatoClienteCountAggregateOutputType | null
    _avg: ContatoClienteAvgAggregateOutputType | null
    _sum: ContatoClienteSumAggregateOutputType | null
    _min: ContatoClienteMinAggregateOutputType | null
    _max: ContatoClienteMaxAggregateOutputType | null
  }

  type GetContatoClienteGroupByPayload<T extends ContatoClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContatoClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContatoClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContatoClienteGroupByOutputType[P]>
            : GetScalarType<T[P], ContatoClienteGroupByOutputType[P]>
        }
      >
    >


  export type ContatoClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipoContato?: boolean
    valorContrato?: boolean
    clienteId?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contatoCliente"]>



  export type ContatoClienteSelectScalar = {
    id?: boolean
    tipoContato?: boolean
    valorContrato?: boolean
    clienteId?: boolean
  }

  export type ContatoClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tipoContato" | "valorContrato" | "clienteId", ExtArgs["result"]["contatoCliente"]>
  export type ContatoClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }

  export type $ContatoClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContatoCliente"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipoContato: string
      valorContrato: string
      clienteId: number
    }, ExtArgs["result"]["contatoCliente"]>
    composites: {}
  }

  type ContatoClienteGetPayload<S extends boolean | null | undefined | ContatoClienteDefaultArgs> = $Result.GetResult<Prisma.$ContatoClientePayload, S>

  type ContatoClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContatoClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContatoClienteCountAggregateInputType | true
    }

  export interface ContatoClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContatoCliente'], meta: { name: 'ContatoCliente' } }
    /**
     * Find zero or one ContatoCliente that matches the filter.
     * @param {ContatoClienteFindUniqueArgs} args - Arguments to find a ContatoCliente
     * @example
     * // Get one ContatoCliente
     * const contatoCliente = await prisma.contatoCliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContatoClienteFindUniqueArgs>(args: SelectSubset<T, ContatoClienteFindUniqueArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContatoCliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContatoClienteFindUniqueOrThrowArgs} args - Arguments to find a ContatoCliente
     * @example
     * // Get one ContatoCliente
     * const contatoCliente = await prisma.contatoCliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContatoClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, ContatoClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContatoCliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteFindFirstArgs} args - Arguments to find a ContatoCliente
     * @example
     * // Get one ContatoCliente
     * const contatoCliente = await prisma.contatoCliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContatoClienteFindFirstArgs>(args?: SelectSubset<T, ContatoClienteFindFirstArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContatoCliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteFindFirstOrThrowArgs} args - Arguments to find a ContatoCliente
     * @example
     * // Get one ContatoCliente
     * const contatoCliente = await prisma.contatoCliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContatoClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, ContatoClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContatoClientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContatoClientes
     * const contatoClientes = await prisma.contatoCliente.findMany()
     * 
     * // Get first 10 ContatoClientes
     * const contatoClientes = await prisma.contatoCliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contatoClienteWithIdOnly = await prisma.contatoCliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContatoClienteFindManyArgs>(args?: SelectSubset<T, ContatoClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContatoCliente.
     * @param {ContatoClienteCreateArgs} args - Arguments to create a ContatoCliente.
     * @example
     * // Create one ContatoCliente
     * const ContatoCliente = await prisma.contatoCliente.create({
     *   data: {
     *     // ... data to create a ContatoCliente
     *   }
     * })
     * 
     */
    create<T extends ContatoClienteCreateArgs>(args: SelectSubset<T, ContatoClienteCreateArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContatoClientes.
     * @param {ContatoClienteCreateManyArgs} args - Arguments to create many ContatoClientes.
     * @example
     * // Create many ContatoClientes
     * const contatoCliente = await prisma.contatoCliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContatoClienteCreateManyArgs>(args?: SelectSubset<T, ContatoClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ContatoCliente.
     * @param {ContatoClienteDeleteArgs} args - Arguments to delete one ContatoCliente.
     * @example
     * // Delete one ContatoCliente
     * const ContatoCliente = await prisma.contatoCliente.delete({
     *   where: {
     *     // ... filter to delete one ContatoCliente
     *   }
     * })
     * 
     */
    delete<T extends ContatoClienteDeleteArgs>(args: SelectSubset<T, ContatoClienteDeleteArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContatoCliente.
     * @param {ContatoClienteUpdateArgs} args - Arguments to update one ContatoCliente.
     * @example
     * // Update one ContatoCliente
     * const contatoCliente = await prisma.contatoCliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContatoClienteUpdateArgs>(args: SelectSubset<T, ContatoClienteUpdateArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContatoClientes.
     * @param {ContatoClienteDeleteManyArgs} args - Arguments to filter ContatoClientes to delete.
     * @example
     * // Delete a few ContatoClientes
     * const { count } = await prisma.contatoCliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContatoClienteDeleteManyArgs>(args?: SelectSubset<T, ContatoClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContatoClientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContatoClientes
     * const contatoCliente = await prisma.contatoCliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContatoClienteUpdateManyArgs>(args: SelectSubset<T, ContatoClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContatoCliente.
     * @param {ContatoClienteUpsertArgs} args - Arguments to update or create a ContatoCliente.
     * @example
     * // Update or create a ContatoCliente
     * const contatoCliente = await prisma.contatoCliente.upsert({
     *   create: {
     *     // ... data to create a ContatoCliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContatoCliente we want to update
     *   }
     * })
     */
    upsert<T extends ContatoClienteUpsertArgs>(args: SelectSubset<T, ContatoClienteUpsertArgs<ExtArgs>>): Prisma__ContatoClienteClient<$Result.GetResult<Prisma.$ContatoClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContatoClientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteCountArgs} args - Arguments to filter ContatoClientes to count.
     * @example
     * // Count the number of ContatoClientes
     * const count = await prisma.contatoCliente.count({
     *   where: {
     *     // ... the filter for the ContatoClientes we want to count
     *   }
     * })
    **/
    count<T extends ContatoClienteCountArgs>(
      args?: Subset<T, ContatoClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContatoClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContatoCliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContatoClienteAggregateArgs>(args: Subset<T, ContatoClienteAggregateArgs>): Prisma.PrismaPromise<GetContatoClienteAggregateType<T>>

    /**
     * Group by ContatoCliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContatoClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContatoClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContatoClienteGroupByArgs['orderBy'] }
        : { orderBy?: ContatoClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContatoClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContatoClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContatoCliente model
   */
  readonly fields: ContatoClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContatoCliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContatoClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContatoCliente model
   */
  interface ContatoClienteFieldRefs {
    readonly id: FieldRef<"ContatoCliente", 'Int'>
    readonly tipoContato: FieldRef<"ContatoCliente", 'String'>
    readonly valorContrato: FieldRef<"ContatoCliente", 'String'>
    readonly clienteId: FieldRef<"ContatoCliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ContatoCliente findUnique
   */
  export type ContatoClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * Filter, which ContatoCliente to fetch.
     */
    where: ContatoClienteWhereUniqueInput
  }

  /**
   * ContatoCliente findUniqueOrThrow
   */
  export type ContatoClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * Filter, which ContatoCliente to fetch.
     */
    where: ContatoClienteWhereUniqueInput
  }

  /**
   * ContatoCliente findFirst
   */
  export type ContatoClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * Filter, which ContatoCliente to fetch.
     */
    where?: ContatoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContatoClientes to fetch.
     */
    orderBy?: ContatoClienteOrderByWithRelationInput | ContatoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContatoClientes.
     */
    cursor?: ContatoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContatoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContatoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContatoClientes.
     */
    distinct?: ContatoClienteScalarFieldEnum | ContatoClienteScalarFieldEnum[]
  }

  /**
   * ContatoCliente findFirstOrThrow
   */
  export type ContatoClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * Filter, which ContatoCliente to fetch.
     */
    where?: ContatoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContatoClientes to fetch.
     */
    orderBy?: ContatoClienteOrderByWithRelationInput | ContatoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContatoClientes.
     */
    cursor?: ContatoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContatoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContatoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContatoClientes.
     */
    distinct?: ContatoClienteScalarFieldEnum | ContatoClienteScalarFieldEnum[]
  }

  /**
   * ContatoCliente findMany
   */
  export type ContatoClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * Filter, which ContatoClientes to fetch.
     */
    where?: ContatoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContatoClientes to fetch.
     */
    orderBy?: ContatoClienteOrderByWithRelationInput | ContatoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContatoClientes.
     */
    cursor?: ContatoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContatoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContatoClientes.
     */
    skip?: number
    distinct?: ContatoClienteScalarFieldEnum | ContatoClienteScalarFieldEnum[]
  }

  /**
   * ContatoCliente create
   */
  export type ContatoClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a ContatoCliente.
     */
    data: XOR<ContatoClienteCreateInput, ContatoClienteUncheckedCreateInput>
  }

  /**
   * ContatoCliente createMany
   */
  export type ContatoClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContatoClientes.
     */
    data: ContatoClienteCreateManyInput | ContatoClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContatoCliente update
   */
  export type ContatoClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a ContatoCliente.
     */
    data: XOR<ContatoClienteUpdateInput, ContatoClienteUncheckedUpdateInput>
    /**
     * Choose, which ContatoCliente to update.
     */
    where: ContatoClienteWhereUniqueInput
  }

  /**
   * ContatoCliente updateMany
   */
  export type ContatoClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContatoClientes.
     */
    data: XOR<ContatoClienteUpdateManyMutationInput, ContatoClienteUncheckedUpdateManyInput>
    /**
     * Filter which ContatoClientes to update
     */
    where?: ContatoClienteWhereInput
    /**
     * Limit how many ContatoClientes to update.
     */
    limit?: number
  }

  /**
   * ContatoCliente upsert
   */
  export type ContatoClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the ContatoCliente to update in case it exists.
     */
    where: ContatoClienteWhereUniqueInput
    /**
     * In case the ContatoCliente found by the `where` argument doesn't exist, create a new ContatoCliente with this data.
     */
    create: XOR<ContatoClienteCreateInput, ContatoClienteUncheckedCreateInput>
    /**
     * In case the ContatoCliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContatoClienteUpdateInput, ContatoClienteUncheckedUpdateInput>
  }

  /**
   * ContatoCliente delete
   */
  export type ContatoClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
    /**
     * Filter which ContatoCliente to delete.
     */
    where: ContatoClienteWhereUniqueInput
  }

  /**
   * ContatoCliente deleteMany
   */
  export type ContatoClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContatoClientes to delete
     */
    where?: ContatoClienteWhereInput
    /**
     * Limit how many ContatoClientes to delete.
     */
    limit?: number
  }

  /**
   * ContatoCliente without action
   */
  export type ContatoClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContatoCliente
     */
    select?: ContatoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContatoCliente
     */
    omit?: ContatoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContatoClienteInclude<ExtArgs> | null
  }


  /**
   * Model AgendamentoInteracao
   */

  export type AggregateAgendamentoInteracao = {
    _count: AgendamentoInteracaoCountAggregateOutputType | null
    _avg: AgendamentoInteracaoAvgAggregateOutputType | null
    _sum: AgendamentoInteracaoSumAggregateOutputType | null
    _min: AgendamentoInteracaoMinAggregateOutputType | null
    _max: AgendamentoInteracaoMaxAggregateOutputType | null
  }

  export type AgendamentoInteracaoAvgAggregateOutputType = {
    id: number | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type AgendamentoInteracaoSumAggregateOutputType = {
    id: number | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type AgendamentoInteracaoMinAggregateOutputType = {
    id: number | null
    dataMarcada: Date | null
    tipoInteracao: string | null
    status: string | null
    notas: string | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type AgendamentoInteracaoMaxAggregateOutputType = {
    id: number | null
    dataMarcada: Date | null
    tipoInteracao: string | null
    status: string | null
    notas: string | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type AgendamentoInteracaoCountAggregateOutputType = {
    id: number
    dataMarcada: number
    tipoInteracao: number
    status: number
    notas: number
    funcionarioId: number
    clienteId: number
    _all: number
  }


  export type AgendamentoInteracaoAvgAggregateInputType = {
    id?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type AgendamentoInteracaoSumAggregateInputType = {
    id?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type AgendamentoInteracaoMinAggregateInputType = {
    id?: true
    dataMarcada?: true
    tipoInteracao?: true
    status?: true
    notas?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type AgendamentoInteracaoMaxAggregateInputType = {
    id?: true
    dataMarcada?: true
    tipoInteracao?: true
    status?: true
    notas?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type AgendamentoInteracaoCountAggregateInputType = {
    id?: true
    dataMarcada?: true
    tipoInteracao?: true
    status?: true
    notas?: true
    funcionarioId?: true
    clienteId?: true
    _all?: true
  }

  export type AgendamentoInteracaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgendamentoInteracao to aggregate.
     */
    where?: AgendamentoInteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendamentoInteracaos to fetch.
     */
    orderBy?: AgendamentoInteracaoOrderByWithRelationInput | AgendamentoInteracaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendamentoInteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendamentoInteracaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendamentoInteracaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgendamentoInteracaos
    **/
    _count?: true | AgendamentoInteracaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgendamentoInteracaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgendamentoInteracaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendamentoInteracaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendamentoInteracaoMaxAggregateInputType
  }

  export type GetAgendamentoInteracaoAggregateType<T extends AgendamentoInteracaoAggregateArgs> = {
        [P in keyof T & keyof AggregateAgendamentoInteracao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgendamentoInteracao[P]>
      : GetScalarType<T[P], AggregateAgendamentoInteracao[P]>
  }




  export type AgendamentoInteracaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendamentoInteracaoWhereInput
    orderBy?: AgendamentoInteracaoOrderByWithAggregationInput | AgendamentoInteracaoOrderByWithAggregationInput[]
    by: AgendamentoInteracaoScalarFieldEnum[] | AgendamentoInteracaoScalarFieldEnum
    having?: AgendamentoInteracaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendamentoInteracaoCountAggregateInputType | true
    _avg?: AgendamentoInteracaoAvgAggregateInputType
    _sum?: AgendamentoInteracaoSumAggregateInputType
    _min?: AgendamentoInteracaoMinAggregateInputType
    _max?: AgendamentoInteracaoMaxAggregateInputType
  }

  export type AgendamentoInteracaoGroupByOutputType = {
    id: number
    dataMarcada: Date
    tipoInteracao: string
    status: string
    notas: string | null
    funcionarioId: number
    clienteId: number
    _count: AgendamentoInteracaoCountAggregateOutputType | null
    _avg: AgendamentoInteracaoAvgAggregateOutputType | null
    _sum: AgendamentoInteracaoSumAggregateOutputType | null
    _min: AgendamentoInteracaoMinAggregateOutputType | null
    _max: AgendamentoInteracaoMaxAggregateOutputType | null
  }

  type GetAgendamentoInteracaoGroupByPayload<T extends AgendamentoInteracaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendamentoInteracaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendamentoInteracaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendamentoInteracaoGroupByOutputType[P]>
            : GetScalarType<T[P], AgendamentoInteracaoGroupByOutputType[P]>
        }
      >
    >


  export type AgendamentoInteracaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataMarcada?: boolean
    tipoInteracao?: boolean
    status?: boolean
    notas?: boolean
    funcionarioId?: boolean
    clienteId?: boolean
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agendamentoInteracao"]>



  export type AgendamentoInteracaoSelectScalar = {
    id?: boolean
    dataMarcada?: boolean
    tipoInteracao?: boolean
    status?: boolean
    notas?: boolean
    funcionarioId?: boolean
    clienteId?: boolean
  }

  export type AgendamentoInteracaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dataMarcada" | "tipoInteracao" | "status" | "notas" | "funcionarioId" | "clienteId", ExtArgs["result"]["agendamentoInteracao"]>
  export type AgendamentoInteracaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }

  export type $AgendamentoInteracaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgendamentoInteracao"
    objects: {
      funcionario: Prisma.$FuncionarioPayload<ExtArgs>
      cliente: Prisma.$ClientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dataMarcada: Date
      tipoInteracao: string
      status: string
      notas: string | null
      funcionarioId: number
      clienteId: number
    }, ExtArgs["result"]["agendamentoInteracao"]>
    composites: {}
  }

  type AgendamentoInteracaoGetPayload<S extends boolean | null | undefined | AgendamentoInteracaoDefaultArgs> = $Result.GetResult<Prisma.$AgendamentoInteracaoPayload, S>

  type AgendamentoInteracaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgendamentoInteracaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgendamentoInteracaoCountAggregateInputType | true
    }

  export interface AgendamentoInteracaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgendamentoInteracao'], meta: { name: 'AgendamentoInteracao' } }
    /**
     * Find zero or one AgendamentoInteracao that matches the filter.
     * @param {AgendamentoInteracaoFindUniqueArgs} args - Arguments to find a AgendamentoInteracao
     * @example
     * // Get one AgendamentoInteracao
     * const agendamentoInteracao = await prisma.agendamentoInteracao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgendamentoInteracaoFindUniqueArgs>(args: SelectSubset<T, AgendamentoInteracaoFindUniqueArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgendamentoInteracao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgendamentoInteracaoFindUniqueOrThrowArgs} args - Arguments to find a AgendamentoInteracao
     * @example
     * // Get one AgendamentoInteracao
     * const agendamentoInteracao = await prisma.agendamentoInteracao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgendamentoInteracaoFindUniqueOrThrowArgs>(args: SelectSubset<T, AgendamentoInteracaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgendamentoInteracao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoFindFirstArgs} args - Arguments to find a AgendamentoInteracao
     * @example
     * // Get one AgendamentoInteracao
     * const agendamentoInteracao = await prisma.agendamentoInteracao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgendamentoInteracaoFindFirstArgs>(args?: SelectSubset<T, AgendamentoInteracaoFindFirstArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgendamentoInteracao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoFindFirstOrThrowArgs} args - Arguments to find a AgendamentoInteracao
     * @example
     * // Get one AgendamentoInteracao
     * const agendamentoInteracao = await prisma.agendamentoInteracao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgendamentoInteracaoFindFirstOrThrowArgs>(args?: SelectSubset<T, AgendamentoInteracaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgendamentoInteracaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgendamentoInteracaos
     * const agendamentoInteracaos = await prisma.agendamentoInteracao.findMany()
     * 
     * // Get first 10 AgendamentoInteracaos
     * const agendamentoInteracaos = await prisma.agendamentoInteracao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendamentoInteracaoWithIdOnly = await prisma.agendamentoInteracao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgendamentoInteracaoFindManyArgs>(args?: SelectSubset<T, AgendamentoInteracaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgendamentoInteracao.
     * @param {AgendamentoInteracaoCreateArgs} args - Arguments to create a AgendamentoInteracao.
     * @example
     * // Create one AgendamentoInteracao
     * const AgendamentoInteracao = await prisma.agendamentoInteracao.create({
     *   data: {
     *     // ... data to create a AgendamentoInteracao
     *   }
     * })
     * 
     */
    create<T extends AgendamentoInteracaoCreateArgs>(args: SelectSubset<T, AgendamentoInteracaoCreateArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgendamentoInteracaos.
     * @param {AgendamentoInteracaoCreateManyArgs} args - Arguments to create many AgendamentoInteracaos.
     * @example
     * // Create many AgendamentoInteracaos
     * const agendamentoInteracao = await prisma.agendamentoInteracao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgendamentoInteracaoCreateManyArgs>(args?: SelectSubset<T, AgendamentoInteracaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AgendamentoInteracao.
     * @param {AgendamentoInteracaoDeleteArgs} args - Arguments to delete one AgendamentoInteracao.
     * @example
     * // Delete one AgendamentoInteracao
     * const AgendamentoInteracao = await prisma.agendamentoInteracao.delete({
     *   where: {
     *     // ... filter to delete one AgendamentoInteracao
     *   }
     * })
     * 
     */
    delete<T extends AgendamentoInteracaoDeleteArgs>(args: SelectSubset<T, AgendamentoInteracaoDeleteArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgendamentoInteracao.
     * @param {AgendamentoInteracaoUpdateArgs} args - Arguments to update one AgendamentoInteracao.
     * @example
     * // Update one AgendamentoInteracao
     * const agendamentoInteracao = await prisma.agendamentoInteracao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgendamentoInteracaoUpdateArgs>(args: SelectSubset<T, AgendamentoInteracaoUpdateArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgendamentoInteracaos.
     * @param {AgendamentoInteracaoDeleteManyArgs} args - Arguments to filter AgendamentoInteracaos to delete.
     * @example
     * // Delete a few AgendamentoInteracaos
     * const { count } = await prisma.agendamentoInteracao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgendamentoInteracaoDeleteManyArgs>(args?: SelectSubset<T, AgendamentoInteracaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgendamentoInteracaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgendamentoInteracaos
     * const agendamentoInteracao = await prisma.agendamentoInteracao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgendamentoInteracaoUpdateManyArgs>(args: SelectSubset<T, AgendamentoInteracaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgendamentoInteracao.
     * @param {AgendamentoInteracaoUpsertArgs} args - Arguments to update or create a AgendamentoInteracao.
     * @example
     * // Update or create a AgendamentoInteracao
     * const agendamentoInteracao = await prisma.agendamentoInteracao.upsert({
     *   create: {
     *     // ... data to create a AgendamentoInteracao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgendamentoInteracao we want to update
     *   }
     * })
     */
    upsert<T extends AgendamentoInteracaoUpsertArgs>(args: SelectSubset<T, AgendamentoInteracaoUpsertArgs<ExtArgs>>): Prisma__AgendamentoInteracaoClient<$Result.GetResult<Prisma.$AgendamentoInteracaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgendamentoInteracaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoCountArgs} args - Arguments to filter AgendamentoInteracaos to count.
     * @example
     * // Count the number of AgendamentoInteracaos
     * const count = await prisma.agendamentoInteracao.count({
     *   where: {
     *     // ... the filter for the AgendamentoInteracaos we want to count
     *   }
     * })
    **/
    count<T extends AgendamentoInteracaoCountArgs>(
      args?: Subset<T, AgendamentoInteracaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendamentoInteracaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgendamentoInteracao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendamentoInteracaoAggregateArgs>(args: Subset<T, AgendamentoInteracaoAggregateArgs>): Prisma.PrismaPromise<GetAgendamentoInteracaoAggregateType<T>>

    /**
     * Group by AgendamentoInteracao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendamentoInteracaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendamentoInteracaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendamentoInteracaoGroupByArgs['orderBy'] }
        : { orderBy?: AgendamentoInteracaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendamentoInteracaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendamentoInteracaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgendamentoInteracao model
   */
  readonly fields: AgendamentoInteracaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgendamentoInteracao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendamentoInteracaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    funcionario<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgendamentoInteracao model
   */
  interface AgendamentoInteracaoFieldRefs {
    readonly id: FieldRef<"AgendamentoInteracao", 'Int'>
    readonly dataMarcada: FieldRef<"AgendamentoInteracao", 'DateTime'>
    readonly tipoInteracao: FieldRef<"AgendamentoInteracao", 'String'>
    readonly status: FieldRef<"AgendamentoInteracao", 'String'>
    readonly notas: FieldRef<"AgendamentoInteracao", 'String'>
    readonly funcionarioId: FieldRef<"AgendamentoInteracao", 'Int'>
    readonly clienteId: FieldRef<"AgendamentoInteracao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AgendamentoInteracao findUnique
   */
  export type AgendamentoInteracaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * Filter, which AgendamentoInteracao to fetch.
     */
    where: AgendamentoInteracaoWhereUniqueInput
  }

  /**
   * AgendamentoInteracao findUniqueOrThrow
   */
  export type AgendamentoInteracaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * Filter, which AgendamentoInteracao to fetch.
     */
    where: AgendamentoInteracaoWhereUniqueInput
  }

  /**
   * AgendamentoInteracao findFirst
   */
  export type AgendamentoInteracaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * Filter, which AgendamentoInteracao to fetch.
     */
    where?: AgendamentoInteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendamentoInteracaos to fetch.
     */
    orderBy?: AgendamentoInteracaoOrderByWithRelationInput | AgendamentoInteracaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgendamentoInteracaos.
     */
    cursor?: AgendamentoInteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendamentoInteracaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendamentoInteracaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgendamentoInteracaos.
     */
    distinct?: AgendamentoInteracaoScalarFieldEnum | AgendamentoInteracaoScalarFieldEnum[]
  }

  /**
   * AgendamentoInteracao findFirstOrThrow
   */
  export type AgendamentoInteracaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * Filter, which AgendamentoInteracao to fetch.
     */
    where?: AgendamentoInteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendamentoInteracaos to fetch.
     */
    orderBy?: AgendamentoInteracaoOrderByWithRelationInput | AgendamentoInteracaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgendamentoInteracaos.
     */
    cursor?: AgendamentoInteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendamentoInteracaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendamentoInteracaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgendamentoInteracaos.
     */
    distinct?: AgendamentoInteracaoScalarFieldEnum | AgendamentoInteracaoScalarFieldEnum[]
  }

  /**
   * AgendamentoInteracao findMany
   */
  export type AgendamentoInteracaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * Filter, which AgendamentoInteracaos to fetch.
     */
    where?: AgendamentoInteracaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendamentoInteracaos to fetch.
     */
    orderBy?: AgendamentoInteracaoOrderByWithRelationInput | AgendamentoInteracaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgendamentoInteracaos.
     */
    cursor?: AgendamentoInteracaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendamentoInteracaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendamentoInteracaos.
     */
    skip?: number
    distinct?: AgendamentoInteracaoScalarFieldEnum | AgendamentoInteracaoScalarFieldEnum[]
  }

  /**
   * AgendamentoInteracao create
   */
  export type AgendamentoInteracaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * The data needed to create a AgendamentoInteracao.
     */
    data: XOR<AgendamentoInteracaoCreateInput, AgendamentoInteracaoUncheckedCreateInput>
  }

  /**
   * AgendamentoInteracao createMany
   */
  export type AgendamentoInteracaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgendamentoInteracaos.
     */
    data: AgendamentoInteracaoCreateManyInput | AgendamentoInteracaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgendamentoInteracao update
   */
  export type AgendamentoInteracaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * The data needed to update a AgendamentoInteracao.
     */
    data: XOR<AgendamentoInteracaoUpdateInput, AgendamentoInteracaoUncheckedUpdateInput>
    /**
     * Choose, which AgendamentoInteracao to update.
     */
    where: AgendamentoInteracaoWhereUniqueInput
  }

  /**
   * AgendamentoInteracao updateMany
   */
  export type AgendamentoInteracaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgendamentoInteracaos.
     */
    data: XOR<AgendamentoInteracaoUpdateManyMutationInput, AgendamentoInteracaoUncheckedUpdateManyInput>
    /**
     * Filter which AgendamentoInteracaos to update
     */
    where?: AgendamentoInteracaoWhereInput
    /**
     * Limit how many AgendamentoInteracaos to update.
     */
    limit?: number
  }

  /**
   * AgendamentoInteracao upsert
   */
  export type AgendamentoInteracaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * The filter to search for the AgendamentoInteracao to update in case it exists.
     */
    where: AgendamentoInteracaoWhereUniqueInput
    /**
     * In case the AgendamentoInteracao found by the `where` argument doesn't exist, create a new AgendamentoInteracao with this data.
     */
    create: XOR<AgendamentoInteracaoCreateInput, AgendamentoInteracaoUncheckedCreateInput>
    /**
     * In case the AgendamentoInteracao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendamentoInteracaoUpdateInput, AgendamentoInteracaoUncheckedUpdateInput>
  }

  /**
   * AgendamentoInteracao delete
   */
  export type AgendamentoInteracaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
    /**
     * Filter which AgendamentoInteracao to delete.
     */
    where: AgendamentoInteracaoWhereUniqueInput
  }

  /**
   * AgendamentoInteracao deleteMany
   */
  export type AgendamentoInteracaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgendamentoInteracaos to delete
     */
    where?: AgendamentoInteracaoWhereInput
    /**
     * Limit how many AgendamentoInteracaos to delete.
     */
    limit?: number
  }

  /**
   * AgendamentoInteracao without action
   */
  export type AgendamentoInteracaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendamentoInteracao
     */
    select?: AgendamentoInteracaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendamentoInteracao
     */
    omit?: AgendamentoInteracaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendamentoInteracaoInclude<ExtArgs> | null
  }


  /**
   * Model HistoricoFunil
   */

  export type AggregateHistoricoFunil = {
    _count: HistoricoFunilCountAggregateOutputType | null
    _avg: HistoricoFunilAvgAggregateOutputType | null
    _sum: HistoricoFunilSumAggregateOutputType | null
    _min: HistoricoFunilMinAggregateOutputType | null
    _max: HistoricoFunilMaxAggregateOutputType | null
  }

  export type HistoricoFunilAvgAggregateOutputType = {
    id: number | null
    clienteId: number | null
    funilId: number | null
  }

  export type HistoricoFunilSumAggregateOutputType = {
    id: number | null
    clienteId: number | null
    funilId: number | null
  }

  export type HistoricoFunilMinAggregateOutputType = {
    id: number | null
    dataMovimentacao: Date | null
    clienteId: number | null
    funilId: number | null
  }

  export type HistoricoFunilMaxAggregateOutputType = {
    id: number | null
    dataMovimentacao: Date | null
    clienteId: number | null
    funilId: number | null
  }

  export type HistoricoFunilCountAggregateOutputType = {
    id: number
    dataMovimentacao: number
    clienteId: number
    funilId: number
    _all: number
  }


  export type HistoricoFunilAvgAggregateInputType = {
    id?: true
    clienteId?: true
    funilId?: true
  }

  export type HistoricoFunilSumAggregateInputType = {
    id?: true
    clienteId?: true
    funilId?: true
  }

  export type HistoricoFunilMinAggregateInputType = {
    id?: true
    dataMovimentacao?: true
    clienteId?: true
    funilId?: true
  }

  export type HistoricoFunilMaxAggregateInputType = {
    id?: true
    dataMovimentacao?: true
    clienteId?: true
    funilId?: true
  }

  export type HistoricoFunilCountAggregateInputType = {
    id?: true
    dataMovimentacao?: true
    clienteId?: true
    funilId?: true
    _all?: true
  }

  export type HistoricoFunilAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricoFunil to aggregate.
     */
    where?: HistoricoFunilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoFunils to fetch.
     */
    orderBy?: HistoricoFunilOrderByWithRelationInput | HistoricoFunilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoricoFunilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoFunils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoFunils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistoricoFunils
    **/
    _count?: true | HistoricoFunilCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoricoFunilAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoricoFunilSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoricoFunilMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoricoFunilMaxAggregateInputType
  }

  export type GetHistoricoFunilAggregateType<T extends HistoricoFunilAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoricoFunil]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoricoFunil[P]>
      : GetScalarType<T[P], AggregateHistoricoFunil[P]>
  }




  export type HistoricoFunilGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoFunilWhereInput
    orderBy?: HistoricoFunilOrderByWithAggregationInput | HistoricoFunilOrderByWithAggregationInput[]
    by: HistoricoFunilScalarFieldEnum[] | HistoricoFunilScalarFieldEnum
    having?: HistoricoFunilScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoricoFunilCountAggregateInputType | true
    _avg?: HistoricoFunilAvgAggregateInputType
    _sum?: HistoricoFunilSumAggregateInputType
    _min?: HistoricoFunilMinAggregateInputType
    _max?: HistoricoFunilMaxAggregateInputType
  }

  export type HistoricoFunilGroupByOutputType = {
    id: number
    dataMovimentacao: Date
    clienteId: number
    funilId: number
    _count: HistoricoFunilCountAggregateOutputType | null
    _avg: HistoricoFunilAvgAggregateOutputType | null
    _sum: HistoricoFunilSumAggregateOutputType | null
    _min: HistoricoFunilMinAggregateOutputType | null
    _max: HistoricoFunilMaxAggregateOutputType | null
  }

  type GetHistoricoFunilGroupByPayload<T extends HistoricoFunilGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoricoFunilGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoricoFunilGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoricoFunilGroupByOutputType[P]>
            : GetScalarType<T[P], HistoricoFunilGroupByOutputType[P]>
        }
      >
    >


  export type HistoricoFunilSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataMovimentacao?: boolean
    clienteId?: boolean
    funilId?: boolean
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    funilVendas?: boolean | Funil_VendasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicoFunil"]>



  export type HistoricoFunilSelectScalar = {
    id?: boolean
    dataMovimentacao?: boolean
    clienteId?: boolean
    funilId?: boolean
  }

  export type HistoricoFunilOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dataMovimentacao" | "clienteId" | "funilId", ExtArgs["result"]["historicoFunil"]>
  export type HistoricoFunilInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
    funilVendas?: boolean | Funil_VendasDefaultArgs<ExtArgs>
  }

  export type $HistoricoFunilPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistoricoFunil"
    objects: {
      cliente: Prisma.$ClientePayload<ExtArgs>
      funilVendas: Prisma.$Funil_VendasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dataMovimentacao: Date
      clienteId: number
      funilId: number
    }, ExtArgs["result"]["historicoFunil"]>
    composites: {}
  }

  type HistoricoFunilGetPayload<S extends boolean | null | undefined | HistoricoFunilDefaultArgs> = $Result.GetResult<Prisma.$HistoricoFunilPayload, S>

  type HistoricoFunilCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistoricoFunilFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistoricoFunilCountAggregateInputType | true
    }

  export interface HistoricoFunilDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistoricoFunil'], meta: { name: 'HistoricoFunil' } }
    /**
     * Find zero or one HistoricoFunil that matches the filter.
     * @param {HistoricoFunilFindUniqueArgs} args - Arguments to find a HistoricoFunil
     * @example
     * // Get one HistoricoFunil
     * const historicoFunil = await prisma.historicoFunil.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistoricoFunilFindUniqueArgs>(args: SelectSubset<T, HistoricoFunilFindUniqueArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HistoricoFunil that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistoricoFunilFindUniqueOrThrowArgs} args - Arguments to find a HistoricoFunil
     * @example
     * // Get one HistoricoFunil
     * const historicoFunil = await prisma.historicoFunil.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistoricoFunilFindUniqueOrThrowArgs>(args: SelectSubset<T, HistoricoFunilFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoricoFunil that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilFindFirstArgs} args - Arguments to find a HistoricoFunil
     * @example
     * // Get one HistoricoFunil
     * const historicoFunil = await prisma.historicoFunil.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistoricoFunilFindFirstArgs>(args?: SelectSubset<T, HistoricoFunilFindFirstArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoricoFunil that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilFindFirstOrThrowArgs} args - Arguments to find a HistoricoFunil
     * @example
     * // Get one HistoricoFunil
     * const historicoFunil = await prisma.historicoFunil.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistoricoFunilFindFirstOrThrowArgs>(args?: SelectSubset<T, HistoricoFunilFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HistoricoFunils that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistoricoFunils
     * const historicoFunils = await prisma.historicoFunil.findMany()
     * 
     * // Get first 10 HistoricoFunils
     * const historicoFunils = await prisma.historicoFunil.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historicoFunilWithIdOnly = await prisma.historicoFunil.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistoricoFunilFindManyArgs>(args?: SelectSubset<T, HistoricoFunilFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HistoricoFunil.
     * @param {HistoricoFunilCreateArgs} args - Arguments to create a HistoricoFunil.
     * @example
     * // Create one HistoricoFunil
     * const HistoricoFunil = await prisma.historicoFunil.create({
     *   data: {
     *     // ... data to create a HistoricoFunil
     *   }
     * })
     * 
     */
    create<T extends HistoricoFunilCreateArgs>(args: SelectSubset<T, HistoricoFunilCreateArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HistoricoFunils.
     * @param {HistoricoFunilCreateManyArgs} args - Arguments to create many HistoricoFunils.
     * @example
     * // Create many HistoricoFunils
     * const historicoFunil = await prisma.historicoFunil.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistoricoFunilCreateManyArgs>(args?: SelectSubset<T, HistoricoFunilCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HistoricoFunil.
     * @param {HistoricoFunilDeleteArgs} args - Arguments to delete one HistoricoFunil.
     * @example
     * // Delete one HistoricoFunil
     * const HistoricoFunil = await prisma.historicoFunil.delete({
     *   where: {
     *     // ... filter to delete one HistoricoFunil
     *   }
     * })
     * 
     */
    delete<T extends HistoricoFunilDeleteArgs>(args: SelectSubset<T, HistoricoFunilDeleteArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HistoricoFunil.
     * @param {HistoricoFunilUpdateArgs} args - Arguments to update one HistoricoFunil.
     * @example
     * // Update one HistoricoFunil
     * const historicoFunil = await prisma.historicoFunil.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistoricoFunilUpdateArgs>(args: SelectSubset<T, HistoricoFunilUpdateArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HistoricoFunils.
     * @param {HistoricoFunilDeleteManyArgs} args - Arguments to filter HistoricoFunils to delete.
     * @example
     * // Delete a few HistoricoFunils
     * const { count } = await prisma.historicoFunil.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistoricoFunilDeleteManyArgs>(args?: SelectSubset<T, HistoricoFunilDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoricoFunils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistoricoFunils
     * const historicoFunil = await prisma.historicoFunil.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistoricoFunilUpdateManyArgs>(args: SelectSubset<T, HistoricoFunilUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HistoricoFunil.
     * @param {HistoricoFunilUpsertArgs} args - Arguments to update or create a HistoricoFunil.
     * @example
     * // Update or create a HistoricoFunil
     * const historicoFunil = await prisma.historicoFunil.upsert({
     *   create: {
     *     // ... data to create a HistoricoFunil
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistoricoFunil we want to update
     *   }
     * })
     */
    upsert<T extends HistoricoFunilUpsertArgs>(args: SelectSubset<T, HistoricoFunilUpsertArgs<ExtArgs>>): Prisma__HistoricoFunilClient<$Result.GetResult<Prisma.$HistoricoFunilPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HistoricoFunils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilCountArgs} args - Arguments to filter HistoricoFunils to count.
     * @example
     * // Count the number of HistoricoFunils
     * const count = await prisma.historicoFunil.count({
     *   where: {
     *     // ... the filter for the HistoricoFunils we want to count
     *   }
     * })
    **/
    count<T extends HistoricoFunilCountArgs>(
      args?: Subset<T, HistoricoFunilCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoricoFunilCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistoricoFunil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoricoFunilAggregateArgs>(args: Subset<T, HistoricoFunilAggregateArgs>): Prisma.PrismaPromise<GetHistoricoFunilAggregateType<T>>

    /**
     * Group by HistoricoFunil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoFunilGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoricoFunilGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoricoFunilGroupByArgs['orderBy'] }
        : { orderBy?: HistoricoFunilGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoricoFunilGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoricoFunilGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistoricoFunil model
   */
  readonly fields: HistoricoFunilFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistoricoFunil.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoricoFunilClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    funilVendas<T extends Funil_VendasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Funil_VendasDefaultArgs<ExtArgs>>): Prisma__Funil_VendasClient<$Result.GetResult<Prisma.$Funil_VendasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistoricoFunil model
   */
  interface HistoricoFunilFieldRefs {
    readonly id: FieldRef<"HistoricoFunil", 'Int'>
    readonly dataMovimentacao: FieldRef<"HistoricoFunil", 'DateTime'>
    readonly clienteId: FieldRef<"HistoricoFunil", 'Int'>
    readonly funilId: FieldRef<"HistoricoFunil", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * HistoricoFunil findUnique
   */
  export type HistoricoFunilFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoFunil to fetch.
     */
    where: HistoricoFunilWhereUniqueInput
  }

  /**
   * HistoricoFunil findUniqueOrThrow
   */
  export type HistoricoFunilFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoFunil to fetch.
     */
    where: HistoricoFunilWhereUniqueInput
  }

  /**
   * HistoricoFunil findFirst
   */
  export type HistoricoFunilFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoFunil to fetch.
     */
    where?: HistoricoFunilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoFunils to fetch.
     */
    orderBy?: HistoricoFunilOrderByWithRelationInput | HistoricoFunilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricoFunils.
     */
    cursor?: HistoricoFunilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoFunils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoFunils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricoFunils.
     */
    distinct?: HistoricoFunilScalarFieldEnum | HistoricoFunilScalarFieldEnum[]
  }

  /**
   * HistoricoFunil findFirstOrThrow
   */
  export type HistoricoFunilFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoFunil to fetch.
     */
    where?: HistoricoFunilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoFunils to fetch.
     */
    orderBy?: HistoricoFunilOrderByWithRelationInput | HistoricoFunilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricoFunils.
     */
    cursor?: HistoricoFunilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoFunils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoFunils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricoFunils.
     */
    distinct?: HistoricoFunilScalarFieldEnum | HistoricoFunilScalarFieldEnum[]
  }

  /**
   * HistoricoFunil findMany
   */
  export type HistoricoFunilFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoFunils to fetch.
     */
    where?: HistoricoFunilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoFunils to fetch.
     */
    orderBy?: HistoricoFunilOrderByWithRelationInput | HistoricoFunilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistoricoFunils.
     */
    cursor?: HistoricoFunilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoFunils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoFunils.
     */
    skip?: number
    distinct?: HistoricoFunilScalarFieldEnum | HistoricoFunilScalarFieldEnum[]
  }

  /**
   * HistoricoFunil create
   */
  export type HistoricoFunilCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * The data needed to create a HistoricoFunil.
     */
    data: XOR<HistoricoFunilCreateInput, HistoricoFunilUncheckedCreateInput>
  }

  /**
   * HistoricoFunil createMany
   */
  export type HistoricoFunilCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistoricoFunils.
     */
    data: HistoricoFunilCreateManyInput | HistoricoFunilCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistoricoFunil update
   */
  export type HistoricoFunilUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * The data needed to update a HistoricoFunil.
     */
    data: XOR<HistoricoFunilUpdateInput, HistoricoFunilUncheckedUpdateInput>
    /**
     * Choose, which HistoricoFunil to update.
     */
    where: HistoricoFunilWhereUniqueInput
  }

  /**
   * HistoricoFunil updateMany
   */
  export type HistoricoFunilUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistoricoFunils.
     */
    data: XOR<HistoricoFunilUpdateManyMutationInput, HistoricoFunilUncheckedUpdateManyInput>
    /**
     * Filter which HistoricoFunils to update
     */
    where?: HistoricoFunilWhereInput
    /**
     * Limit how many HistoricoFunils to update.
     */
    limit?: number
  }

  /**
   * HistoricoFunil upsert
   */
  export type HistoricoFunilUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * The filter to search for the HistoricoFunil to update in case it exists.
     */
    where: HistoricoFunilWhereUniqueInput
    /**
     * In case the HistoricoFunil found by the `where` argument doesn't exist, create a new HistoricoFunil with this data.
     */
    create: XOR<HistoricoFunilCreateInput, HistoricoFunilUncheckedCreateInput>
    /**
     * In case the HistoricoFunil was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoricoFunilUpdateInput, HistoricoFunilUncheckedUpdateInput>
  }

  /**
   * HistoricoFunil delete
   */
  export type HistoricoFunilDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
    /**
     * Filter which HistoricoFunil to delete.
     */
    where: HistoricoFunilWhereUniqueInput
  }

  /**
   * HistoricoFunil deleteMany
   */
  export type HistoricoFunilDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricoFunils to delete
     */
    where?: HistoricoFunilWhereInput
    /**
     * Limit how many HistoricoFunils to delete.
     */
    limit?: number
  }

  /**
   * HistoricoFunil without action
   */
  export type HistoricoFunilDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoFunil
     */
    select?: HistoricoFunilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricoFunil
     */
    omit?: HistoricoFunilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoFunilInclude<ExtArgs> | null
  }


  /**
   * Model InteracaoCliente
   */

  export type AggregateInteracaoCliente = {
    _count: InteracaoClienteCountAggregateOutputType | null
    _avg: InteracaoClienteAvgAggregateOutputType | null
    _sum: InteracaoClienteSumAggregateOutputType | null
    _min: InteracaoClienteMinAggregateOutputType | null
    _max: InteracaoClienteMaxAggregateOutputType | null
  }

  export type InteracaoClienteAvgAggregateOutputType = {
    id: number | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type InteracaoClienteSumAggregateOutputType = {
    id: number | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type InteracaoClienteMinAggregateOutputType = {
    id: number | null
    dataInteracao: Date | null
    tipoInteracao: string | null
    relatorioInteracao: string | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type InteracaoClienteMaxAggregateOutputType = {
    id: number | null
    dataInteracao: Date | null
    tipoInteracao: string | null
    relatorioInteracao: string | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type InteracaoClienteCountAggregateOutputType = {
    id: number
    dataInteracao: number
    tipoInteracao: number
    relatorioInteracao: number
    funcionarioId: number
    clienteId: number
    _all: number
  }


  export type InteracaoClienteAvgAggregateInputType = {
    id?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type InteracaoClienteSumAggregateInputType = {
    id?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type InteracaoClienteMinAggregateInputType = {
    id?: true
    dataInteracao?: true
    tipoInteracao?: true
    relatorioInteracao?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type InteracaoClienteMaxAggregateInputType = {
    id?: true
    dataInteracao?: true
    tipoInteracao?: true
    relatorioInteracao?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type InteracaoClienteCountAggregateInputType = {
    id?: true
    dataInteracao?: true
    tipoInteracao?: true
    relatorioInteracao?: true
    funcionarioId?: true
    clienteId?: true
    _all?: true
  }

  export type InteracaoClienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InteracaoCliente to aggregate.
     */
    where?: InteracaoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoClientes to fetch.
     */
    orderBy?: InteracaoClienteOrderByWithRelationInput | InteracaoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InteracaoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InteracaoClientes
    **/
    _count?: true | InteracaoClienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InteracaoClienteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InteracaoClienteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InteracaoClienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InteracaoClienteMaxAggregateInputType
  }

  export type GetInteracaoClienteAggregateType<T extends InteracaoClienteAggregateArgs> = {
        [P in keyof T & keyof AggregateInteracaoCliente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInteracaoCliente[P]>
      : GetScalarType<T[P], AggregateInteracaoCliente[P]>
  }




  export type InteracaoClienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteracaoClienteWhereInput
    orderBy?: InteracaoClienteOrderByWithAggregationInput | InteracaoClienteOrderByWithAggregationInput[]
    by: InteracaoClienteScalarFieldEnum[] | InteracaoClienteScalarFieldEnum
    having?: InteracaoClienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InteracaoClienteCountAggregateInputType | true
    _avg?: InteracaoClienteAvgAggregateInputType
    _sum?: InteracaoClienteSumAggregateInputType
    _min?: InteracaoClienteMinAggregateInputType
    _max?: InteracaoClienteMaxAggregateInputType
  }

  export type InteracaoClienteGroupByOutputType = {
    id: number
    dataInteracao: Date
    tipoInteracao: string
    relatorioInteracao: string
    funcionarioId: number
    clienteId: number
    _count: InteracaoClienteCountAggregateOutputType | null
    _avg: InteracaoClienteAvgAggregateOutputType | null
    _sum: InteracaoClienteSumAggregateOutputType | null
    _min: InteracaoClienteMinAggregateOutputType | null
    _max: InteracaoClienteMaxAggregateOutputType | null
  }

  type GetInteracaoClienteGroupByPayload<T extends InteracaoClienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InteracaoClienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InteracaoClienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InteracaoClienteGroupByOutputType[P]>
            : GetScalarType<T[P], InteracaoClienteGroupByOutputType[P]>
        }
      >
    >


  export type InteracaoClienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataInteracao?: boolean
    tipoInteracao?: boolean
    relatorioInteracao?: boolean
    funcionarioId?: boolean
    clienteId?: boolean
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interacaoCliente"]>



  export type InteracaoClienteSelectScalar = {
    id?: boolean
    dataInteracao?: boolean
    tipoInteracao?: boolean
    relatorioInteracao?: boolean
    funcionarioId?: boolean
    clienteId?: boolean
  }

  export type InteracaoClienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dataInteracao" | "tipoInteracao" | "relatorioInteracao" | "funcionarioId" | "clienteId", ExtArgs["result"]["interacaoCliente"]>
  export type InteracaoClienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }

  export type $InteracaoClientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InteracaoCliente"
    objects: {
      funcionario: Prisma.$FuncionarioPayload<ExtArgs>
      cliente: Prisma.$ClientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dataInteracao: Date
      tipoInteracao: string
      relatorioInteracao: string
      funcionarioId: number
      clienteId: number
    }, ExtArgs["result"]["interacaoCliente"]>
    composites: {}
  }

  type InteracaoClienteGetPayload<S extends boolean | null | undefined | InteracaoClienteDefaultArgs> = $Result.GetResult<Prisma.$InteracaoClientePayload, S>

  type InteracaoClienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InteracaoClienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InteracaoClienteCountAggregateInputType | true
    }

  export interface InteracaoClienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InteracaoCliente'], meta: { name: 'InteracaoCliente' } }
    /**
     * Find zero or one InteracaoCliente that matches the filter.
     * @param {InteracaoClienteFindUniqueArgs} args - Arguments to find a InteracaoCliente
     * @example
     * // Get one InteracaoCliente
     * const interacaoCliente = await prisma.interacaoCliente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InteracaoClienteFindUniqueArgs>(args: SelectSubset<T, InteracaoClienteFindUniqueArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InteracaoCliente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InteracaoClienteFindUniqueOrThrowArgs} args - Arguments to find a InteracaoCliente
     * @example
     * // Get one InteracaoCliente
     * const interacaoCliente = await prisma.interacaoCliente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InteracaoClienteFindUniqueOrThrowArgs>(args: SelectSubset<T, InteracaoClienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InteracaoCliente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteFindFirstArgs} args - Arguments to find a InteracaoCliente
     * @example
     * // Get one InteracaoCliente
     * const interacaoCliente = await prisma.interacaoCliente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InteracaoClienteFindFirstArgs>(args?: SelectSubset<T, InteracaoClienteFindFirstArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InteracaoCliente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteFindFirstOrThrowArgs} args - Arguments to find a InteracaoCliente
     * @example
     * // Get one InteracaoCliente
     * const interacaoCliente = await prisma.interacaoCliente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InteracaoClienteFindFirstOrThrowArgs>(args?: SelectSubset<T, InteracaoClienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InteracaoClientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InteracaoClientes
     * const interacaoClientes = await prisma.interacaoCliente.findMany()
     * 
     * // Get first 10 InteracaoClientes
     * const interacaoClientes = await prisma.interacaoCliente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interacaoClienteWithIdOnly = await prisma.interacaoCliente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InteracaoClienteFindManyArgs>(args?: SelectSubset<T, InteracaoClienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InteracaoCliente.
     * @param {InteracaoClienteCreateArgs} args - Arguments to create a InteracaoCliente.
     * @example
     * // Create one InteracaoCliente
     * const InteracaoCliente = await prisma.interacaoCliente.create({
     *   data: {
     *     // ... data to create a InteracaoCliente
     *   }
     * })
     * 
     */
    create<T extends InteracaoClienteCreateArgs>(args: SelectSubset<T, InteracaoClienteCreateArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InteracaoClientes.
     * @param {InteracaoClienteCreateManyArgs} args - Arguments to create many InteracaoClientes.
     * @example
     * // Create many InteracaoClientes
     * const interacaoCliente = await prisma.interacaoCliente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InteracaoClienteCreateManyArgs>(args?: SelectSubset<T, InteracaoClienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InteracaoCliente.
     * @param {InteracaoClienteDeleteArgs} args - Arguments to delete one InteracaoCliente.
     * @example
     * // Delete one InteracaoCliente
     * const InteracaoCliente = await prisma.interacaoCliente.delete({
     *   where: {
     *     // ... filter to delete one InteracaoCliente
     *   }
     * })
     * 
     */
    delete<T extends InteracaoClienteDeleteArgs>(args: SelectSubset<T, InteracaoClienteDeleteArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InteracaoCliente.
     * @param {InteracaoClienteUpdateArgs} args - Arguments to update one InteracaoCliente.
     * @example
     * // Update one InteracaoCliente
     * const interacaoCliente = await prisma.interacaoCliente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InteracaoClienteUpdateArgs>(args: SelectSubset<T, InteracaoClienteUpdateArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InteracaoClientes.
     * @param {InteracaoClienteDeleteManyArgs} args - Arguments to filter InteracaoClientes to delete.
     * @example
     * // Delete a few InteracaoClientes
     * const { count } = await prisma.interacaoCliente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InteracaoClienteDeleteManyArgs>(args?: SelectSubset<T, InteracaoClienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InteracaoClientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InteracaoClientes
     * const interacaoCliente = await prisma.interacaoCliente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InteracaoClienteUpdateManyArgs>(args: SelectSubset<T, InteracaoClienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InteracaoCliente.
     * @param {InteracaoClienteUpsertArgs} args - Arguments to update or create a InteracaoCliente.
     * @example
     * // Update or create a InteracaoCliente
     * const interacaoCliente = await prisma.interacaoCliente.upsert({
     *   create: {
     *     // ... data to create a InteracaoCliente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InteracaoCliente we want to update
     *   }
     * })
     */
    upsert<T extends InteracaoClienteUpsertArgs>(args: SelectSubset<T, InteracaoClienteUpsertArgs<ExtArgs>>): Prisma__InteracaoClienteClient<$Result.GetResult<Prisma.$InteracaoClientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InteracaoClientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteCountArgs} args - Arguments to filter InteracaoClientes to count.
     * @example
     * // Count the number of InteracaoClientes
     * const count = await prisma.interacaoCliente.count({
     *   where: {
     *     // ... the filter for the InteracaoClientes we want to count
     *   }
     * })
    **/
    count<T extends InteracaoClienteCountArgs>(
      args?: Subset<T, InteracaoClienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InteracaoClienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InteracaoCliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InteracaoClienteAggregateArgs>(args: Subset<T, InteracaoClienteAggregateArgs>): Prisma.PrismaPromise<GetInteracaoClienteAggregateType<T>>

    /**
     * Group by InteracaoCliente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoClienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InteracaoClienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InteracaoClienteGroupByArgs['orderBy'] }
        : { orderBy?: InteracaoClienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InteracaoClienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteracaoClienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InteracaoCliente model
   */
  readonly fields: InteracaoClienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InteracaoCliente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InteracaoClienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    funcionario<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InteracaoCliente model
   */
  interface InteracaoClienteFieldRefs {
    readonly id: FieldRef<"InteracaoCliente", 'Int'>
    readonly dataInteracao: FieldRef<"InteracaoCliente", 'DateTime'>
    readonly tipoInteracao: FieldRef<"InteracaoCliente", 'String'>
    readonly relatorioInteracao: FieldRef<"InteracaoCliente", 'String'>
    readonly funcionarioId: FieldRef<"InteracaoCliente", 'Int'>
    readonly clienteId: FieldRef<"InteracaoCliente", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InteracaoCliente findUnique
   */
  export type InteracaoClienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoCliente to fetch.
     */
    where: InteracaoClienteWhereUniqueInput
  }

  /**
   * InteracaoCliente findUniqueOrThrow
   */
  export type InteracaoClienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoCliente to fetch.
     */
    where: InteracaoClienteWhereUniqueInput
  }

  /**
   * InteracaoCliente findFirst
   */
  export type InteracaoClienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoCliente to fetch.
     */
    where?: InteracaoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoClientes to fetch.
     */
    orderBy?: InteracaoClienteOrderByWithRelationInput | InteracaoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InteracaoClientes.
     */
    cursor?: InteracaoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InteracaoClientes.
     */
    distinct?: InteracaoClienteScalarFieldEnum | InteracaoClienteScalarFieldEnum[]
  }

  /**
   * InteracaoCliente findFirstOrThrow
   */
  export type InteracaoClienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoCliente to fetch.
     */
    where?: InteracaoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoClientes to fetch.
     */
    orderBy?: InteracaoClienteOrderByWithRelationInput | InteracaoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InteracaoClientes.
     */
    cursor?: InteracaoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoClientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InteracaoClientes.
     */
    distinct?: InteracaoClienteScalarFieldEnum | InteracaoClienteScalarFieldEnum[]
  }

  /**
   * InteracaoCliente findMany
   */
  export type InteracaoClienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoClientes to fetch.
     */
    where?: InteracaoClienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoClientes to fetch.
     */
    orderBy?: InteracaoClienteOrderByWithRelationInput | InteracaoClienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InteracaoClientes.
     */
    cursor?: InteracaoClienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoClientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoClientes.
     */
    skip?: number
    distinct?: InteracaoClienteScalarFieldEnum | InteracaoClienteScalarFieldEnum[]
  }

  /**
   * InteracaoCliente create
   */
  export type InteracaoClienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * The data needed to create a InteracaoCliente.
     */
    data: XOR<InteracaoClienteCreateInput, InteracaoClienteUncheckedCreateInput>
  }

  /**
   * InteracaoCliente createMany
   */
  export type InteracaoClienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InteracaoClientes.
     */
    data: InteracaoClienteCreateManyInput | InteracaoClienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InteracaoCliente update
   */
  export type InteracaoClienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * The data needed to update a InteracaoCliente.
     */
    data: XOR<InteracaoClienteUpdateInput, InteracaoClienteUncheckedUpdateInput>
    /**
     * Choose, which InteracaoCliente to update.
     */
    where: InteracaoClienteWhereUniqueInput
  }

  /**
   * InteracaoCliente updateMany
   */
  export type InteracaoClienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InteracaoClientes.
     */
    data: XOR<InteracaoClienteUpdateManyMutationInput, InteracaoClienteUncheckedUpdateManyInput>
    /**
     * Filter which InteracaoClientes to update
     */
    where?: InteracaoClienteWhereInput
    /**
     * Limit how many InteracaoClientes to update.
     */
    limit?: number
  }

  /**
   * InteracaoCliente upsert
   */
  export type InteracaoClienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * The filter to search for the InteracaoCliente to update in case it exists.
     */
    where: InteracaoClienteWhereUniqueInput
    /**
     * In case the InteracaoCliente found by the `where` argument doesn't exist, create a new InteracaoCliente with this data.
     */
    create: XOR<InteracaoClienteCreateInput, InteracaoClienteUncheckedCreateInput>
    /**
     * In case the InteracaoCliente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InteracaoClienteUpdateInput, InteracaoClienteUncheckedUpdateInput>
  }

  /**
   * InteracaoCliente delete
   */
  export type InteracaoClienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
    /**
     * Filter which InteracaoCliente to delete.
     */
    where: InteracaoClienteWhereUniqueInput
  }

  /**
   * InteracaoCliente deleteMany
   */
  export type InteracaoClienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InteracaoClientes to delete
     */
    where?: InteracaoClienteWhereInput
    /**
     * Limit how many InteracaoClientes to delete.
     */
    limit?: number
  }

  /**
   * InteracaoCliente without action
   */
  export type InteracaoClienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoCliente
     */
    select?: InteracaoClienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoCliente
     */
    omit?: InteracaoClienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoClienteInclude<ExtArgs> | null
  }


  /**
   * Model Venda
   */

  export type AggregateVenda = {
    _count: VendaCountAggregateOutputType | null
    _avg: VendaAvgAggregateOutputType | null
    _sum: VendaSumAggregateOutputType | null
    _min: VendaMinAggregateOutputType | null
    _max: VendaMaxAggregateOutputType | null
  }

  export type VendaAvgAggregateOutputType = {
    id: number | null
    total: Decimal | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type VendaSumAggregateOutputType = {
    id: number | null
    total: Decimal | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type VendaMinAggregateOutputType = {
    id: number | null
    dataVenda: Date | null
    total: Decimal | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type VendaMaxAggregateOutputType = {
    id: number | null
    dataVenda: Date | null
    total: Decimal | null
    funcionarioId: number | null
    clienteId: number | null
  }

  export type VendaCountAggregateOutputType = {
    id: number
    dataVenda: number
    total: number
    funcionarioId: number
    clienteId: number
    _all: number
  }


  export type VendaAvgAggregateInputType = {
    id?: true
    total?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type VendaSumAggregateInputType = {
    id?: true
    total?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type VendaMinAggregateInputType = {
    id?: true
    dataVenda?: true
    total?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type VendaMaxAggregateInputType = {
    id?: true
    dataVenda?: true
    total?: true
    funcionarioId?: true
    clienteId?: true
  }

  export type VendaCountAggregateInputType = {
    id?: true
    dataVenda?: true
    total?: true
    funcionarioId?: true
    clienteId?: true
    _all?: true
  }

  export type VendaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venda to aggregate.
     */
    where?: VendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendaOrderByWithRelationInput | VendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendas
    **/
    _count?: true | VendaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendaMaxAggregateInputType
  }

  export type GetVendaAggregateType<T extends VendaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenda]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenda[P]>
      : GetScalarType<T[P], AggregateVenda[P]>
  }




  export type VendaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VendaWhereInput
    orderBy?: VendaOrderByWithAggregationInput | VendaOrderByWithAggregationInput[]
    by: VendaScalarFieldEnum[] | VendaScalarFieldEnum
    having?: VendaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendaCountAggregateInputType | true
    _avg?: VendaAvgAggregateInputType
    _sum?: VendaSumAggregateInputType
    _min?: VendaMinAggregateInputType
    _max?: VendaMaxAggregateInputType
  }

  export type VendaGroupByOutputType = {
    id: number
    dataVenda: Date
    total: Decimal
    funcionarioId: number
    clienteId: number
    _count: VendaCountAggregateOutputType | null
    _avg: VendaAvgAggregateOutputType | null
    _sum: VendaSumAggregateOutputType | null
    _min: VendaMinAggregateOutputType | null
    _max: VendaMaxAggregateOutputType | null
  }

  type GetVendaGroupByPayload<T extends VendaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VendaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendaGroupByOutputType[P]>
            : GetScalarType<T[P], VendaGroupByOutputType[P]>
        }
      >
    >


  export type VendaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataVenda?: boolean
    total?: boolean
    funcionarioId?: boolean
    clienteId?: boolean
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venda"]>



  export type VendaSelectScalar = {
    id?: boolean
    dataVenda?: boolean
    total?: boolean
    funcionarioId?: boolean
    clienteId?: boolean
  }

  export type VendaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dataVenda" | "total" | "funcionarioId" | "clienteId", ExtArgs["result"]["venda"]>
  export type VendaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    cliente?: boolean | ClienteDefaultArgs<ExtArgs>
  }

  export type $VendaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venda"
    objects: {
      funcionario: Prisma.$FuncionarioPayload<ExtArgs>
      cliente: Prisma.$ClientePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dataVenda: Date
      total: Prisma.Decimal
      funcionarioId: number
      clienteId: number
    }, ExtArgs["result"]["venda"]>
    composites: {}
  }

  type VendaGetPayload<S extends boolean | null | undefined | VendaDefaultArgs> = $Result.GetResult<Prisma.$VendaPayload, S>

  type VendaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VendaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VendaCountAggregateInputType | true
    }

  export interface VendaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venda'], meta: { name: 'Venda' } }
    /**
     * Find zero or one Venda that matches the filter.
     * @param {VendaFindUniqueArgs} args - Arguments to find a Venda
     * @example
     * // Get one Venda
     * const venda = await prisma.venda.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VendaFindUniqueArgs>(args: SelectSubset<T, VendaFindUniqueArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Venda that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VendaFindUniqueOrThrowArgs} args - Arguments to find a Venda
     * @example
     * // Get one Venda
     * const venda = await prisma.venda.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VendaFindUniqueOrThrowArgs>(args: SelectSubset<T, VendaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venda that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaFindFirstArgs} args - Arguments to find a Venda
     * @example
     * // Get one Venda
     * const venda = await prisma.venda.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VendaFindFirstArgs>(args?: SelectSubset<T, VendaFindFirstArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Venda that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaFindFirstOrThrowArgs} args - Arguments to find a Venda
     * @example
     * // Get one Venda
     * const venda = await prisma.venda.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VendaFindFirstOrThrowArgs>(args?: SelectSubset<T, VendaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vendas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendas
     * const vendas = await prisma.venda.findMany()
     * 
     * // Get first 10 Vendas
     * const vendas = await prisma.venda.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendaWithIdOnly = await prisma.venda.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VendaFindManyArgs>(args?: SelectSubset<T, VendaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Venda.
     * @param {VendaCreateArgs} args - Arguments to create a Venda.
     * @example
     * // Create one Venda
     * const Venda = await prisma.venda.create({
     *   data: {
     *     // ... data to create a Venda
     *   }
     * })
     * 
     */
    create<T extends VendaCreateArgs>(args: SelectSubset<T, VendaCreateArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vendas.
     * @param {VendaCreateManyArgs} args - Arguments to create many Vendas.
     * @example
     * // Create many Vendas
     * const venda = await prisma.venda.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VendaCreateManyArgs>(args?: SelectSubset<T, VendaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Venda.
     * @param {VendaDeleteArgs} args - Arguments to delete one Venda.
     * @example
     * // Delete one Venda
     * const Venda = await prisma.venda.delete({
     *   where: {
     *     // ... filter to delete one Venda
     *   }
     * })
     * 
     */
    delete<T extends VendaDeleteArgs>(args: SelectSubset<T, VendaDeleteArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Venda.
     * @param {VendaUpdateArgs} args - Arguments to update one Venda.
     * @example
     * // Update one Venda
     * const venda = await prisma.venda.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VendaUpdateArgs>(args: SelectSubset<T, VendaUpdateArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vendas.
     * @param {VendaDeleteManyArgs} args - Arguments to filter Vendas to delete.
     * @example
     * // Delete a few Vendas
     * const { count } = await prisma.venda.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VendaDeleteManyArgs>(args?: SelectSubset<T, VendaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendas
     * const venda = await prisma.venda.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VendaUpdateManyArgs>(args: SelectSubset<T, VendaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venda.
     * @param {VendaUpsertArgs} args - Arguments to update or create a Venda.
     * @example
     * // Update or create a Venda
     * const venda = await prisma.venda.upsert({
     *   create: {
     *     // ... data to create a Venda
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venda we want to update
     *   }
     * })
     */
    upsert<T extends VendaUpsertArgs>(args: SelectSubset<T, VendaUpsertArgs<ExtArgs>>): Prisma__VendaClient<$Result.GetResult<Prisma.$VendaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vendas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaCountArgs} args - Arguments to filter Vendas to count.
     * @example
     * // Count the number of Vendas
     * const count = await prisma.venda.count({
     *   where: {
     *     // ... the filter for the Vendas we want to count
     *   }
     * })
    **/
    count<T extends VendaCountArgs>(
      args?: Subset<T, VendaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendaAggregateArgs>(args: Subset<T, VendaAggregateArgs>): Prisma.PrismaPromise<GetVendaAggregateType<T>>

    /**
     * Group by Venda.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendaGroupByArgs['orderBy'] }
        : { orderBy?: VendaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venda model
   */
  readonly fields: VendaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venda.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VendaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    funcionario<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cliente<T extends ClienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClienteDefaultArgs<ExtArgs>>): Prisma__ClienteClient<$Result.GetResult<Prisma.$ClientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venda model
   */
  interface VendaFieldRefs {
    readonly id: FieldRef<"Venda", 'Int'>
    readonly dataVenda: FieldRef<"Venda", 'DateTime'>
    readonly total: FieldRef<"Venda", 'Decimal'>
    readonly funcionarioId: FieldRef<"Venda", 'Int'>
    readonly clienteId: FieldRef<"Venda", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Venda findUnique
   */
  export type VendaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * Filter, which Venda to fetch.
     */
    where: VendaWhereUniqueInput
  }

  /**
   * Venda findUniqueOrThrow
   */
  export type VendaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * Filter, which Venda to fetch.
     */
    where: VendaWhereUniqueInput
  }

  /**
   * Venda findFirst
   */
  export type VendaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * Filter, which Venda to fetch.
     */
    where?: VendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendaOrderByWithRelationInput | VendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendas.
     */
    cursor?: VendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendas.
     */
    distinct?: VendaScalarFieldEnum | VendaScalarFieldEnum[]
  }

  /**
   * Venda findFirstOrThrow
   */
  export type VendaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * Filter, which Venda to fetch.
     */
    where?: VendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendaOrderByWithRelationInput | VendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendas.
     */
    cursor?: VendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendas.
     */
    distinct?: VendaScalarFieldEnum | VendaScalarFieldEnum[]
  }

  /**
   * Venda findMany
   */
  export type VendaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * Filter, which Vendas to fetch.
     */
    where?: VendaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendas to fetch.
     */
    orderBy?: VendaOrderByWithRelationInput | VendaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendas.
     */
    cursor?: VendaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendas.
     */
    skip?: number
    distinct?: VendaScalarFieldEnum | VendaScalarFieldEnum[]
  }

  /**
   * Venda create
   */
  export type VendaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * The data needed to create a Venda.
     */
    data: XOR<VendaCreateInput, VendaUncheckedCreateInput>
  }

  /**
   * Venda createMany
   */
  export type VendaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendas.
     */
    data: VendaCreateManyInput | VendaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Venda update
   */
  export type VendaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * The data needed to update a Venda.
     */
    data: XOR<VendaUpdateInput, VendaUncheckedUpdateInput>
    /**
     * Choose, which Venda to update.
     */
    where: VendaWhereUniqueInput
  }

  /**
   * Venda updateMany
   */
  export type VendaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendas.
     */
    data: XOR<VendaUpdateManyMutationInput, VendaUncheckedUpdateManyInput>
    /**
     * Filter which Vendas to update
     */
    where?: VendaWhereInput
    /**
     * Limit how many Vendas to update.
     */
    limit?: number
  }

  /**
   * Venda upsert
   */
  export type VendaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * The filter to search for the Venda to update in case it exists.
     */
    where: VendaWhereUniqueInput
    /**
     * In case the Venda found by the `where` argument doesn't exist, create a new Venda with this data.
     */
    create: XOR<VendaCreateInput, VendaUncheckedCreateInput>
    /**
     * In case the Venda was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendaUpdateInput, VendaUncheckedUpdateInput>
  }

  /**
   * Venda delete
   */
  export type VendaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
    /**
     * Filter which Venda to delete.
     */
    where: VendaWhereUniqueInput
  }

  /**
   * Venda deleteMany
   */
  export type VendaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendas to delete
     */
    where?: VendaWhereInput
    /**
     * Limit how many Vendas to delete.
     */
    limit?: number
  }

  /**
   * Venda without action
   */
  export type VendaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venda
     */
    select?: VendaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venda
     */
    omit?: VendaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VendaInclude<ExtArgs> | null
  }


  /**
   * Model FuncionariosConvidados
   */

  export type AggregateFuncionariosConvidados = {
    _count: FuncionariosConvidadosCountAggregateOutputType | null
    _avg: FuncionariosConvidadosAvgAggregateOutputType | null
    _sum: FuncionariosConvidadosSumAggregateOutputType | null
    _min: FuncionariosConvidadosMinAggregateOutputType | null
    _max: FuncionariosConvidadosMaxAggregateOutputType | null
  }

  export type FuncionariosConvidadosAvgAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
  }

  export type FuncionariosConvidadosSumAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
  }

  export type FuncionariosConvidadosMinAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
  }

  export type FuncionariosConvidadosMaxAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
  }

  export type FuncionariosConvidadosCountAggregateOutputType = {
    eventoId: number
    funcionarioId: number
    _all: number
  }


  export type FuncionariosConvidadosAvgAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
  }

  export type FuncionariosConvidadosSumAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
  }

  export type FuncionariosConvidadosMinAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
  }

  export type FuncionariosConvidadosMaxAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
  }

  export type FuncionariosConvidadosCountAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
    _all?: true
  }

  export type FuncionariosConvidadosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FuncionariosConvidados to aggregate.
     */
    where?: FuncionariosConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FuncionariosConvidados to fetch.
     */
    orderBy?: FuncionariosConvidadosOrderByWithRelationInput | FuncionariosConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FuncionariosConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FuncionariosConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FuncionariosConvidados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FuncionariosConvidados
    **/
    _count?: true | FuncionariosConvidadosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncionariosConvidadosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncionariosConvidadosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncionariosConvidadosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncionariosConvidadosMaxAggregateInputType
  }

  export type GetFuncionariosConvidadosAggregateType<T extends FuncionariosConvidadosAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncionariosConvidados]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncionariosConvidados[P]>
      : GetScalarType<T[P], AggregateFuncionariosConvidados[P]>
  }




  export type FuncionariosConvidadosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FuncionariosConvidadosWhereInput
    orderBy?: FuncionariosConvidadosOrderByWithAggregationInput | FuncionariosConvidadosOrderByWithAggregationInput[]
    by: FuncionariosConvidadosScalarFieldEnum[] | FuncionariosConvidadosScalarFieldEnum
    having?: FuncionariosConvidadosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncionariosConvidadosCountAggregateInputType | true
    _avg?: FuncionariosConvidadosAvgAggregateInputType
    _sum?: FuncionariosConvidadosSumAggregateInputType
    _min?: FuncionariosConvidadosMinAggregateInputType
    _max?: FuncionariosConvidadosMaxAggregateInputType
  }

  export type FuncionariosConvidadosGroupByOutputType = {
    eventoId: number
    funcionarioId: number
    _count: FuncionariosConvidadosCountAggregateOutputType | null
    _avg: FuncionariosConvidadosAvgAggregateOutputType | null
    _sum: FuncionariosConvidadosSumAggregateOutputType | null
    _min: FuncionariosConvidadosMinAggregateOutputType | null
    _max: FuncionariosConvidadosMaxAggregateOutputType | null
  }

  type GetFuncionariosConvidadosGroupByPayload<T extends FuncionariosConvidadosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FuncionariosConvidadosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncionariosConvidadosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncionariosConvidadosGroupByOutputType[P]>
            : GetScalarType<T[P], FuncionariosConvidadosGroupByOutputType[P]>
        }
      >
    >


  export type FuncionariosConvidadosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    eventoId?: boolean
    funcionarioId?: boolean
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    notificacoes?: boolean | FuncionariosConvidados$notificacoesArgs<ExtArgs>
    presenca?: boolean | FuncionariosConvidados$presencaArgs<ExtArgs>
    _count?: boolean | FuncionariosConvidadosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["funcionariosConvidados"]>



  export type FuncionariosConvidadosSelectScalar = {
    eventoId?: boolean
    funcionarioId?: boolean
  }

  export type FuncionariosConvidadosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"eventoId" | "funcionarioId", ExtArgs["result"]["funcionariosConvidados"]>
  export type FuncionariosConvidadosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    funcionario?: boolean | FuncionarioDefaultArgs<ExtArgs>
    notificacoes?: boolean | FuncionariosConvidados$notificacoesArgs<ExtArgs>
    presenca?: boolean | FuncionariosConvidados$presencaArgs<ExtArgs>
    _count?: boolean | FuncionariosConvidadosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FuncionariosConvidadosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FuncionariosConvidados"
    objects: {
      evento: Prisma.$EventoPayload<ExtArgs>
      funcionario: Prisma.$FuncionarioPayload<ExtArgs>
      notificacoes: Prisma.$NotificacaoConvidadosPayload<ExtArgs>[]
      presenca: Prisma.$PresencaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      eventoId: number
      funcionarioId: number
    }, ExtArgs["result"]["funcionariosConvidados"]>
    composites: {}
  }

  type FuncionariosConvidadosGetPayload<S extends boolean | null | undefined | FuncionariosConvidadosDefaultArgs> = $Result.GetResult<Prisma.$FuncionariosConvidadosPayload, S>

  type FuncionariosConvidadosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FuncionariosConvidadosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FuncionariosConvidadosCountAggregateInputType | true
    }

  export interface FuncionariosConvidadosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FuncionariosConvidados'], meta: { name: 'FuncionariosConvidados' } }
    /**
     * Find zero or one FuncionariosConvidados that matches the filter.
     * @param {FuncionariosConvidadosFindUniqueArgs} args - Arguments to find a FuncionariosConvidados
     * @example
     * // Get one FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FuncionariosConvidadosFindUniqueArgs>(args: SelectSubset<T, FuncionariosConvidadosFindUniqueArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FuncionariosConvidados that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FuncionariosConvidadosFindUniqueOrThrowArgs} args - Arguments to find a FuncionariosConvidados
     * @example
     * // Get one FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FuncionariosConvidadosFindUniqueOrThrowArgs>(args: SelectSubset<T, FuncionariosConvidadosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FuncionariosConvidados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosFindFirstArgs} args - Arguments to find a FuncionariosConvidados
     * @example
     * // Get one FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FuncionariosConvidadosFindFirstArgs>(args?: SelectSubset<T, FuncionariosConvidadosFindFirstArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FuncionariosConvidados that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosFindFirstOrThrowArgs} args - Arguments to find a FuncionariosConvidados
     * @example
     * // Get one FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FuncionariosConvidadosFindFirstOrThrowArgs>(args?: SelectSubset<T, FuncionariosConvidadosFindFirstOrThrowArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FuncionariosConvidados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.findMany()
     * 
     * // Get first 10 FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.findMany({ take: 10 })
     * 
     * // Only select the `eventoId`
     * const funcionariosConvidadosWithEventoIdOnly = await prisma.funcionariosConvidados.findMany({ select: { eventoId: true } })
     * 
     */
    findMany<T extends FuncionariosConvidadosFindManyArgs>(args?: SelectSubset<T, FuncionariosConvidadosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FuncionariosConvidados.
     * @param {FuncionariosConvidadosCreateArgs} args - Arguments to create a FuncionariosConvidados.
     * @example
     * // Create one FuncionariosConvidados
     * const FuncionariosConvidados = await prisma.funcionariosConvidados.create({
     *   data: {
     *     // ... data to create a FuncionariosConvidados
     *   }
     * })
     * 
     */
    create<T extends FuncionariosConvidadosCreateArgs>(args: SelectSubset<T, FuncionariosConvidadosCreateArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FuncionariosConvidados.
     * @param {FuncionariosConvidadosCreateManyArgs} args - Arguments to create many FuncionariosConvidados.
     * @example
     * // Create many FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FuncionariosConvidadosCreateManyArgs>(args?: SelectSubset<T, FuncionariosConvidadosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FuncionariosConvidados.
     * @param {FuncionariosConvidadosDeleteArgs} args - Arguments to delete one FuncionariosConvidados.
     * @example
     * // Delete one FuncionariosConvidados
     * const FuncionariosConvidados = await prisma.funcionariosConvidados.delete({
     *   where: {
     *     // ... filter to delete one FuncionariosConvidados
     *   }
     * })
     * 
     */
    delete<T extends FuncionariosConvidadosDeleteArgs>(args: SelectSubset<T, FuncionariosConvidadosDeleteArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FuncionariosConvidados.
     * @param {FuncionariosConvidadosUpdateArgs} args - Arguments to update one FuncionariosConvidados.
     * @example
     * // Update one FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FuncionariosConvidadosUpdateArgs>(args: SelectSubset<T, FuncionariosConvidadosUpdateArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FuncionariosConvidados.
     * @param {FuncionariosConvidadosDeleteManyArgs} args - Arguments to filter FuncionariosConvidados to delete.
     * @example
     * // Delete a few FuncionariosConvidados
     * const { count } = await prisma.funcionariosConvidados.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FuncionariosConvidadosDeleteManyArgs>(args?: SelectSubset<T, FuncionariosConvidadosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FuncionariosConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FuncionariosConvidadosUpdateManyArgs>(args: SelectSubset<T, FuncionariosConvidadosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FuncionariosConvidados.
     * @param {FuncionariosConvidadosUpsertArgs} args - Arguments to update or create a FuncionariosConvidados.
     * @example
     * // Update or create a FuncionariosConvidados
     * const funcionariosConvidados = await prisma.funcionariosConvidados.upsert({
     *   create: {
     *     // ... data to create a FuncionariosConvidados
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FuncionariosConvidados we want to update
     *   }
     * })
     */
    upsert<T extends FuncionariosConvidadosUpsertArgs>(args: SelectSubset<T, FuncionariosConvidadosUpsertArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FuncionariosConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosCountArgs} args - Arguments to filter FuncionariosConvidados to count.
     * @example
     * // Count the number of FuncionariosConvidados
     * const count = await prisma.funcionariosConvidados.count({
     *   where: {
     *     // ... the filter for the FuncionariosConvidados we want to count
     *   }
     * })
    **/
    count<T extends FuncionariosConvidadosCountArgs>(
      args?: Subset<T, FuncionariosConvidadosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncionariosConvidadosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FuncionariosConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncionariosConvidadosAggregateArgs>(args: Subset<T, FuncionariosConvidadosAggregateArgs>): Prisma.PrismaPromise<GetFuncionariosConvidadosAggregateType<T>>

    /**
     * Group by FuncionariosConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncionariosConvidadosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncionariosConvidadosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncionariosConvidadosGroupByArgs['orderBy'] }
        : { orderBy?: FuncionariosConvidadosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncionariosConvidadosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncionariosConvidadosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FuncionariosConvidados model
   */
  readonly fields: FuncionariosConvidadosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FuncionariosConvidados.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FuncionariosConvidadosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    evento<T extends EventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventoDefaultArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    funcionario<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notificacoes<T extends FuncionariosConvidados$notificacoesArgs<ExtArgs> = {}>(args?: Subset<T, FuncionariosConvidados$notificacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presenca<T extends FuncionariosConvidados$presencaArgs<ExtArgs> = {}>(args?: Subset<T, FuncionariosConvidados$presencaArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FuncionariosConvidados model
   */
  interface FuncionariosConvidadosFieldRefs {
    readonly eventoId: FieldRef<"FuncionariosConvidados", 'Int'>
    readonly funcionarioId: FieldRef<"FuncionariosConvidados", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FuncionariosConvidados findUnique
   */
  export type FuncionariosConvidadosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which FuncionariosConvidados to fetch.
     */
    where: FuncionariosConvidadosWhereUniqueInput
  }

  /**
   * FuncionariosConvidados findUniqueOrThrow
   */
  export type FuncionariosConvidadosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which FuncionariosConvidados to fetch.
     */
    where: FuncionariosConvidadosWhereUniqueInput
  }

  /**
   * FuncionariosConvidados findFirst
   */
  export type FuncionariosConvidadosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which FuncionariosConvidados to fetch.
     */
    where?: FuncionariosConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FuncionariosConvidados to fetch.
     */
    orderBy?: FuncionariosConvidadosOrderByWithRelationInput | FuncionariosConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FuncionariosConvidados.
     */
    cursor?: FuncionariosConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FuncionariosConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FuncionariosConvidados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FuncionariosConvidados.
     */
    distinct?: FuncionariosConvidadosScalarFieldEnum | FuncionariosConvidadosScalarFieldEnum[]
  }

  /**
   * FuncionariosConvidados findFirstOrThrow
   */
  export type FuncionariosConvidadosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which FuncionariosConvidados to fetch.
     */
    where?: FuncionariosConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FuncionariosConvidados to fetch.
     */
    orderBy?: FuncionariosConvidadosOrderByWithRelationInput | FuncionariosConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FuncionariosConvidados.
     */
    cursor?: FuncionariosConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FuncionariosConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FuncionariosConvidados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FuncionariosConvidados.
     */
    distinct?: FuncionariosConvidadosScalarFieldEnum | FuncionariosConvidadosScalarFieldEnum[]
  }

  /**
   * FuncionariosConvidados findMany
   */
  export type FuncionariosConvidadosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which FuncionariosConvidados to fetch.
     */
    where?: FuncionariosConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FuncionariosConvidados to fetch.
     */
    orderBy?: FuncionariosConvidadosOrderByWithRelationInput | FuncionariosConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FuncionariosConvidados.
     */
    cursor?: FuncionariosConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FuncionariosConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FuncionariosConvidados.
     */
    skip?: number
    distinct?: FuncionariosConvidadosScalarFieldEnum | FuncionariosConvidadosScalarFieldEnum[]
  }

  /**
   * FuncionariosConvidados create
   */
  export type FuncionariosConvidadosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * The data needed to create a FuncionariosConvidados.
     */
    data: XOR<FuncionariosConvidadosCreateInput, FuncionariosConvidadosUncheckedCreateInput>
  }

  /**
   * FuncionariosConvidados createMany
   */
  export type FuncionariosConvidadosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FuncionariosConvidados.
     */
    data: FuncionariosConvidadosCreateManyInput | FuncionariosConvidadosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FuncionariosConvidados update
   */
  export type FuncionariosConvidadosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * The data needed to update a FuncionariosConvidados.
     */
    data: XOR<FuncionariosConvidadosUpdateInput, FuncionariosConvidadosUncheckedUpdateInput>
    /**
     * Choose, which FuncionariosConvidados to update.
     */
    where: FuncionariosConvidadosWhereUniqueInput
  }

  /**
   * FuncionariosConvidados updateMany
   */
  export type FuncionariosConvidadosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FuncionariosConvidados.
     */
    data: XOR<FuncionariosConvidadosUpdateManyMutationInput, FuncionariosConvidadosUncheckedUpdateManyInput>
    /**
     * Filter which FuncionariosConvidados to update
     */
    where?: FuncionariosConvidadosWhereInput
    /**
     * Limit how many FuncionariosConvidados to update.
     */
    limit?: number
  }

  /**
   * FuncionariosConvidados upsert
   */
  export type FuncionariosConvidadosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * The filter to search for the FuncionariosConvidados to update in case it exists.
     */
    where: FuncionariosConvidadosWhereUniqueInput
    /**
     * In case the FuncionariosConvidados found by the `where` argument doesn't exist, create a new FuncionariosConvidados with this data.
     */
    create: XOR<FuncionariosConvidadosCreateInput, FuncionariosConvidadosUncheckedCreateInput>
    /**
     * In case the FuncionariosConvidados was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FuncionariosConvidadosUpdateInput, FuncionariosConvidadosUncheckedUpdateInput>
  }

  /**
   * FuncionariosConvidados delete
   */
  export type FuncionariosConvidadosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
    /**
     * Filter which FuncionariosConvidados to delete.
     */
    where: FuncionariosConvidadosWhereUniqueInput
  }

  /**
   * FuncionariosConvidados deleteMany
   */
  export type FuncionariosConvidadosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FuncionariosConvidados to delete
     */
    where?: FuncionariosConvidadosWhereInput
    /**
     * Limit how many FuncionariosConvidados to delete.
     */
    limit?: number
  }

  /**
   * FuncionariosConvidados.notificacoes
   */
  export type FuncionariosConvidados$notificacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    where?: NotificacaoConvidadosWhereInput
    orderBy?: NotificacaoConvidadosOrderByWithRelationInput | NotificacaoConvidadosOrderByWithRelationInput[]
    cursor?: NotificacaoConvidadosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificacaoConvidadosScalarFieldEnum | NotificacaoConvidadosScalarFieldEnum[]
  }

  /**
   * FuncionariosConvidados.presenca
   */
  export type FuncionariosConvidados$presencaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    where?: PresencaWhereInput
  }

  /**
   * FuncionariosConvidados without action
   */
  export type FuncionariosConvidadosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FuncionariosConvidados
     */
    select?: FuncionariosConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FuncionariosConvidados
     */
    omit?: FuncionariosConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FuncionariosConvidadosInclude<ExtArgs> | null
  }


  /**
   * Model Notificacao
   */

  export type AggregateNotificacao = {
    _count: NotificacaoCountAggregateOutputType | null
    _avg: NotificacaoAvgAggregateOutputType | null
    _sum: NotificacaoSumAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  export type NotificacaoAvgAggregateOutputType = {
    id: number | null
    eventoId: number | null
  }

  export type NotificacaoSumAggregateOutputType = {
    id: number | null
    eventoId: number | null
  }

  export type NotificacaoMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    corpo: string | null
    eventoId: number | null
  }

  export type NotificacaoMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    corpo: string | null
    eventoId: number | null
  }

  export type NotificacaoCountAggregateOutputType = {
    id: number
    titulo: number
    corpo: number
    eventoId: number
    _all: number
  }


  export type NotificacaoAvgAggregateInputType = {
    id?: true
    eventoId?: true
  }

  export type NotificacaoSumAggregateInputType = {
    id?: true
    eventoId?: true
  }

  export type NotificacaoMinAggregateInputType = {
    id?: true
    titulo?: true
    corpo?: true
    eventoId?: true
  }

  export type NotificacaoMaxAggregateInputType = {
    id?: true
    titulo?: true
    corpo?: true
    eventoId?: true
  }

  export type NotificacaoCountAggregateInputType = {
    id?: true
    titulo?: true
    corpo?: true
    eventoId?: true
    _all?: true
  }

  export type NotificacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacao to aggregate.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notificacaos
    **/
    _count?: true | NotificacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificacaoMaxAggregateInputType
  }

  export type GetNotificacaoAggregateType<T extends NotificacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificacao[P]>
      : GetScalarType<T[P], AggregateNotificacao[P]>
  }




  export type NotificacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoWhereInput
    orderBy?: NotificacaoOrderByWithAggregationInput | NotificacaoOrderByWithAggregationInput[]
    by: NotificacaoScalarFieldEnum[] | NotificacaoScalarFieldEnum
    having?: NotificacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificacaoCountAggregateInputType | true
    _avg?: NotificacaoAvgAggregateInputType
    _sum?: NotificacaoSumAggregateInputType
    _min?: NotificacaoMinAggregateInputType
    _max?: NotificacaoMaxAggregateInputType
  }

  export type NotificacaoGroupByOutputType = {
    id: number
    titulo: string
    corpo: string | null
    eventoId: number
    _count: NotificacaoCountAggregateOutputType | null
    _avg: NotificacaoAvgAggregateOutputType | null
    _sum: NotificacaoSumAggregateOutputType | null
    _min: NotificacaoMinAggregateOutputType | null
    _max: NotificacaoMaxAggregateOutputType | null
  }

  type GetNotificacaoGroupByPayload<T extends NotificacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
            : GetScalarType<T[P], NotificacaoGroupByOutputType[P]>
        }
      >
    >


  export type NotificacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    corpo?: boolean
    eventoId?: boolean
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    convidados?: boolean | Notificacao$convidadosArgs<ExtArgs>
    _count?: boolean | NotificacaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacao"]>



  export type NotificacaoSelectScalar = {
    id?: boolean
    titulo?: boolean
    corpo?: boolean
    eventoId?: boolean
  }

  export type NotificacaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "corpo" | "eventoId", ExtArgs["result"]["notificacao"]>
  export type NotificacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    evento?: boolean | EventoDefaultArgs<ExtArgs>
    convidados?: boolean | Notificacao$convidadosArgs<ExtArgs>
    _count?: boolean | NotificacaoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NotificacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notificacao"
    objects: {
      evento: Prisma.$EventoPayload<ExtArgs>
      convidados: Prisma.$NotificacaoConvidadosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      corpo: string | null
      eventoId: number
    }, ExtArgs["result"]["notificacao"]>
    composites: {}
  }

  type NotificacaoGetPayload<S extends boolean | null | undefined | NotificacaoDefaultArgs> = $Result.GetResult<Prisma.$NotificacaoPayload, S>

  type NotificacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificacaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificacaoCountAggregateInputType | true
    }

  export interface NotificacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notificacao'], meta: { name: 'Notificacao' } }
    /**
     * Find zero or one Notificacao that matches the filter.
     * @param {NotificacaoFindUniqueArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificacaoFindUniqueArgs>(args: SelectSubset<T, NotificacaoFindUniqueArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notificacao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificacaoFindUniqueOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notificacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificacaoFindFirstArgs>(args?: SelectSubset<T, NotificacaoFindFirstArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notificacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindFirstOrThrowArgs} args - Arguments to find a Notificacao
     * @example
     * // Get one Notificacao
     * const notificacao = await prisma.notificacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notificacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notificacaos
     * const notificacaos = await prisma.notificacao.findMany()
     * 
     * // Get first 10 Notificacaos
     * const notificacaos = await prisma.notificacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificacaoWithIdOnly = await prisma.notificacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificacaoFindManyArgs>(args?: SelectSubset<T, NotificacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notificacao.
     * @param {NotificacaoCreateArgs} args - Arguments to create a Notificacao.
     * @example
     * // Create one Notificacao
     * const Notificacao = await prisma.notificacao.create({
     *   data: {
     *     // ... data to create a Notificacao
     *   }
     * })
     * 
     */
    create<T extends NotificacaoCreateArgs>(args: SelectSubset<T, NotificacaoCreateArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notificacaos.
     * @param {NotificacaoCreateManyArgs} args - Arguments to create many Notificacaos.
     * @example
     * // Create many Notificacaos
     * const notificacao = await prisma.notificacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificacaoCreateManyArgs>(args?: SelectSubset<T, NotificacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notificacao.
     * @param {NotificacaoDeleteArgs} args - Arguments to delete one Notificacao.
     * @example
     * // Delete one Notificacao
     * const Notificacao = await prisma.notificacao.delete({
     *   where: {
     *     // ... filter to delete one Notificacao
     *   }
     * })
     * 
     */
    delete<T extends NotificacaoDeleteArgs>(args: SelectSubset<T, NotificacaoDeleteArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notificacao.
     * @param {NotificacaoUpdateArgs} args - Arguments to update one Notificacao.
     * @example
     * // Update one Notificacao
     * const notificacao = await prisma.notificacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificacaoUpdateArgs>(args: SelectSubset<T, NotificacaoUpdateArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notificacaos.
     * @param {NotificacaoDeleteManyArgs} args - Arguments to filter Notificacaos to delete.
     * @example
     * // Delete a few Notificacaos
     * const { count } = await prisma.notificacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificacaoDeleteManyArgs>(args?: SelectSubset<T, NotificacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notificacaos
     * const notificacao = await prisma.notificacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificacaoUpdateManyArgs>(args: SelectSubset<T, NotificacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notificacao.
     * @param {NotificacaoUpsertArgs} args - Arguments to update or create a Notificacao.
     * @example
     * // Update or create a Notificacao
     * const notificacao = await prisma.notificacao.upsert({
     *   create: {
     *     // ... data to create a Notificacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notificacao we want to update
     *   }
     * })
     */
    upsert<T extends NotificacaoUpsertArgs>(args: SelectSubset<T, NotificacaoUpsertArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notificacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoCountArgs} args - Arguments to filter Notificacaos to count.
     * @example
     * // Count the number of Notificacaos
     * const count = await prisma.notificacao.count({
     *   where: {
     *     // ... the filter for the Notificacaos we want to count
     *   }
     * })
    **/
    count<T extends NotificacaoCountArgs>(
      args?: Subset<T, NotificacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificacaoAggregateArgs>(args: Subset<T, NotificacaoAggregateArgs>): Prisma.PrismaPromise<GetNotificacaoAggregateType<T>>

    /**
     * Group by Notificacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificacaoGroupByArgs['orderBy'] }
        : { orderBy?: NotificacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notificacao model
   */
  readonly fields: NotificacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notificacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    evento<T extends EventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventoDefaultArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    convidados<T extends Notificacao$convidadosArgs<ExtArgs> = {}>(args?: Subset<T, Notificacao$convidadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notificacao model
   */
  interface NotificacaoFieldRefs {
    readonly id: FieldRef<"Notificacao", 'Int'>
    readonly titulo: FieldRef<"Notificacao", 'String'>
    readonly corpo: FieldRef<"Notificacao", 'String'>
    readonly eventoId: FieldRef<"Notificacao", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notificacao findUnique
   */
  export type NotificacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findUniqueOrThrow
   */
  export type NotificacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao findFirst
   */
  export type NotificacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao findFirstOrThrow
   */
  export type NotificacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacao to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacaos.
     */
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao findMany
   */
  export type NotificacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter, which Notificacaos to fetch.
     */
    where?: NotificacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacaos to fetch.
     */
    orderBy?: NotificacaoOrderByWithRelationInput | NotificacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notificacaos.
     */
    cursor?: NotificacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacaos.
     */
    skip?: number
    distinct?: NotificacaoScalarFieldEnum | NotificacaoScalarFieldEnum[]
  }

  /**
   * Notificacao create
   */
  export type NotificacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Notificacao.
     */
    data: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
  }

  /**
   * Notificacao createMany
   */
  export type NotificacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notificacaos.
     */
    data: NotificacaoCreateManyInput | NotificacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notificacao update
   */
  export type NotificacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Notificacao.
     */
    data: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
    /**
     * Choose, which Notificacao to update.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao updateMany
   */
  export type NotificacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notificacaos.
     */
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyInput>
    /**
     * Filter which Notificacaos to update
     */
    where?: NotificacaoWhereInput
    /**
     * Limit how many Notificacaos to update.
     */
    limit?: number
  }

  /**
   * Notificacao upsert
   */
  export type NotificacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Notificacao to update in case it exists.
     */
    where: NotificacaoWhereUniqueInput
    /**
     * In case the Notificacao found by the `where` argument doesn't exist, create a new Notificacao with this data.
     */
    create: XOR<NotificacaoCreateInput, NotificacaoUncheckedCreateInput>
    /**
     * In case the Notificacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificacaoUpdateInput, NotificacaoUncheckedUpdateInput>
  }

  /**
   * Notificacao delete
   */
  export type NotificacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
    /**
     * Filter which Notificacao to delete.
     */
    where: NotificacaoWhereUniqueInput
  }

  /**
   * Notificacao deleteMany
   */
  export type NotificacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacaos to delete
     */
    where?: NotificacaoWhereInput
    /**
     * Limit how many Notificacaos to delete.
     */
    limit?: number
  }

  /**
   * Notificacao.convidados
   */
  export type Notificacao$convidadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    where?: NotificacaoConvidadosWhereInput
    orderBy?: NotificacaoConvidadosOrderByWithRelationInput | NotificacaoConvidadosOrderByWithRelationInput[]
    cursor?: NotificacaoConvidadosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificacaoConvidadosScalarFieldEnum | NotificacaoConvidadosScalarFieldEnum[]
  }

  /**
   * Notificacao without action
   */
  export type NotificacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacao
     */
    select?: NotificacaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notificacao
     */
    omit?: NotificacaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoInclude<ExtArgs> | null
  }


  /**
   * Model NotificacaoConvidados
   */

  export type AggregateNotificacaoConvidados = {
    _count: NotificacaoConvidadosCountAggregateOutputType | null
    _avg: NotificacaoConvidadosAvgAggregateOutputType | null
    _sum: NotificacaoConvidadosSumAggregateOutputType | null
    _min: NotificacaoConvidadosMinAggregateOutputType | null
    _max: NotificacaoConvidadosMaxAggregateOutputType | null
  }

  export type NotificacaoConvidadosAvgAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
    notificacaoId: number | null
  }

  export type NotificacaoConvidadosSumAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
    notificacaoId: number | null
  }

  export type NotificacaoConvidadosMinAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
    notificacaoId: number | null
    statusLeitura: boolean | null
    dataLeitura: Date | null
    prioridade: string | null
  }

  export type NotificacaoConvidadosMaxAggregateOutputType = {
    eventoId: number | null
    funcionarioId: number | null
    notificacaoId: number | null
    statusLeitura: boolean | null
    dataLeitura: Date | null
    prioridade: string | null
  }

  export type NotificacaoConvidadosCountAggregateOutputType = {
    eventoId: number
    funcionarioId: number
    notificacaoId: number
    statusLeitura: number
    dataLeitura: number
    prioridade: number
    _all: number
  }


  export type NotificacaoConvidadosAvgAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
    notificacaoId?: true
  }

  export type NotificacaoConvidadosSumAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
    notificacaoId?: true
  }

  export type NotificacaoConvidadosMinAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
    notificacaoId?: true
    statusLeitura?: true
    dataLeitura?: true
    prioridade?: true
  }

  export type NotificacaoConvidadosMaxAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
    notificacaoId?: true
    statusLeitura?: true
    dataLeitura?: true
    prioridade?: true
  }

  export type NotificacaoConvidadosCountAggregateInputType = {
    eventoId?: true
    funcionarioId?: true
    notificacaoId?: true
    statusLeitura?: true
    dataLeitura?: true
    prioridade?: true
    _all?: true
  }

  export type NotificacaoConvidadosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificacaoConvidados to aggregate.
     */
    where?: NotificacaoConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificacaoConvidados to fetch.
     */
    orderBy?: NotificacaoConvidadosOrderByWithRelationInput | NotificacaoConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificacaoConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificacaoConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificacaoConvidados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificacaoConvidados
    **/
    _count?: true | NotificacaoConvidadosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificacaoConvidadosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificacaoConvidadosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificacaoConvidadosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificacaoConvidadosMaxAggregateInputType
  }

  export type GetNotificacaoConvidadosAggregateType<T extends NotificacaoConvidadosAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificacaoConvidados]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificacaoConvidados[P]>
      : GetScalarType<T[P], AggregateNotificacaoConvidados[P]>
  }




  export type NotificacaoConvidadosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacaoConvidadosWhereInput
    orderBy?: NotificacaoConvidadosOrderByWithAggregationInput | NotificacaoConvidadosOrderByWithAggregationInput[]
    by: NotificacaoConvidadosScalarFieldEnum[] | NotificacaoConvidadosScalarFieldEnum
    having?: NotificacaoConvidadosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificacaoConvidadosCountAggregateInputType | true
    _avg?: NotificacaoConvidadosAvgAggregateInputType
    _sum?: NotificacaoConvidadosSumAggregateInputType
    _min?: NotificacaoConvidadosMinAggregateInputType
    _max?: NotificacaoConvidadosMaxAggregateInputType
  }

  export type NotificacaoConvidadosGroupByOutputType = {
    eventoId: number
    funcionarioId: number
    notificacaoId: number
    statusLeitura: boolean
    dataLeitura: Date | null
    prioridade: string
    _count: NotificacaoConvidadosCountAggregateOutputType | null
    _avg: NotificacaoConvidadosAvgAggregateOutputType | null
    _sum: NotificacaoConvidadosSumAggregateOutputType | null
    _min: NotificacaoConvidadosMinAggregateOutputType | null
    _max: NotificacaoConvidadosMaxAggregateOutputType | null
  }

  type GetNotificacaoConvidadosGroupByPayload<T extends NotificacaoConvidadosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificacaoConvidadosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificacaoConvidadosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificacaoConvidadosGroupByOutputType[P]>
            : GetScalarType<T[P], NotificacaoConvidadosGroupByOutputType[P]>
        }
      >
    >


  export type NotificacaoConvidadosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    eventoId?: boolean
    funcionarioId?: boolean
    notificacaoId?: boolean
    statusLeitura?: boolean
    dataLeitura?: boolean
    prioridade?: boolean
    convite?: boolean | FuncionariosConvidadosDefaultArgs<ExtArgs>
    notificacao?: boolean | NotificacaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificacaoConvidados"]>



  export type NotificacaoConvidadosSelectScalar = {
    eventoId?: boolean
    funcionarioId?: boolean
    notificacaoId?: boolean
    statusLeitura?: boolean
    dataLeitura?: boolean
    prioridade?: boolean
  }

  export type NotificacaoConvidadosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"eventoId" | "funcionarioId" | "notificacaoId" | "statusLeitura" | "dataLeitura" | "prioridade", ExtArgs["result"]["notificacaoConvidados"]>
  export type NotificacaoConvidadosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    convite?: boolean | FuncionariosConvidadosDefaultArgs<ExtArgs>
    notificacao?: boolean | NotificacaoDefaultArgs<ExtArgs>
  }

  export type $NotificacaoConvidadosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificacaoConvidados"
    objects: {
      convite: Prisma.$FuncionariosConvidadosPayload<ExtArgs>
      notificacao: Prisma.$NotificacaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      eventoId: number
      funcionarioId: number
      notificacaoId: number
      statusLeitura: boolean
      dataLeitura: Date | null
      prioridade: string
    }, ExtArgs["result"]["notificacaoConvidados"]>
    composites: {}
  }

  type NotificacaoConvidadosGetPayload<S extends boolean | null | undefined | NotificacaoConvidadosDefaultArgs> = $Result.GetResult<Prisma.$NotificacaoConvidadosPayload, S>

  type NotificacaoConvidadosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificacaoConvidadosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificacaoConvidadosCountAggregateInputType | true
    }

  export interface NotificacaoConvidadosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificacaoConvidados'], meta: { name: 'NotificacaoConvidados' } }
    /**
     * Find zero or one NotificacaoConvidados that matches the filter.
     * @param {NotificacaoConvidadosFindUniqueArgs} args - Arguments to find a NotificacaoConvidados
     * @example
     * // Get one NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificacaoConvidadosFindUniqueArgs>(args: SelectSubset<T, NotificacaoConvidadosFindUniqueArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificacaoConvidados that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificacaoConvidadosFindUniqueOrThrowArgs} args - Arguments to find a NotificacaoConvidados
     * @example
     * // Get one NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificacaoConvidadosFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificacaoConvidadosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificacaoConvidados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosFindFirstArgs} args - Arguments to find a NotificacaoConvidados
     * @example
     * // Get one NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificacaoConvidadosFindFirstArgs>(args?: SelectSubset<T, NotificacaoConvidadosFindFirstArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificacaoConvidados that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosFindFirstOrThrowArgs} args - Arguments to find a NotificacaoConvidados
     * @example
     * // Get one NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificacaoConvidadosFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificacaoConvidadosFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificacaoConvidados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.findMany()
     * 
     * // Get first 10 NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.findMany({ take: 10 })
     * 
     * // Only select the `eventoId`
     * const notificacaoConvidadosWithEventoIdOnly = await prisma.notificacaoConvidados.findMany({ select: { eventoId: true } })
     * 
     */
    findMany<T extends NotificacaoConvidadosFindManyArgs>(args?: SelectSubset<T, NotificacaoConvidadosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificacaoConvidados.
     * @param {NotificacaoConvidadosCreateArgs} args - Arguments to create a NotificacaoConvidados.
     * @example
     * // Create one NotificacaoConvidados
     * const NotificacaoConvidados = await prisma.notificacaoConvidados.create({
     *   data: {
     *     // ... data to create a NotificacaoConvidados
     *   }
     * })
     * 
     */
    create<T extends NotificacaoConvidadosCreateArgs>(args: SelectSubset<T, NotificacaoConvidadosCreateArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificacaoConvidados.
     * @param {NotificacaoConvidadosCreateManyArgs} args - Arguments to create many NotificacaoConvidados.
     * @example
     * // Create many NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificacaoConvidadosCreateManyArgs>(args?: SelectSubset<T, NotificacaoConvidadosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificacaoConvidados.
     * @param {NotificacaoConvidadosDeleteArgs} args - Arguments to delete one NotificacaoConvidados.
     * @example
     * // Delete one NotificacaoConvidados
     * const NotificacaoConvidados = await prisma.notificacaoConvidados.delete({
     *   where: {
     *     // ... filter to delete one NotificacaoConvidados
     *   }
     * })
     * 
     */
    delete<T extends NotificacaoConvidadosDeleteArgs>(args: SelectSubset<T, NotificacaoConvidadosDeleteArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificacaoConvidados.
     * @param {NotificacaoConvidadosUpdateArgs} args - Arguments to update one NotificacaoConvidados.
     * @example
     * // Update one NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificacaoConvidadosUpdateArgs>(args: SelectSubset<T, NotificacaoConvidadosUpdateArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificacaoConvidados.
     * @param {NotificacaoConvidadosDeleteManyArgs} args - Arguments to filter NotificacaoConvidados to delete.
     * @example
     * // Delete a few NotificacaoConvidados
     * const { count } = await prisma.notificacaoConvidados.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificacaoConvidadosDeleteManyArgs>(args?: SelectSubset<T, NotificacaoConvidadosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificacaoConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificacaoConvidadosUpdateManyArgs>(args: SelectSubset<T, NotificacaoConvidadosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificacaoConvidados.
     * @param {NotificacaoConvidadosUpsertArgs} args - Arguments to update or create a NotificacaoConvidados.
     * @example
     * // Update or create a NotificacaoConvidados
     * const notificacaoConvidados = await prisma.notificacaoConvidados.upsert({
     *   create: {
     *     // ... data to create a NotificacaoConvidados
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificacaoConvidados we want to update
     *   }
     * })
     */
    upsert<T extends NotificacaoConvidadosUpsertArgs>(args: SelectSubset<T, NotificacaoConvidadosUpsertArgs<ExtArgs>>): Prisma__NotificacaoConvidadosClient<$Result.GetResult<Prisma.$NotificacaoConvidadosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificacaoConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosCountArgs} args - Arguments to filter NotificacaoConvidados to count.
     * @example
     * // Count the number of NotificacaoConvidados
     * const count = await prisma.notificacaoConvidados.count({
     *   where: {
     *     // ... the filter for the NotificacaoConvidados we want to count
     *   }
     * })
    **/
    count<T extends NotificacaoConvidadosCountArgs>(
      args?: Subset<T, NotificacaoConvidadosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificacaoConvidadosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificacaoConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificacaoConvidadosAggregateArgs>(args: Subset<T, NotificacaoConvidadosAggregateArgs>): Prisma.PrismaPromise<GetNotificacaoConvidadosAggregateType<T>>

    /**
     * Group by NotificacaoConvidados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacaoConvidadosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificacaoConvidadosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificacaoConvidadosGroupByArgs['orderBy'] }
        : { orderBy?: NotificacaoConvidadosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificacaoConvidadosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificacaoConvidadosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificacaoConvidados model
   */
  readonly fields: NotificacaoConvidadosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificacaoConvidados.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificacaoConvidadosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    convite<T extends FuncionariosConvidadosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionariosConvidadosDefaultArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notificacao<T extends NotificacaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificacaoDefaultArgs<ExtArgs>>): Prisma__NotificacaoClient<$Result.GetResult<Prisma.$NotificacaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificacaoConvidados model
   */
  interface NotificacaoConvidadosFieldRefs {
    readonly eventoId: FieldRef<"NotificacaoConvidados", 'Int'>
    readonly funcionarioId: FieldRef<"NotificacaoConvidados", 'Int'>
    readonly notificacaoId: FieldRef<"NotificacaoConvidados", 'Int'>
    readonly statusLeitura: FieldRef<"NotificacaoConvidados", 'Boolean'>
    readonly dataLeitura: FieldRef<"NotificacaoConvidados", 'DateTime'>
    readonly prioridade: FieldRef<"NotificacaoConvidados", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificacaoConvidados findUnique
   */
  export type NotificacaoConvidadosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which NotificacaoConvidados to fetch.
     */
    where: NotificacaoConvidadosWhereUniqueInput
  }

  /**
   * NotificacaoConvidados findUniqueOrThrow
   */
  export type NotificacaoConvidadosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which NotificacaoConvidados to fetch.
     */
    where: NotificacaoConvidadosWhereUniqueInput
  }

  /**
   * NotificacaoConvidados findFirst
   */
  export type NotificacaoConvidadosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which NotificacaoConvidados to fetch.
     */
    where?: NotificacaoConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificacaoConvidados to fetch.
     */
    orderBy?: NotificacaoConvidadosOrderByWithRelationInput | NotificacaoConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificacaoConvidados.
     */
    cursor?: NotificacaoConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificacaoConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificacaoConvidados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificacaoConvidados.
     */
    distinct?: NotificacaoConvidadosScalarFieldEnum | NotificacaoConvidadosScalarFieldEnum[]
  }

  /**
   * NotificacaoConvidados findFirstOrThrow
   */
  export type NotificacaoConvidadosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which NotificacaoConvidados to fetch.
     */
    where?: NotificacaoConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificacaoConvidados to fetch.
     */
    orderBy?: NotificacaoConvidadosOrderByWithRelationInput | NotificacaoConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificacaoConvidados.
     */
    cursor?: NotificacaoConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificacaoConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificacaoConvidados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificacaoConvidados.
     */
    distinct?: NotificacaoConvidadosScalarFieldEnum | NotificacaoConvidadosScalarFieldEnum[]
  }

  /**
   * NotificacaoConvidados findMany
   */
  export type NotificacaoConvidadosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * Filter, which NotificacaoConvidados to fetch.
     */
    where?: NotificacaoConvidadosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificacaoConvidados to fetch.
     */
    orderBy?: NotificacaoConvidadosOrderByWithRelationInput | NotificacaoConvidadosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificacaoConvidados.
     */
    cursor?: NotificacaoConvidadosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificacaoConvidados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificacaoConvidados.
     */
    skip?: number
    distinct?: NotificacaoConvidadosScalarFieldEnum | NotificacaoConvidadosScalarFieldEnum[]
  }

  /**
   * NotificacaoConvidados create
   */
  export type NotificacaoConvidadosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificacaoConvidados.
     */
    data: XOR<NotificacaoConvidadosCreateInput, NotificacaoConvidadosUncheckedCreateInput>
  }

  /**
   * NotificacaoConvidados createMany
   */
  export type NotificacaoConvidadosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificacaoConvidados.
     */
    data: NotificacaoConvidadosCreateManyInput | NotificacaoConvidadosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificacaoConvidados update
   */
  export type NotificacaoConvidadosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificacaoConvidados.
     */
    data: XOR<NotificacaoConvidadosUpdateInput, NotificacaoConvidadosUncheckedUpdateInput>
    /**
     * Choose, which NotificacaoConvidados to update.
     */
    where: NotificacaoConvidadosWhereUniqueInput
  }

  /**
   * NotificacaoConvidados updateMany
   */
  export type NotificacaoConvidadosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificacaoConvidados.
     */
    data: XOR<NotificacaoConvidadosUpdateManyMutationInput, NotificacaoConvidadosUncheckedUpdateManyInput>
    /**
     * Filter which NotificacaoConvidados to update
     */
    where?: NotificacaoConvidadosWhereInput
    /**
     * Limit how many NotificacaoConvidados to update.
     */
    limit?: number
  }

  /**
   * NotificacaoConvidados upsert
   */
  export type NotificacaoConvidadosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificacaoConvidados to update in case it exists.
     */
    where: NotificacaoConvidadosWhereUniqueInput
    /**
     * In case the NotificacaoConvidados found by the `where` argument doesn't exist, create a new NotificacaoConvidados with this data.
     */
    create: XOR<NotificacaoConvidadosCreateInput, NotificacaoConvidadosUncheckedCreateInput>
    /**
     * In case the NotificacaoConvidados was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificacaoConvidadosUpdateInput, NotificacaoConvidadosUncheckedUpdateInput>
  }

  /**
   * NotificacaoConvidados delete
   */
  export type NotificacaoConvidadosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
    /**
     * Filter which NotificacaoConvidados to delete.
     */
    where: NotificacaoConvidadosWhereUniqueInput
  }

  /**
   * NotificacaoConvidados deleteMany
   */
  export type NotificacaoConvidadosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificacaoConvidados to delete
     */
    where?: NotificacaoConvidadosWhereInput
    /**
     * Limit how many NotificacaoConvidados to delete.
     */
    limit?: number
  }

  /**
   * NotificacaoConvidados without action
   */
  export type NotificacaoConvidadosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificacaoConvidados
     */
    select?: NotificacaoConvidadosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificacaoConvidados
     */
    omit?: NotificacaoConvidadosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificacaoConvidadosInclude<ExtArgs> | null
  }


  /**
   * Model Presenca
   */

  export type AggregatePresenca = {
    _count: PresencaCountAggregateOutputType | null
    _avg: PresencaAvgAggregateOutputType | null
    _sum: PresencaSumAggregateOutputType | null
    _min: PresencaMinAggregateOutputType | null
    _max: PresencaMaxAggregateOutputType | null
  }

  export type PresencaAvgAggregateOutputType = {
    id: number | null
    eventoId: number | null
    funcionarioId: number | null
  }

  export type PresencaSumAggregateOutputType = {
    id: number | null
    eventoId: number | null
    funcionarioId: number | null
  }

  export type PresencaMinAggregateOutputType = {
    id: number | null
    presente: boolean | null
    razaoRecusa: string | null
    dataTermino: Date | null
    linkFeedback: string | null
    eventoId: number | null
    funcionarioId: number | null
  }

  export type PresencaMaxAggregateOutputType = {
    id: number | null
    presente: boolean | null
    razaoRecusa: string | null
    dataTermino: Date | null
    linkFeedback: string | null
    eventoId: number | null
    funcionarioId: number | null
  }

  export type PresencaCountAggregateOutputType = {
    id: number
    presente: number
    razaoRecusa: number
    dataTermino: number
    linkFeedback: number
    eventoId: number
    funcionarioId: number
    _all: number
  }


  export type PresencaAvgAggregateInputType = {
    id?: true
    eventoId?: true
    funcionarioId?: true
  }

  export type PresencaSumAggregateInputType = {
    id?: true
    eventoId?: true
    funcionarioId?: true
  }

  export type PresencaMinAggregateInputType = {
    id?: true
    presente?: true
    razaoRecusa?: true
    dataTermino?: true
    linkFeedback?: true
    eventoId?: true
    funcionarioId?: true
  }

  export type PresencaMaxAggregateInputType = {
    id?: true
    presente?: true
    razaoRecusa?: true
    dataTermino?: true
    linkFeedback?: true
    eventoId?: true
    funcionarioId?: true
  }

  export type PresencaCountAggregateInputType = {
    id?: true
    presente?: true
    razaoRecusa?: true
    dataTermino?: true
    linkFeedback?: true
    eventoId?: true
    funcionarioId?: true
    _all?: true
  }

  export type PresencaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presenca to aggregate.
     */
    where?: PresencaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presencas to fetch.
     */
    orderBy?: PresencaOrderByWithRelationInput | PresencaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PresencaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presencas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presencas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Presencas
    **/
    _count?: true | PresencaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PresencaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PresencaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PresencaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PresencaMaxAggregateInputType
  }

  export type GetPresencaAggregateType<T extends PresencaAggregateArgs> = {
        [P in keyof T & keyof AggregatePresenca]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresenca[P]>
      : GetScalarType<T[P], AggregatePresenca[P]>
  }




  export type PresencaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PresencaWhereInput
    orderBy?: PresencaOrderByWithAggregationInput | PresencaOrderByWithAggregationInput[]
    by: PresencaScalarFieldEnum[] | PresencaScalarFieldEnum
    having?: PresencaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PresencaCountAggregateInputType | true
    _avg?: PresencaAvgAggregateInputType
    _sum?: PresencaSumAggregateInputType
    _min?: PresencaMinAggregateInputType
    _max?: PresencaMaxAggregateInputType
  }

  export type PresencaGroupByOutputType = {
    id: number
    presente: boolean
    razaoRecusa: string | null
    dataTermino: Date | null
    linkFeedback: string | null
    eventoId: number
    funcionarioId: number
    _count: PresencaCountAggregateOutputType | null
    _avg: PresencaAvgAggregateOutputType | null
    _sum: PresencaSumAggregateOutputType | null
    _min: PresencaMinAggregateOutputType | null
    _max: PresencaMaxAggregateOutputType | null
  }

  type GetPresencaGroupByPayload<T extends PresencaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PresencaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PresencaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PresencaGroupByOutputType[P]>
            : GetScalarType<T[P], PresencaGroupByOutputType[P]>
        }
      >
    >


  export type PresencaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    presente?: boolean
    razaoRecusa?: boolean
    dataTermino?: boolean
    linkFeedback?: boolean
    eventoId?: boolean
    funcionarioId?: boolean
    convite?: boolean | FuncionariosConvidadosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presenca"]>



  export type PresencaSelectScalar = {
    id?: boolean
    presente?: boolean
    razaoRecusa?: boolean
    dataTermino?: boolean
    linkFeedback?: boolean
    eventoId?: boolean
    funcionarioId?: boolean
  }

  export type PresencaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "presente" | "razaoRecusa" | "dataTermino" | "linkFeedback" | "eventoId" | "funcionarioId", ExtArgs["result"]["presenca"]>
  export type PresencaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    convite?: boolean | FuncionariosConvidadosDefaultArgs<ExtArgs>
  }

  export type $PresencaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Presenca"
    objects: {
      convite: Prisma.$FuncionariosConvidadosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      presente: boolean
      razaoRecusa: string | null
      dataTermino: Date | null
      linkFeedback: string | null
      eventoId: number
      funcionarioId: number
    }, ExtArgs["result"]["presenca"]>
    composites: {}
  }

  type PresencaGetPayload<S extends boolean | null | undefined | PresencaDefaultArgs> = $Result.GetResult<Prisma.$PresencaPayload, S>

  type PresencaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PresencaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PresencaCountAggregateInputType | true
    }

  export interface PresencaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Presenca'], meta: { name: 'Presenca' } }
    /**
     * Find zero or one Presenca that matches the filter.
     * @param {PresencaFindUniqueArgs} args - Arguments to find a Presenca
     * @example
     * // Get one Presenca
     * const presenca = await prisma.presenca.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PresencaFindUniqueArgs>(args: SelectSubset<T, PresencaFindUniqueArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presenca that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PresencaFindUniqueOrThrowArgs} args - Arguments to find a Presenca
     * @example
     * // Get one Presenca
     * const presenca = await prisma.presenca.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PresencaFindUniqueOrThrowArgs>(args: SelectSubset<T, PresencaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presenca that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaFindFirstArgs} args - Arguments to find a Presenca
     * @example
     * // Get one Presenca
     * const presenca = await prisma.presenca.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PresencaFindFirstArgs>(args?: SelectSubset<T, PresencaFindFirstArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presenca that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaFindFirstOrThrowArgs} args - Arguments to find a Presenca
     * @example
     * // Get one Presenca
     * const presenca = await prisma.presenca.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PresencaFindFirstOrThrowArgs>(args?: SelectSubset<T, PresencaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presencas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presencas
     * const presencas = await prisma.presenca.findMany()
     * 
     * // Get first 10 Presencas
     * const presencas = await prisma.presenca.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presencaWithIdOnly = await prisma.presenca.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PresencaFindManyArgs>(args?: SelectSubset<T, PresencaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presenca.
     * @param {PresencaCreateArgs} args - Arguments to create a Presenca.
     * @example
     * // Create one Presenca
     * const Presenca = await prisma.presenca.create({
     *   data: {
     *     // ... data to create a Presenca
     *   }
     * })
     * 
     */
    create<T extends PresencaCreateArgs>(args: SelectSubset<T, PresencaCreateArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presencas.
     * @param {PresencaCreateManyArgs} args - Arguments to create many Presencas.
     * @example
     * // Create many Presencas
     * const presenca = await prisma.presenca.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PresencaCreateManyArgs>(args?: SelectSubset<T, PresencaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Presenca.
     * @param {PresencaDeleteArgs} args - Arguments to delete one Presenca.
     * @example
     * // Delete one Presenca
     * const Presenca = await prisma.presenca.delete({
     *   where: {
     *     // ... filter to delete one Presenca
     *   }
     * })
     * 
     */
    delete<T extends PresencaDeleteArgs>(args: SelectSubset<T, PresencaDeleteArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presenca.
     * @param {PresencaUpdateArgs} args - Arguments to update one Presenca.
     * @example
     * // Update one Presenca
     * const presenca = await prisma.presenca.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PresencaUpdateArgs>(args: SelectSubset<T, PresencaUpdateArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presencas.
     * @param {PresencaDeleteManyArgs} args - Arguments to filter Presencas to delete.
     * @example
     * // Delete a few Presencas
     * const { count } = await prisma.presenca.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PresencaDeleteManyArgs>(args?: SelectSubset<T, PresencaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presencas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presencas
     * const presenca = await prisma.presenca.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PresencaUpdateManyArgs>(args: SelectSubset<T, PresencaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Presenca.
     * @param {PresencaUpsertArgs} args - Arguments to update or create a Presenca.
     * @example
     * // Update or create a Presenca
     * const presenca = await prisma.presenca.upsert({
     *   create: {
     *     // ... data to create a Presenca
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presenca we want to update
     *   }
     * })
     */
    upsert<T extends PresencaUpsertArgs>(args: SelectSubset<T, PresencaUpsertArgs<ExtArgs>>): Prisma__PresencaClient<$Result.GetResult<Prisma.$PresencaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presencas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaCountArgs} args - Arguments to filter Presencas to count.
     * @example
     * // Count the number of Presencas
     * const count = await prisma.presenca.count({
     *   where: {
     *     // ... the filter for the Presencas we want to count
     *   }
     * })
    **/
    count<T extends PresencaCountArgs>(
      args?: Subset<T, PresencaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PresencaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presenca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PresencaAggregateArgs>(args: Subset<T, PresencaAggregateArgs>): Prisma.PrismaPromise<GetPresencaAggregateType<T>>

    /**
     * Group by Presenca.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PresencaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PresencaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PresencaGroupByArgs['orderBy'] }
        : { orderBy?: PresencaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PresencaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresencaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Presenca model
   */
  readonly fields: PresencaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Presenca.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PresencaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    convite<T extends FuncionariosConvidadosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionariosConvidadosDefaultArgs<ExtArgs>>): Prisma__FuncionariosConvidadosClient<$Result.GetResult<Prisma.$FuncionariosConvidadosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Presenca model
   */
  interface PresencaFieldRefs {
    readonly id: FieldRef<"Presenca", 'Int'>
    readonly presente: FieldRef<"Presenca", 'Boolean'>
    readonly razaoRecusa: FieldRef<"Presenca", 'String'>
    readonly dataTermino: FieldRef<"Presenca", 'DateTime'>
    readonly linkFeedback: FieldRef<"Presenca", 'String'>
    readonly eventoId: FieldRef<"Presenca", 'Int'>
    readonly funcionarioId: FieldRef<"Presenca", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Presenca findUnique
   */
  export type PresencaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * Filter, which Presenca to fetch.
     */
    where: PresencaWhereUniqueInput
  }

  /**
   * Presenca findUniqueOrThrow
   */
  export type PresencaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * Filter, which Presenca to fetch.
     */
    where: PresencaWhereUniqueInput
  }

  /**
   * Presenca findFirst
   */
  export type PresencaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * Filter, which Presenca to fetch.
     */
    where?: PresencaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presencas to fetch.
     */
    orderBy?: PresencaOrderByWithRelationInput | PresencaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presencas.
     */
    cursor?: PresencaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presencas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presencas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presencas.
     */
    distinct?: PresencaScalarFieldEnum | PresencaScalarFieldEnum[]
  }

  /**
   * Presenca findFirstOrThrow
   */
  export type PresencaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * Filter, which Presenca to fetch.
     */
    where?: PresencaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presencas to fetch.
     */
    orderBy?: PresencaOrderByWithRelationInput | PresencaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Presencas.
     */
    cursor?: PresencaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presencas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presencas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Presencas.
     */
    distinct?: PresencaScalarFieldEnum | PresencaScalarFieldEnum[]
  }

  /**
   * Presenca findMany
   */
  export type PresencaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * Filter, which Presencas to fetch.
     */
    where?: PresencaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Presencas to fetch.
     */
    orderBy?: PresencaOrderByWithRelationInput | PresencaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Presencas.
     */
    cursor?: PresencaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Presencas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Presencas.
     */
    skip?: number
    distinct?: PresencaScalarFieldEnum | PresencaScalarFieldEnum[]
  }

  /**
   * Presenca create
   */
  export type PresencaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * The data needed to create a Presenca.
     */
    data: XOR<PresencaCreateInput, PresencaUncheckedCreateInput>
  }

  /**
   * Presenca createMany
   */
  export type PresencaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Presencas.
     */
    data: PresencaCreateManyInput | PresencaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Presenca update
   */
  export type PresencaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * The data needed to update a Presenca.
     */
    data: XOR<PresencaUpdateInput, PresencaUncheckedUpdateInput>
    /**
     * Choose, which Presenca to update.
     */
    where: PresencaWhereUniqueInput
  }

  /**
   * Presenca updateMany
   */
  export type PresencaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Presencas.
     */
    data: XOR<PresencaUpdateManyMutationInput, PresencaUncheckedUpdateManyInput>
    /**
     * Filter which Presencas to update
     */
    where?: PresencaWhereInput
    /**
     * Limit how many Presencas to update.
     */
    limit?: number
  }

  /**
   * Presenca upsert
   */
  export type PresencaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * The filter to search for the Presenca to update in case it exists.
     */
    where: PresencaWhereUniqueInput
    /**
     * In case the Presenca found by the `where` argument doesn't exist, create a new Presenca with this data.
     */
    create: XOR<PresencaCreateInput, PresencaUncheckedCreateInput>
    /**
     * In case the Presenca was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PresencaUpdateInput, PresencaUncheckedUpdateInput>
  }

  /**
   * Presenca delete
   */
  export type PresencaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
    /**
     * Filter which Presenca to delete.
     */
    where: PresencaWhereUniqueInput
  }

  /**
   * Presenca deleteMany
   */
  export type PresencaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Presencas to delete
     */
    where?: PresencaWhereInput
    /**
     * Limit how many Presencas to delete.
     */
    limit?: number
  }

  /**
   * Presenca without action
   */
  export type PresencaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presenca
     */
    select?: PresencaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Presenca
     */
    omit?: PresencaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PresencaInclude<ExtArgs> | null
  }


  /**
   * Model FormTemplate
   */

  export type AggregateFormTemplate = {
    _count: FormTemplateCountAggregateOutputType | null
    _avg: FormTemplateAvgAggregateOutputType | null
    _sum: FormTemplateSumAggregateOutputType | null
    _min: FormTemplateMinAggregateOutputType | null
    _max: FormTemplateMaxAggregateOutputType | null
  }

  export type FormTemplateAvgAggregateOutputType = {
    id: number | null
    criadoPorId: number | null
  }

  export type FormTemplateSumAggregateOutputType = {
    id: number | null
    criadoPorId: number | null
  }

  export type FormTemplateMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    criadoPorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FormTemplateMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
    criadoPorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FormTemplateCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    estrutura: number
    criadoPorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FormTemplateAvgAggregateInputType = {
    id?: true
    criadoPorId?: true
  }

  export type FormTemplateSumAggregateInputType = {
    id?: true
    criadoPorId?: true
  }

  export type FormTemplateMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    criadoPorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FormTemplateMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    criadoPorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FormTemplateCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    estrutura?: true
    criadoPorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FormTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormTemplate to aggregate.
     */
    where?: FormTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTemplates to fetch.
     */
    orderBy?: FormTemplateOrderByWithRelationInput | FormTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FormTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FormTemplates
    **/
    _count?: true | FormTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FormTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FormTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FormTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FormTemplateMaxAggregateInputType
  }

  export type GetFormTemplateAggregateType<T extends FormTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateFormTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFormTemplate[P]>
      : GetScalarType<T[P], AggregateFormTemplate[P]>
  }




  export type FormTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FormTemplateWhereInput
    orderBy?: FormTemplateOrderByWithAggregationInput | FormTemplateOrderByWithAggregationInput[]
    by: FormTemplateScalarFieldEnum[] | FormTemplateScalarFieldEnum
    having?: FormTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FormTemplateCountAggregateInputType | true
    _avg?: FormTemplateAvgAggregateInputType
    _sum?: FormTemplateSumAggregateInputType
    _min?: FormTemplateMinAggregateInputType
    _max?: FormTemplateMaxAggregateInputType
  }

  export type FormTemplateGroupByOutputType = {
    id: number
    nome: string
    descricao: string | null
    estrutura: JsonValue
    criadoPorId: number
    createdAt: Date
    updatedAt: Date
    _count: FormTemplateCountAggregateOutputType | null
    _avg: FormTemplateAvgAggregateOutputType | null
    _sum: FormTemplateSumAggregateOutputType | null
    _min: FormTemplateMinAggregateOutputType | null
    _max: FormTemplateMaxAggregateOutputType | null
  }

  type GetFormTemplateGroupByPayload<T extends FormTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FormTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FormTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FormTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], FormTemplateGroupByOutputType[P]>
        }
      >
    >


  export type FormTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    estrutura?: boolean
    criadoPorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    criadoPor?: boolean | FuncionarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["formTemplate"]>



  export type FormTemplateSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
    estrutura?: boolean
    criadoPorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FormTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "descricao" | "estrutura" | "criadoPorId" | "createdAt" | "updatedAt", ExtArgs["result"]["formTemplate"]>
  export type FormTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    criadoPor?: boolean | FuncionarioDefaultArgs<ExtArgs>
  }

  export type $FormTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FormTemplate"
    objects: {
      criadoPor: Prisma.$FuncionarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string | null
      estrutura: Prisma.JsonValue
      criadoPorId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["formTemplate"]>
    composites: {}
  }

  type FormTemplateGetPayload<S extends boolean | null | undefined | FormTemplateDefaultArgs> = $Result.GetResult<Prisma.$FormTemplatePayload, S>

  type FormTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FormTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FormTemplateCountAggregateInputType | true
    }

  export interface FormTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FormTemplate'], meta: { name: 'FormTemplate' } }
    /**
     * Find zero or one FormTemplate that matches the filter.
     * @param {FormTemplateFindUniqueArgs} args - Arguments to find a FormTemplate
     * @example
     * // Get one FormTemplate
     * const formTemplate = await prisma.formTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FormTemplateFindUniqueArgs>(args: SelectSubset<T, FormTemplateFindUniqueArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FormTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FormTemplateFindUniqueOrThrowArgs} args - Arguments to find a FormTemplate
     * @example
     * // Get one FormTemplate
     * const formTemplate = await prisma.formTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FormTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, FormTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FormTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateFindFirstArgs} args - Arguments to find a FormTemplate
     * @example
     * // Get one FormTemplate
     * const formTemplate = await prisma.formTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FormTemplateFindFirstArgs>(args?: SelectSubset<T, FormTemplateFindFirstArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FormTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateFindFirstOrThrowArgs} args - Arguments to find a FormTemplate
     * @example
     * // Get one FormTemplate
     * const formTemplate = await prisma.formTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FormTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, FormTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FormTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FormTemplates
     * const formTemplates = await prisma.formTemplate.findMany()
     * 
     * // Get first 10 FormTemplates
     * const formTemplates = await prisma.formTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const formTemplateWithIdOnly = await prisma.formTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FormTemplateFindManyArgs>(args?: SelectSubset<T, FormTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FormTemplate.
     * @param {FormTemplateCreateArgs} args - Arguments to create a FormTemplate.
     * @example
     * // Create one FormTemplate
     * const FormTemplate = await prisma.formTemplate.create({
     *   data: {
     *     // ... data to create a FormTemplate
     *   }
     * })
     * 
     */
    create<T extends FormTemplateCreateArgs>(args: SelectSubset<T, FormTemplateCreateArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FormTemplates.
     * @param {FormTemplateCreateManyArgs} args - Arguments to create many FormTemplates.
     * @example
     * // Create many FormTemplates
     * const formTemplate = await prisma.formTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FormTemplateCreateManyArgs>(args?: SelectSubset<T, FormTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FormTemplate.
     * @param {FormTemplateDeleteArgs} args - Arguments to delete one FormTemplate.
     * @example
     * // Delete one FormTemplate
     * const FormTemplate = await prisma.formTemplate.delete({
     *   where: {
     *     // ... filter to delete one FormTemplate
     *   }
     * })
     * 
     */
    delete<T extends FormTemplateDeleteArgs>(args: SelectSubset<T, FormTemplateDeleteArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FormTemplate.
     * @param {FormTemplateUpdateArgs} args - Arguments to update one FormTemplate.
     * @example
     * // Update one FormTemplate
     * const formTemplate = await prisma.formTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FormTemplateUpdateArgs>(args: SelectSubset<T, FormTemplateUpdateArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FormTemplates.
     * @param {FormTemplateDeleteManyArgs} args - Arguments to filter FormTemplates to delete.
     * @example
     * // Delete a few FormTemplates
     * const { count } = await prisma.formTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FormTemplateDeleteManyArgs>(args?: SelectSubset<T, FormTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FormTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FormTemplates
     * const formTemplate = await prisma.formTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FormTemplateUpdateManyArgs>(args: SelectSubset<T, FormTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FormTemplate.
     * @param {FormTemplateUpsertArgs} args - Arguments to update or create a FormTemplate.
     * @example
     * // Update or create a FormTemplate
     * const formTemplate = await prisma.formTemplate.upsert({
     *   create: {
     *     // ... data to create a FormTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FormTemplate we want to update
     *   }
     * })
     */
    upsert<T extends FormTemplateUpsertArgs>(args: SelectSubset<T, FormTemplateUpsertArgs<ExtArgs>>): Prisma__FormTemplateClient<$Result.GetResult<Prisma.$FormTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FormTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateCountArgs} args - Arguments to filter FormTemplates to count.
     * @example
     * // Count the number of FormTemplates
     * const count = await prisma.formTemplate.count({
     *   where: {
     *     // ... the filter for the FormTemplates we want to count
     *   }
     * })
    **/
    count<T extends FormTemplateCountArgs>(
      args?: Subset<T, FormTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FormTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FormTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FormTemplateAggregateArgs>(args: Subset<T, FormTemplateAggregateArgs>): Prisma.PrismaPromise<GetFormTemplateAggregateType<T>>

    /**
     * Group by FormTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FormTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FormTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FormTemplateGroupByArgs['orderBy'] }
        : { orderBy?: FormTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FormTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFormTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FormTemplate model
   */
  readonly fields: FormTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FormTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FormTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    criadoPor<T extends FuncionarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FuncionarioDefaultArgs<ExtArgs>>): Prisma__FuncionarioClient<$Result.GetResult<Prisma.$FuncionarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FormTemplate model
   */
  interface FormTemplateFieldRefs {
    readonly id: FieldRef<"FormTemplate", 'Int'>
    readonly nome: FieldRef<"FormTemplate", 'String'>
    readonly descricao: FieldRef<"FormTemplate", 'String'>
    readonly estrutura: FieldRef<"FormTemplate", 'Json'>
    readonly criadoPorId: FieldRef<"FormTemplate", 'Int'>
    readonly createdAt: FieldRef<"FormTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"FormTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FormTemplate findUnique
   */
  export type FormTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * Filter, which FormTemplate to fetch.
     */
    where: FormTemplateWhereUniqueInput
  }

  /**
   * FormTemplate findUniqueOrThrow
   */
  export type FormTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * Filter, which FormTemplate to fetch.
     */
    where: FormTemplateWhereUniqueInput
  }

  /**
   * FormTemplate findFirst
   */
  export type FormTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * Filter, which FormTemplate to fetch.
     */
    where?: FormTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTemplates to fetch.
     */
    orderBy?: FormTemplateOrderByWithRelationInput | FormTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormTemplates.
     */
    cursor?: FormTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormTemplates.
     */
    distinct?: FormTemplateScalarFieldEnum | FormTemplateScalarFieldEnum[]
  }

  /**
   * FormTemplate findFirstOrThrow
   */
  export type FormTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * Filter, which FormTemplate to fetch.
     */
    where?: FormTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTemplates to fetch.
     */
    orderBy?: FormTemplateOrderByWithRelationInput | FormTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FormTemplates.
     */
    cursor?: FormTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FormTemplates.
     */
    distinct?: FormTemplateScalarFieldEnum | FormTemplateScalarFieldEnum[]
  }

  /**
   * FormTemplate findMany
   */
  export type FormTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * Filter, which FormTemplates to fetch.
     */
    where?: FormTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FormTemplates to fetch.
     */
    orderBy?: FormTemplateOrderByWithRelationInput | FormTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FormTemplates.
     */
    cursor?: FormTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FormTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FormTemplates.
     */
    skip?: number
    distinct?: FormTemplateScalarFieldEnum | FormTemplateScalarFieldEnum[]
  }

  /**
   * FormTemplate create
   */
  export type FormTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a FormTemplate.
     */
    data: XOR<FormTemplateCreateInput, FormTemplateUncheckedCreateInput>
  }

  /**
   * FormTemplate createMany
   */
  export type FormTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FormTemplates.
     */
    data: FormTemplateCreateManyInput | FormTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FormTemplate update
   */
  export type FormTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a FormTemplate.
     */
    data: XOR<FormTemplateUpdateInput, FormTemplateUncheckedUpdateInput>
    /**
     * Choose, which FormTemplate to update.
     */
    where: FormTemplateWhereUniqueInput
  }

  /**
   * FormTemplate updateMany
   */
  export type FormTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FormTemplates.
     */
    data: XOR<FormTemplateUpdateManyMutationInput, FormTemplateUncheckedUpdateManyInput>
    /**
     * Filter which FormTemplates to update
     */
    where?: FormTemplateWhereInput
    /**
     * Limit how many FormTemplates to update.
     */
    limit?: number
  }

  /**
   * FormTemplate upsert
   */
  export type FormTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the FormTemplate to update in case it exists.
     */
    where: FormTemplateWhereUniqueInput
    /**
     * In case the FormTemplate found by the `where` argument doesn't exist, create a new FormTemplate with this data.
     */
    create: XOR<FormTemplateCreateInput, FormTemplateUncheckedCreateInput>
    /**
     * In case the FormTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FormTemplateUpdateInput, FormTemplateUncheckedUpdateInput>
  }

  /**
   * FormTemplate delete
   */
  export type FormTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
    /**
     * Filter which FormTemplate to delete.
     */
    where: FormTemplateWhereUniqueInput
  }

  /**
   * FormTemplate deleteMany
   */
  export type FormTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FormTemplates to delete
     */
    where?: FormTemplateWhereInput
    /**
     * Limit how many FormTemplates to delete.
     */
    limit?: number
  }

  /**
   * FormTemplate without action
   */
  export type FormTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FormTemplate
     */
    select?: FormTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FormTemplate
     */
    omit?: FormTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FormTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Candidato
   */

  export type AggregateCandidato = {
    _count: CandidatoCountAggregateOutputType | null
    _avg: CandidatoAvgAggregateOutputType | null
    _sum: CandidatoSumAggregateOutputType | null
    _min: CandidatoMinAggregateOutputType | null
    _max: CandidatoMaxAggregateOutputType | null
  }

  export type CandidatoAvgAggregateOutputType = {
    id: number | null
  }

  export type CandidatoSumAggregateOutputType = {
    id: number | null
  }

  export type CandidatoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    dataNascimento: Date | null
    genero: string | null
    telefone: string | null
    cpf: string | null
    estado: string | null
    cidade: string | null
    bairro: string | null
    rua: string | null
    numero: string | null
    cep: string | null
    complemento: string | null
    email: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CandidatoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    dataNascimento: Date | null
    genero: string | null
    telefone: string | null
    cpf: string | null
    estado: string | null
    cidade: string | null
    bairro: string | null
    rua: string | null
    numero: string | null
    cep: string | null
    complemento: string | null
    email: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CandidatoCountAggregateOutputType = {
    id: number
    nome: number
    dataNascimento: number
    genero: number
    telefone: number
    cpf: number
    estado: number
    cidade: number
    bairro: number
    rua: number
    numero: number
    cep: number
    complemento: number
    email: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CandidatoAvgAggregateInputType = {
    id?: true
  }

  export type CandidatoSumAggregateInputType = {
    id?: true
  }

  export type CandidatoMinAggregateInputType = {
    id?: true
    nome?: true
    dataNascimento?: true
    genero?: true
    telefone?: true
    cpf?: true
    estado?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    cep?: true
    complemento?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CandidatoMaxAggregateInputType = {
    id?: true
    nome?: true
    dataNascimento?: true
    genero?: true
    telefone?: true
    cpf?: true
    estado?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    cep?: true
    complemento?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CandidatoCountAggregateInputType = {
    id?: true
    nome?: true
    dataNascimento?: true
    genero?: true
    telefone?: true
    cpf?: true
    estado?: true
    cidade?: true
    bairro?: true
    rua?: true
    numero?: true
    cep?: true
    complemento?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CandidatoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidato to aggregate.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidatoes
    **/
    _count?: true | CandidatoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidatoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidatoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidatoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidatoMaxAggregateInputType
  }

  export type GetCandidatoAggregateType<T extends CandidatoAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidato[P]>
      : GetScalarType<T[P], AggregateCandidato[P]>
  }




  export type CandidatoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidatoWhereInput
    orderBy?: CandidatoOrderByWithAggregationInput | CandidatoOrderByWithAggregationInput[]
    by: CandidatoScalarFieldEnum[] | CandidatoScalarFieldEnum
    having?: CandidatoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidatoCountAggregateInputType | true
    _avg?: CandidatoAvgAggregateInputType
    _sum?: CandidatoSumAggregateInputType
    _min?: CandidatoMinAggregateInputType
    _max?: CandidatoMaxAggregateInputType
  }

  export type CandidatoGroupByOutputType = {
    id: number
    nome: string
    dataNascimento: Date
    genero: string
    telefone: string
    cpf: string
    estado: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    cep: string
    complemento: string | null
    email: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: CandidatoCountAggregateOutputType | null
    _avg: CandidatoAvgAggregateOutputType | null
    _sum: CandidatoSumAggregateOutputType | null
    _min: CandidatoMinAggregateOutputType | null
    _max: CandidatoMaxAggregateOutputType | null
  }

  type GetCandidatoGroupByPayload<T extends CandidatoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidatoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidatoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidatoGroupByOutputType[P]>
            : GetScalarType<T[P], CandidatoGroupByOutputType[P]>
        }
      >
    >


  export type CandidatoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    dataNascimento?: boolean
    genero?: boolean
    telefone?: boolean
    cpf?: boolean
    estado?: boolean
    cidade?: boolean
    bairro?: boolean
    rua?: boolean
    numero?: boolean
    cep?: boolean
    complemento?: boolean
    email?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    arquivos?: boolean | Candidato$arquivosArgs<ExtArgs>
    _count?: boolean | CandidatoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidato"]>



  export type CandidatoSelectScalar = {
    id?: boolean
    nome?: boolean
    dataNascimento?: boolean
    genero?: boolean
    telefone?: boolean
    cpf?: boolean
    estado?: boolean
    cidade?: boolean
    bairro?: boolean
    rua?: boolean
    numero?: boolean
    cep?: boolean
    complemento?: boolean
    email?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CandidatoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "dataNascimento" | "genero" | "telefone" | "cpf" | "estado" | "cidade" | "bairro" | "rua" | "numero" | "cep" | "complemento" | "email" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["candidato"]>
  export type CandidatoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arquivos?: boolean | Candidato$arquivosArgs<ExtArgs>
    _count?: boolean | CandidatoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CandidatoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidato"
    objects: {
      arquivos: Prisma.$ArquivoCandidatoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      dataNascimento: Date
      genero: string
      telefone: string
      cpf: string
      estado: string
      cidade: string
      bairro: string
      rua: string
      numero: string
      cep: string
      complemento: string | null
      email: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["candidato"]>
    composites: {}
  }

  type CandidatoGetPayload<S extends boolean | null | undefined | CandidatoDefaultArgs> = $Result.GetResult<Prisma.$CandidatoPayload, S>

  type CandidatoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidatoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidatoCountAggregateInputType | true
    }

  export interface CandidatoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidato'], meta: { name: 'Candidato' } }
    /**
     * Find zero or one Candidato that matches the filter.
     * @param {CandidatoFindUniqueArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidatoFindUniqueArgs>(args: SelectSubset<T, CandidatoFindUniqueArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Candidato that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidatoFindUniqueOrThrowArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidatoFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidatoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindFirstArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidatoFindFirstArgs>(args?: SelectSubset<T, CandidatoFindFirstArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidato that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindFirstOrThrowArgs} args - Arguments to find a Candidato
     * @example
     * // Get one Candidato
     * const candidato = await prisma.candidato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidatoFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidatoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Candidatoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidatoes
     * const candidatoes = await prisma.candidato.findMany()
     * 
     * // Get first 10 Candidatoes
     * const candidatoes = await prisma.candidato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidatoWithIdOnly = await prisma.candidato.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidatoFindManyArgs>(args?: SelectSubset<T, CandidatoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Candidato.
     * @param {CandidatoCreateArgs} args - Arguments to create a Candidato.
     * @example
     * // Create one Candidato
     * const Candidato = await prisma.candidato.create({
     *   data: {
     *     // ... data to create a Candidato
     *   }
     * })
     * 
     */
    create<T extends CandidatoCreateArgs>(args: SelectSubset<T, CandidatoCreateArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Candidatoes.
     * @param {CandidatoCreateManyArgs} args - Arguments to create many Candidatoes.
     * @example
     * // Create many Candidatoes
     * const candidato = await prisma.candidato.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidatoCreateManyArgs>(args?: SelectSubset<T, CandidatoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Candidato.
     * @param {CandidatoDeleteArgs} args - Arguments to delete one Candidato.
     * @example
     * // Delete one Candidato
     * const Candidato = await prisma.candidato.delete({
     *   where: {
     *     // ... filter to delete one Candidato
     *   }
     * })
     * 
     */
    delete<T extends CandidatoDeleteArgs>(args: SelectSubset<T, CandidatoDeleteArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Candidato.
     * @param {CandidatoUpdateArgs} args - Arguments to update one Candidato.
     * @example
     * // Update one Candidato
     * const candidato = await prisma.candidato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidatoUpdateArgs>(args: SelectSubset<T, CandidatoUpdateArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Candidatoes.
     * @param {CandidatoDeleteManyArgs} args - Arguments to filter Candidatoes to delete.
     * @example
     * // Delete a few Candidatoes
     * const { count } = await prisma.candidato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidatoDeleteManyArgs>(args?: SelectSubset<T, CandidatoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidatoes
     * const candidato = await prisma.candidato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidatoUpdateManyArgs>(args: SelectSubset<T, CandidatoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Candidato.
     * @param {CandidatoUpsertArgs} args - Arguments to update or create a Candidato.
     * @example
     * // Update or create a Candidato
     * const candidato = await prisma.candidato.upsert({
     *   create: {
     *     // ... data to create a Candidato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidato we want to update
     *   }
     * })
     */
    upsert<T extends CandidatoUpsertArgs>(args: SelectSubset<T, CandidatoUpsertArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Candidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoCountArgs} args - Arguments to filter Candidatoes to count.
     * @example
     * // Count the number of Candidatoes
     * const count = await prisma.candidato.count({
     *   where: {
     *     // ... the filter for the Candidatoes we want to count
     *   }
     * })
    **/
    count<T extends CandidatoCountArgs>(
      args?: Subset<T, CandidatoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidatoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidatoAggregateArgs>(args: Subset<T, CandidatoAggregateArgs>): Prisma.PrismaPromise<GetCandidatoAggregateType<T>>

    /**
     * Group by Candidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidatoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidatoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidatoGroupByArgs['orderBy'] }
        : { orderBy?: CandidatoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidatoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidatoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidato model
   */
  readonly fields: CandidatoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidatoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arquivos<T extends Candidato$arquivosArgs<ExtArgs> = {}>(args?: Subset<T, Candidato$arquivosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Candidato model
   */
  interface CandidatoFieldRefs {
    readonly id: FieldRef<"Candidato", 'Int'>
    readonly nome: FieldRef<"Candidato", 'String'>
    readonly dataNascimento: FieldRef<"Candidato", 'DateTime'>
    readonly genero: FieldRef<"Candidato", 'String'>
    readonly telefone: FieldRef<"Candidato", 'String'>
    readonly cpf: FieldRef<"Candidato", 'String'>
    readonly estado: FieldRef<"Candidato", 'String'>
    readonly cidade: FieldRef<"Candidato", 'String'>
    readonly bairro: FieldRef<"Candidato", 'String'>
    readonly rua: FieldRef<"Candidato", 'String'>
    readonly numero: FieldRef<"Candidato", 'String'>
    readonly cep: FieldRef<"Candidato", 'String'>
    readonly complemento: FieldRef<"Candidato", 'String'>
    readonly email: FieldRef<"Candidato", 'String'>
    readonly status: FieldRef<"Candidato", 'String'>
    readonly createdAt: FieldRef<"Candidato", 'DateTime'>
    readonly updatedAt: FieldRef<"Candidato", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Candidato findUnique
   */
  export type CandidatoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where: CandidatoWhereUniqueInput
  }

  /**
   * Candidato findUniqueOrThrow
   */
  export type CandidatoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where: CandidatoWhereUniqueInput
  }

  /**
   * Candidato findFirst
   */
  export type CandidatoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidatoes.
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidatoes.
     */
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }

  /**
   * Candidato findFirstOrThrow
   */
  export type CandidatoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidato to fetch.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidatoes.
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidatoes.
     */
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }

  /**
   * Candidato findMany
   */
  export type CandidatoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter, which Candidatoes to fetch.
     */
    where?: CandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidatoes to fetch.
     */
    orderBy?: CandidatoOrderByWithRelationInput | CandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidatoes.
     */
    cursor?: CandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidatoes.
     */
    skip?: number
    distinct?: CandidatoScalarFieldEnum | CandidatoScalarFieldEnum[]
  }

  /**
   * Candidato create
   */
  export type CandidatoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidato.
     */
    data: XOR<CandidatoCreateInput, CandidatoUncheckedCreateInput>
  }

  /**
   * Candidato createMany
   */
  export type CandidatoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidatoes.
     */
    data: CandidatoCreateManyInput | CandidatoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidato update
   */
  export type CandidatoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidato.
     */
    data: XOR<CandidatoUpdateInput, CandidatoUncheckedUpdateInput>
    /**
     * Choose, which Candidato to update.
     */
    where: CandidatoWhereUniqueInput
  }

  /**
   * Candidato updateMany
   */
  export type CandidatoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidatoes.
     */
    data: XOR<CandidatoUpdateManyMutationInput, CandidatoUncheckedUpdateManyInput>
    /**
     * Filter which Candidatoes to update
     */
    where?: CandidatoWhereInput
    /**
     * Limit how many Candidatoes to update.
     */
    limit?: number
  }

  /**
   * Candidato upsert
   */
  export type CandidatoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidato to update in case it exists.
     */
    where: CandidatoWhereUniqueInput
    /**
     * In case the Candidato found by the `where` argument doesn't exist, create a new Candidato with this data.
     */
    create: XOR<CandidatoCreateInput, CandidatoUncheckedCreateInput>
    /**
     * In case the Candidato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidatoUpdateInput, CandidatoUncheckedUpdateInput>
  }

  /**
   * Candidato delete
   */
  export type CandidatoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
    /**
     * Filter which Candidato to delete.
     */
    where: CandidatoWhereUniqueInput
  }

  /**
   * Candidato deleteMany
   */
  export type CandidatoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidatoes to delete
     */
    where?: CandidatoWhereInput
    /**
     * Limit how many Candidatoes to delete.
     */
    limit?: number
  }

  /**
   * Candidato.arquivos
   */
  export type Candidato$arquivosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    where?: ArquivoCandidatoWhereInput
    orderBy?: ArquivoCandidatoOrderByWithRelationInput | ArquivoCandidatoOrderByWithRelationInput[]
    cursor?: ArquivoCandidatoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArquivoCandidatoScalarFieldEnum | ArquivoCandidatoScalarFieldEnum[]
  }

  /**
   * Candidato without action
   */
  export type CandidatoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidato
     */
    select?: CandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidato
     */
    omit?: CandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidatoInclude<ExtArgs> | null
  }


  /**
   * Model ArquivoCandidato
   */

  export type AggregateArquivoCandidato = {
    _count: ArquivoCandidatoCountAggregateOutputType | null
    _avg: ArquivoCandidatoAvgAggregateOutputType | null
    _sum: ArquivoCandidatoSumAggregateOutputType | null
    _min: ArquivoCandidatoMinAggregateOutputType | null
    _max: ArquivoCandidatoMaxAggregateOutputType | null
  }

  export type ArquivoCandidatoAvgAggregateOutputType = {
    id: number | null
    candidatoId: number | null
  }

  export type ArquivoCandidatoSumAggregateOutputType = {
    id: number | null
    candidatoId: number | null
  }

  export type ArquivoCandidatoMinAggregateOutputType = {
    id: number | null
    nomeArquivo: string | null
    campoOriginal: string | null
    candidatoId: number | null
  }

  export type ArquivoCandidatoMaxAggregateOutputType = {
    id: number | null
    nomeArquivo: string | null
    campoOriginal: string | null
    candidatoId: number | null
  }

  export type ArquivoCandidatoCountAggregateOutputType = {
    id: number
    nomeArquivo: number
    campoOriginal: number
    candidatoId: number
    _all: number
  }


  export type ArquivoCandidatoAvgAggregateInputType = {
    id?: true
    candidatoId?: true
  }

  export type ArquivoCandidatoSumAggregateInputType = {
    id?: true
    candidatoId?: true
  }

  export type ArquivoCandidatoMinAggregateInputType = {
    id?: true
    nomeArquivo?: true
    campoOriginal?: true
    candidatoId?: true
  }

  export type ArquivoCandidatoMaxAggregateInputType = {
    id?: true
    nomeArquivo?: true
    campoOriginal?: true
    candidatoId?: true
  }

  export type ArquivoCandidatoCountAggregateInputType = {
    id?: true
    nomeArquivo?: true
    campoOriginal?: true
    candidatoId?: true
    _all?: true
  }

  export type ArquivoCandidatoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArquivoCandidato to aggregate.
     */
    where?: ArquivoCandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArquivoCandidatoes to fetch.
     */
    orderBy?: ArquivoCandidatoOrderByWithRelationInput | ArquivoCandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArquivoCandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArquivoCandidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArquivoCandidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ArquivoCandidatoes
    **/
    _count?: true | ArquivoCandidatoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArquivoCandidatoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArquivoCandidatoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArquivoCandidatoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArquivoCandidatoMaxAggregateInputType
  }

  export type GetArquivoCandidatoAggregateType<T extends ArquivoCandidatoAggregateArgs> = {
        [P in keyof T & keyof AggregateArquivoCandidato]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArquivoCandidato[P]>
      : GetScalarType<T[P], AggregateArquivoCandidato[P]>
  }




  export type ArquivoCandidatoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArquivoCandidatoWhereInput
    orderBy?: ArquivoCandidatoOrderByWithAggregationInput | ArquivoCandidatoOrderByWithAggregationInput[]
    by: ArquivoCandidatoScalarFieldEnum[] | ArquivoCandidatoScalarFieldEnum
    having?: ArquivoCandidatoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArquivoCandidatoCountAggregateInputType | true
    _avg?: ArquivoCandidatoAvgAggregateInputType
    _sum?: ArquivoCandidatoSumAggregateInputType
    _min?: ArquivoCandidatoMinAggregateInputType
    _max?: ArquivoCandidatoMaxAggregateInputType
  }

  export type ArquivoCandidatoGroupByOutputType = {
    id: number
    nomeArquivo: string
    campoOriginal: string
    candidatoId: number
    _count: ArquivoCandidatoCountAggregateOutputType | null
    _avg: ArquivoCandidatoAvgAggregateOutputType | null
    _sum: ArquivoCandidatoSumAggregateOutputType | null
    _min: ArquivoCandidatoMinAggregateOutputType | null
    _max: ArquivoCandidatoMaxAggregateOutputType | null
  }

  type GetArquivoCandidatoGroupByPayload<T extends ArquivoCandidatoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArquivoCandidatoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArquivoCandidatoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArquivoCandidatoGroupByOutputType[P]>
            : GetScalarType<T[P], ArquivoCandidatoGroupByOutputType[P]>
        }
      >
    >


  export type ArquivoCandidatoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nomeArquivo?: boolean
    campoOriginal?: boolean
    candidatoId?: boolean
    candidato?: boolean | CandidatoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arquivoCandidato"]>



  export type ArquivoCandidatoSelectScalar = {
    id?: boolean
    nomeArquivo?: boolean
    campoOriginal?: boolean
    candidatoId?: boolean
  }

  export type ArquivoCandidatoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nomeArquivo" | "campoOriginal" | "candidatoId", ExtArgs["result"]["arquivoCandidato"]>
  export type ArquivoCandidatoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidato?: boolean | CandidatoDefaultArgs<ExtArgs>
  }

  export type $ArquivoCandidatoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ArquivoCandidato"
    objects: {
      candidato: Prisma.$CandidatoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nomeArquivo: string
      campoOriginal: string
      candidatoId: number
    }, ExtArgs["result"]["arquivoCandidato"]>
    composites: {}
  }

  type ArquivoCandidatoGetPayload<S extends boolean | null | undefined | ArquivoCandidatoDefaultArgs> = $Result.GetResult<Prisma.$ArquivoCandidatoPayload, S>

  type ArquivoCandidatoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArquivoCandidatoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArquivoCandidatoCountAggregateInputType | true
    }

  export interface ArquivoCandidatoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ArquivoCandidato'], meta: { name: 'ArquivoCandidato' } }
    /**
     * Find zero or one ArquivoCandidato that matches the filter.
     * @param {ArquivoCandidatoFindUniqueArgs} args - Arguments to find a ArquivoCandidato
     * @example
     * // Get one ArquivoCandidato
     * const arquivoCandidato = await prisma.arquivoCandidato.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArquivoCandidatoFindUniqueArgs>(args: SelectSubset<T, ArquivoCandidatoFindUniqueArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ArquivoCandidato that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArquivoCandidatoFindUniqueOrThrowArgs} args - Arguments to find a ArquivoCandidato
     * @example
     * // Get one ArquivoCandidato
     * const arquivoCandidato = await prisma.arquivoCandidato.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArquivoCandidatoFindUniqueOrThrowArgs>(args: SelectSubset<T, ArquivoCandidatoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArquivoCandidato that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoFindFirstArgs} args - Arguments to find a ArquivoCandidato
     * @example
     * // Get one ArquivoCandidato
     * const arquivoCandidato = await prisma.arquivoCandidato.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArquivoCandidatoFindFirstArgs>(args?: SelectSubset<T, ArquivoCandidatoFindFirstArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ArquivoCandidato that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoFindFirstOrThrowArgs} args - Arguments to find a ArquivoCandidato
     * @example
     * // Get one ArquivoCandidato
     * const arquivoCandidato = await prisma.arquivoCandidato.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArquivoCandidatoFindFirstOrThrowArgs>(args?: SelectSubset<T, ArquivoCandidatoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ArquivoCandidatoes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ArquivoCandidatoes
     * const arquivoCandidatoes = await prisma.arquivoCandidato.findMany()
     * 
     * // Get first 10 ArquivoCandidatoes
     * const arquivoCandidatoes = await prisma.arquivoCandidato.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const arquivoCandidatoWithIdOnly = await prisma.arquivoCandidato.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArquivoCandidatoFindManyArgs>(args?: SelectSubset<T, ArquivoCandidatoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ArquivoCandidato.
     * @param {ArquivoCandidatoCreateArgs} args - Arguments to create a ArquivoCandidato.
     * @example
     * // Create one ArquivoCandidato
     * const ArquivoCandidato = await prisma.arquivoCandidato.create({
     *   data: {
     *     // ... data to create a ArquivoCandidato
     *   }
     * })
     * 
     */
    create<T extends ArquivoCandidatoCreateArgs>(args: SelectSubset<T, ArquivoCandidatoCreateArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ArquivoCandidatoes.
     * @param {ArquivoCandidatoCreateManyArgs} args - Arguments to create many ArquivoCandidatoes.
     * @example
     * // Create many ArquivoCandidatoes
     * const arquivoCandidato = await prisma.arquivoCandidato.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArquivoCandidatoCreateManyArgs>(args?: SelectSubset<T, ArquivoCandidatoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ArquivoCandidato.
     * @param {ArquivoCandidatoDeleteArgs} args - Arguments to delete one ArquivoCandidato.
     * @example
     * // Delete one ArquivoCandidato
     * const ArquivoCandidato = await prisma.arquivoCandidato.delete({
     *   where: {
     *     // ... filter to delete one ArquivoCandidato
     *   }
     * })
     * 
     */
    delete<T extends ArquivoCandidatoDeleteArgs>(args: SelectSubset<T, ArquivoCandidatoDeleteArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ArquivoCandidato.
     * @param {ArquivoCandidatoUpdateArgs} args - Arguments to update one ArquivoCandidato.
     * @example
     * // Update one ArquivoCandidato
     * const arquivoCandidato = await prisma.arquivoCandidato.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArquivoCandidatoUpdateArgs>(args: SelectSubset<T, ArquivoCandidatoUpdateArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ArquivoCandidatoes.
     * @param {ArquivoCandidatoDeleteManyArgs} args - Arguments to filter ArquivoCandidatoes to delete.
     * @example
     * // Delete a few ArquivoCandidatoes
     * const { count } = await prisma.arquivoCandidato.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArquivoCandidatoDeleteManyArgs>(args?: SelectSubset<T, ArquivoCandidatoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ArquivoCandidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ArquivoCandidatoes
     * const arquivoCandidato = await prisma.arquivoCandidato.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArquivoCandidatoUpdateManyArgs>(args: SelectSubset<T, ArquivoCandidatoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ArquivoCandidato.
     * @param {ArquivoCandidatoUpsertArgs} args - Arguments to update or create a ArquivoCandidato.
     * @example
     * // Update or create a ArquivoCandidato
     * const arquivoCandidato = await prisma.arquivoCandidato.upsert({
     *   create: {
     *     // ... data to create a ArquivoCandidato
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ArquivoCandidato we want to update
     *   }
     * })
     */
    upsert<T extends ArquivoCandidatoUpsertArgs>(args: SelectSubset<T, ArquivoCandidatoUpsertArgs<ExtArgs>>): Prisma__ArquivoCandidatoClient<$Result.GetResult<Prisma.$ArquivoCandidatoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ArquivoCandidatoes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoCountArgs} args - Arguments to filter ArquivoCandidatoes to count.
     * @example
     * // Count the number of ArquivoCandidatoes
     * const count = await prisma.arquivoCandidato.count({
     *   where: {
     *     // ... the filter for the ArquivoCandidatoes we want to count
     *   }
     * })
    **/
    count<T extends ArquivoCandidatoCountArgs>(
      args?: Subset<T, ArquivoCandidatoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArquivoCandidatoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ArquivoCandidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArquivoCandidatoAggregateArgs>(args: Subset<T, ArquivoCandidatoAggregateArgs>): Prisma.PrismaPromise<GetArquivoCandidatoAggregateType<T>>

    /**
     * Group by ArquivoCandidato.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArquivoCandidatoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArquivoCandidatoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArquivoCandidatoGroupByArgs['orderBy'] }
        : { orderBy?: ArquivoCandidatoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArquivoCandidatoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArquivoCandidatoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ArquivoCandidato model
   */
  readonly fields: ArquivoCandidatoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ArquivoCandidato.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArquivoCandidatoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidato<T extends CandidatoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidatoDefaultArgs<ExtArgs>>): Prisma__CandidatoClient<$Result.GetResult<Prisma.$CandidatoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ArquivoCandidato model
   */
  interface ArquivoCandidatoFieldRefs {
    readonly id: FieldRef<"ArquivoCandidato", 'Int'>
    readonly nomeArquivo: FieldRef<"ArquivoCandidato", 'String'>
    readonly campoOriginal: FieldRef<"ArquivoCandidato", 'String'>
    readonly candidatoId: FieldRef<"ArquivoCandidato", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ArquivoCandidato findUnique
   */
  export type ArquivoCandidatoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * Filter, which ArquivoCandidato to fetch.
     */
    where: ArquivoCandidatoWhereUniqueInput
  }

  /**
   * ArquivoCandidato findUniqueOrThrow
   */
  export type ArquivoCandidatoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * Filter, which ArquivoCandidato to fetch.
     */
    where: ArquivoCandidatoWhereUniqueInput
  }

  /**
   * ArquivoCandidato findFirst
   */
  export type ArquivoCandidatoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * Filter, which ArquivoCandidato to fetch.
     */
    where?: ArquivoCandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArquivoCandidatoes to fetch.
     */
    orderBy?: ArquivoCandidatoOrderByWithRelationInput | ArquivoCandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArquivoCandidatoes.
     */
    cursor?: ArquivoCandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArquivoCandidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArquivoCandidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArquivoCandidatoes.
     */
    distinct?: ArquivoCandidatoScalarFieldEnum | ArquivoCandidatoScalarFieldEnum[]
  }

  /**
   * ArquivoCandidato findFirstOrThrow
   */
  export type ArquivoCandidatoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * Filter, which ArquivoCandidato to fetch.
     */
    where?: ArquivoCandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArquivoCandidatoes to fetch.
     */
    orderBy?: ArquivoCandidatoOrderByWithRelationInput | ArquivoCandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ArquivoCandidatoes.
     */
    cursor?: ArquivoCandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArquivoCandidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArquivoCandidatoes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ArquivoCandidatoes.
     */
    distinct?: ArquivoCandidatoScalarFieldEnum | ArquivoCandidatoScalarFieldEnum[]
  }

  /**
   * ArquivoCandidato findMany
   */
  export type ArquivoCandidatoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * Filter, which ArquivoCandidatoes to fetch.
     */
    where?: ArquivoCandidatoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ArquivoCandidatoes to fetch.
     */
    orderBy?: ArquivoCandidatoOrderByWithRelationInput | ArquivoCandidatoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ArquivoCandidatoes.
     */
    cursor?: ArquivoCandidatoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ArquivoCandidatoes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ArquivoCandidatoes.
     */
    skip?: number
    distinct?: ArquivoCandidatoScalarFieldEnum | ArquivoCandidatoScalarFieldEnum[]
  }

  /**
   * ArquivoCandidato create
   */
  export type ArquivoCandidatoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * The data needed to create a ArquivoCandidato.
     */
    data: XOR<ArquivoCandidatoCreateInput, ArquivoCandidatoUncheckedCreateInput>
  }

  /**
   * ArquivoCandidato createMany
   */
  export type ArquivoCandidatoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ArquivoCandidatoes.
     */
    data: ArquivoCandidatoCreateManyInput | ArquivoCandidatoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ArquivoCandidato update
   */
  export type ArquivoCandidatoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * The data needed to update a ArquivoCandidato.
     */
    data: XOR<ArquivoCandidatoUpdateInput, ArquivoCandidatoUncheckedUpdateInput>
    /**
     * Choose, which ArquivoCandidato to update.
     */
    where: ArquivoCandidatoWhereUniqueInput
  }

  /**
   * ArquivoCandidato updateMany
   */
  export type ArquivoCandidatoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ArquivoCandidatoes.
     */
    data: XOR<ArquivoCandidatoUpdateManyMutationInput, ArquivoCandidatoUncheckedUpdateManyInput>
    /**
     * Filter which ArquivoCandidatoes to update
     */
    where?: ArquivoCandidatoWhereInput
    /**
     * Limit how many ArquivoCandidatoes to update.
     */
    limit?: number
  }

  /**
   * ArquivoCandidato upsert
   */
  export type ArquivoCandidatoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * The filter to search for the ArquivoCandidato to update in case it exists.
     */
    where: ArquivoCandidatoWhereUniqueInput
    /**
     * In case the ArquivoCandidato found by the `where` argument doesn't exist, create a new ArquivoCandidato with this data.
     */
    create: XOR<ArquivoCandidatoCreateInput, ArquivoCandidatoUncheckedCreateInput>
    /**
     * In case the ArquivoCandidato was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArquivoCandidatoUpdateInput, ArquivoCandidatoUncheckedUpdateInput>
  }

  /**
   * ArquivoCandidato delete
   */
  export type ArquivoCandidatoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
    /**
     * Filter which ArquivoCandidato to delete.
     */
    where: ArquivoCandidatoWhereUniqueInput
  }

  /**
   * ArquivoCandidato deleteMany
   */
  export type ArquivoCandidatoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ArquivoCandidatoes to delete
     */
    where?: ArquivoCandidatoWhereInput
    /**
     * Limit how many ArquivoCandidatoes to delete.
     */
    limit?: number
  }

  /**
   * ArquivoCandidato without action
   */
  export type ArquivoCandidatoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArquivoCandidato
     */
    select?: ArquivoCandidatoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ArquivoCandidato
     */
    omit?: ArquivoCandidatoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArquivoCandidatoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FuncionarioScalarFieldEnum: {
    id: 'id',
    cpf: 'cpf',
    nome: 'nome',
    endereco: 'endereco',
    genero: 'genero',
    telefone: 'telefone',
    cargo: 'cargo',
    email: 'email',
    local: 'local',
    nivelAcesso: 'nivelAcesso',
    senhaHash: 'senhaHash',
    dataNascimento: 'dataNascimento',
    gerenteId: 'gerenteId'
  };

  export type FuncionarioScalarFieldEnum = (typeof FuncionarioScalarFieldEnum)[keyof typeof FuncionarioScalarFieldEnum]


  export const ClienteScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    endereco: 'endereco',
    funcionarioId: 'funcionarioId',
    funilId: 'funilId'
  };

  export type ClienteScalarFieldEnum = (typeof ClienteScalarFieldEnum)[keyof typeof ClienteScalarFieldEnum]


  export const Funil_VendasScalarFieldEnum: {
    id: 'id',
    estagioNome: 'estagioNome'
  };

  export type Funil_VendasScalarFieldEnum = (typeof Funil_VendasScalarFieldEnum)[keyof typeof Funil_VendasScalarFieldEnum]


  export const EventoScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    desc: 'desc',
    dataIni: 'dataIni',
    duracaoH: 'duracaoH',
    link: 'link',
    status: 'status',
    organizadorId: 'organizadorId'
  };

  export type EventoScalarFieldEnum = (typeof EventoScalarFieldEnum)[keyof typeof EventoScalarFieldEnum]


  export const ContatoClienteScalarFieldEnum: {
    id: 'id',
    tipoContato: 'tipoContato',
    valorContrato: 'valorContrato',
    clienteId: 'clienteId'
  };

  export type ContatoClienteScalarFieldEnum = (typeof ContatoClienteScalarFieldEnum)[keyof typeof ContatoClienteScalarFieldEnum]


  export const AgendamentoInteracaoScalarFieldEnum: {
    id: 'id',
    dataMarcada: 'dataMarcada',
    tipoInteracao: 'tipoInteracao',
    status: 'status',
    notas: 'notas',
    funcionarioId: 'funcionarioId',
    clienteId: 'clienteId'
  };

  export type AgendamentoInteracaoScalarFieldEnum = (typeof AgendamentoInteracaoScalarFieldEnum)[keyof typeof AgendamentoInteracaoScalarFieldEnum]


  export const HistoricoFunilScalarFieldEnum: {
    id: 'id',
    dataMovimentacao: 'dataMovimentacao',
    clienteId: 'clienteId',
    funilId: 'funilId'
  };

  export type HistoricoFunilScalarFieldEnum = (typeof HistoricoFunilScalarFieldEnum)[keyof typeof HistoricoFunilScalarFieldEnum]


  export const InteracaoClienteScalarFieldEnum: {
    id: 'id',
    dataInteracao: 'dataInteracao',
    tipoInteracao: 'tipoInteracao',
    relatorioInteracao: 'relatorioInteracao',
    funcionarioId: 'funcionarioId',
    clienteId: 'clienteId'
  };

  export type InteracaoClienteScalarFieldEnum = (typeof InteracaoClienteScalarFieldEnum)[keyof typeof InteracaoClienteScalarFieldEnum]


  export const VendaScalarFieldEnum: {
    id: 'id',
    dataVenda: 'dataVenda',
    total: 'total',
    funcionarioId: 'funcionarioId',
    clienteId: 'clienteId'
  };

  export type VendaScalarFieldEnum = (typeof VendaScalarFieldEnum)[keyof typeof VendaScalarFieldEnum]


  export const FuncionariosConvidadosScalarFieldEnum: {
    eventoId: 'eventoId',
    funcionarioId: 'funcionarioId'
  };

  export type FuncionariosConvidadosScalarFieldEnum = (typeof FuncionariosConvidadosScalarFieldEnum)[keyof typeof FuncionariosConvidadosScalarFieldEnum]


  export const NotificacaoScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    corpo: 'corpo',
    eventoId: 'eventoId'
  };

  export type NotificacaoScalarFieldEnum = (typeof NotificacaoScalarFieldEnum)[keyof typeof NotificacaoScalarFieldEnum]


  export const NotificacaoConvidadosScalarFieldEnum: {
    eventoId: 'eventoId',
    funcionarioId: 'funcionarioId',
    notificacaoId: 'notificacaoId',
    statusLeitura: 'statusLeitura',
    dataLeitura: 'dataLeitura',
    prioridade: 'prioridade'
  };

  export type NotificacaoConvidadosScalarFieldEnum = (typeof NotificacaoConvidadosScalarFieldEnum)[keyof typeof NotificacaoConvidadosScalarFieldEnum]


  export const PresencaScalarFieldEnum: {
    id: 'id',
    presente: 'presente',
    razaoRecusa: 'razaoRecusa',
    dataTermino: 'dataTermino',
    linkFeedback: 'linkFeedback',
    eventoId: 'eventoId',
    funcionarioId: 'funcionarioId'
  };

  export type PresencaScalarFieldEnum = (typeof PresencaScalarFieldEnum)[keyof typeof PresencaScalarFieldEnum]


  export const FormTemplateScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao',
    estrutura: 'estrutura',
    criadoPorId: 'criadoPorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FormTemplateScalarFieldEnum = (typeof FormTemplateScalarFieldEnum)[keyof typeof FormTemplateScalarFieldEnum]


  export const CandidatoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    dataNascimento: 'dataNascimento',
    genero: 'genero',
    telefone: 'telefone',
    cpf: 'cpf',
    estado: 'estado',
    cidade: 'cidade',
    bairro: 'bairro',
    rua: 'rua',
    numero: 'numero',
    cep: 'cep',
    complemento: 'complemento',
    email: 'email',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CandidatoScalarFieldEnum = (typeof CandidatoScalarFieldEnum)[keyof typeof CandidatoScalarFieldEnum]


  export const ArquivoCandidatoScalarFieldEnum: {
    id: 'id',
    nomeArquivo: 'nomeArquivo',
    campoOriginal: 'campoOriginal',
    candidatoId: 'candidatoId'
  };

  export type ArquivoCandidatoScalarFieldEnum = (typeof ArquivoCandidatoScalarFieldEnum)[keyof typeof ArquivoCandidatoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const FuncionarioOrderByRelevanceFieldEnum: {
    cpf: 'cpf',
    nome: 'nome',
    endereco: 'endereco',
    genero: 'genero',
    telefone: 'telefone',
    cargo: 'cargo',
    email: 'email',
    local: 'local',
    nivelAcesso: 'nivelAcesso',
    senhaHash: 'senhaHash'
  };

  export type FuncionarioOrderByRelevanceFieldEnum = (typeof FuncionarioOrderByRelevanceFieldEnum)[keyof typeof FuncionarioOrderByRelevanceFieldEnum]


  export const ClienteOrderByRelevanceFieldEnum: {
    nome: 'nome',
    endereco: 'endereco'
  };

  export type ClienteOrderByRelevanceFieldEnum = (typeof ClienteOrderByRelevanceFieldEnum)[keyof typeof ClienteOrderByRelevanceFieldEnum]


  export const Funil_VendasOrderByRelevanceFieldEnum: {
    estagioNome: 'estagioNome'
  };

  export type Funil_VendasOrderByRelevanceFieldEnum = (typeof Funil_VendasOrderByRelevanceFieldEnum)[keyof typeof Funil_VendasOrderByRelevanceFieldEnum]


  export const EventoOrderByRelevanceFieldEnum: {
    titulo: 'titulo',
    desc: 'desc',
    link: 'link',
    status: 'status'
  };

  export type EventoOrderByRelevanceFieldEnum = (typeof EventoOrderByRelevanceFieldEnum)[keyof typeof EventoOrderByRelevanceFieldEnum]


  export const ContatoClienteOrderByRelevanceFieldEnum: {
    tipoContato: 'tipoContato',
    valorContrato: 'valorContrato'
  };

  export type ContatoClienteOrderByRelevanceFieldEnum = (typeof ContatoClienteOrderByRelevanceFieldEnum)[keyof typeof ContatoClienteOrderByRelevanceFieldEnum]


  export const AgendamentoInteracaoOrderByRelevanceFieldEnum: {
    tipoInteracao: 'tipoInteracao',
    status: 'status',
    notas: 'notas'
  };

  export type AgendamentoInteracaoOrderByRelevanceFieldEnum = (typeof AgendamentoInteracaoOrderByRelevanceFieldEnum)[keyof typeof AgendamentoInteracaoOrderByRelevanceFieldEnum]


  export const InteracaoClienteOrderByRelevanceFieldEnum: {
    tipoInteracao: 'tipoInteracao',
    relatorioInteracao: 'relatorioInteracao'
  };

  export type InteracaoClienteOrderByRelevanceFieldEnum = (typeof InteracaoClienteOrderByRelevanceFieldEnum)[keyof typeof InteracaoClienteOrderByRelevanceFieldEnum]


  export const NotificacaoOrderByRelevanceFieldEnum: {
    titulo: 'titulo',
    corpo: 'corpo'
  };

  export type NotificacaoOrderByRelevanceFieldEnum = (typeof NotificacaoOrderByRelevanceFieldEnum)[keyof typeof NotificacaoOrderByRelevanceFieldEnum]


  export const NotificacaoConvidadosOrderByRelevanceFieldEnum: {
    prioridade: 'prioridade'
  };

  export type NotificacaoConvidadosOrderByRelevanceFieldEnum = (typeof NotificacaoConvidadosOrderByRelevanceFieldEnum)[keyof typeof NotificacaoConvidadosOrderByRelevanceFieldEnum]


  export const PresencaOrderByRelevanceFieldEnum: {
    razaoRecusa: 'razaoRecusa',
    linkFeedback: 'linkFeedback'
  };

  export type PresencaOrderByRelevanceFieldEnum = (typeof PresencaOrderByRelevanceFieldEnum)[keyof typeof PresencaOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const FormTemplateOrderByRelevanceFieldEnum: {
    nome: 'nome',
    descricao: 'descricao'
  };

  export type FormTemplateOrderByRelevanceFieldEnum = (typeof FormTemplateOrderByRelevanceFieldEnum)[keyof typeof FormTemplateOrderByRelevanceFieldEnum]


  export const CandidatoOrderByRelevanceFieldEnum: {
    nome: 'nome',
    genero: 'genero',
    telefone: 'telefone',
    cpf: 'cpf',
    estado: 'estado',
    cidade: 'cidade',
    bairro: 'bairro',
    rua: 'rua',
    numero: 'numero',
    cep: 'cep',
    complemento: 'complemento',
    email: 'email',
    status: 'status'
  };

  export type CandidatoOrderByRelevanceFieldEnum = (typeof CandidatoOrderByRelevanceFieldEnum)[keyof typeof CandidatoOrderByRelevanceFieldEnum]


  export const ArquivoCandidatoOrderByRelevanceFieldEnum: {
    nomeArquivo: 'nomeArquivo',
    campoOriginal: 'campoOriginal'
  };

  export type ArquivoCandidatoOrderByRelevanceFieldEnum = (typeof ArquivoCandidatoOrderByRelevanceFieldEnum)[keyof typeof ArquivoCandidatoOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type FuncionarioWhereInput = {
    AND?: FuncionarioWhereInput | FuncionarioWhereInput[]
    OR?: FuncionarioWhereInput[]
    NOT?: FuncionarioWhereInput | FuncionarioWhereInput[]
    id?: IntFilter<"Funcionario"> | number
    cpf?: StringFilter<"Funcionario"> | string
    nome?: StringFilter<"Funcionario"> | string
    endereco?: StringFilter<"Funcionario"> | string
    genero?: StringFilter<"Funcionario"> | string
    telefone?: StringFilter<"Funcionario"> | string
    cargo?: StringFilter<"Funcionario"> | string
    email?: StringFilter<"Funcionario"> | string
    local?: StringFilter<"Funcionario"> | string
    nivelAcesso?: StringFilter<"Funcionario"> | string
    senhaHash?: StringFilter<"Funcionario"> | string
    dataNascimento?: DateTimeFilter<"Funcionario"> | Date | string
    gerenteId?: IntNullableFilter<"Funcionario"> | number | null
    gerente?: XOR<FuncionarioNullableScalarRelationFilter, FuncionarioWhereInput> | null
    subordinados?: FuncionarioListRelationFilter
    agendamentosInteracao?: AgendamentoInteracaoListRelationFilter
    clientesGerenciados?: ClienteListRelationFilter
    interacoesCliente?: InteracaoClienteListRelationFilter
    eventosOrganizados?: EventoListRelationFilter
    convitesEventos?: FuncionariosConvidadosListRelationFilter
    vendasRealizadas?: VendaListRelationFilter
    formTemplatesCriados?: FormTemplateListRelationFilter
  }

  export type FuncionarioOrderByWithRelationInput = {
    id?: SortOrder
    cpf?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cargo?: SortOrder
    email?: SortOrder
    local?: SortOrder
    nivelAcesso?: SortOrder
    senhaHash?: SortOrder
    dataNascimento?: SortOrder
    gerenteId?: SortOrderInput | SortOrder
    gerente?: FuncionarioOrderByWithRelationInput
    subordinados?: FuncionarioOrderByRelationAggregateInput
    agendamentosInteracao?: AgendamentoInteracaoOrderByRelationAggregateInput
    clientesGerenciados?: ClienteOrderByRelationAggregateInput
    interacoesCliente?: InteracaoClienteOrderByRelationAggregateInput
    eventosOrganizados?: EventoOrderByRelationAggregateInput
    convitesEventos?: FuncionariosConvidadosOrderByRelationAggregateInput
    vendasRealizadas?: VendaOrderByRelationAggregateInput
    formTemplatesCriados?: FormTemplateOrderByRelationAggregateInput
    _relevance?: FuncionarioOrderByRelevanceInput
  }

  export type FuncionarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    email?: string
    AND?: FuncionarioWhereInput | FuncionarioWhereInput[]
    OR?: FuncionarioWhereInput[]
    NOT?: FuncionarioWhereInput | FuncionarioWhereInput[]
    nome?: StringFilter<"Funcionario"> | string
    endereco?: StringFilter<"Funcionario"> | string
    genero?: StringFilter<"Funcionario"> | string
    telefone?: StringFilter<"Funcionario"> | string
    cargo?: StringFilter<"Funcionario"> | string
    local?: StringFilter<"Funcionario"> | string
    nivelAcesso?: StringFilter<"Funcionario"> | string
    senhaHash?: StringFilter<"Funcionario"> | string
    dataNascimento?: DateTimeFilter<"Funcionario"> | Date | string
    gerenteId?: IntNullableFilter<"Funcionario"> | number | null
    gerente?: XOR<FuncionarioNullableScalarRelationFilter, FuncionarioWhereInput> | null
    subordinados?: FuncionarioListRelationFilter
    agendamentosInteracao?: AgendamentoInteracaoListRelationFilter
    clientesGerenciados?: ClienteListRelationFilter
    interacoesCliente?: InteracaoClienteListRelationFilter
    eventosOrganizados?: EventoListRelationFilter
    convitesEventos?: FuncionariosConvidadosListRelationFilter
    vendasRealizadas?: VendaListRelationFilter
    formTemplatesCriados?: FormTemplateListRelationFilter
  }, "id" | "cpf" | "email">

  export type FuncionarioOrderByWithAggregationInput = {
    id?: SortOrder
    cpf?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cargo?: SortOrder
    email?: SortOrder
    local?: SortOrder
    nivelAcesso?: SortOrder
    senhaHash?: SortOrder
    dataNascimento?: SortOrder
    gerenteId?: SortOrderInput | SortOrder
    _count?: FuncionarioCountOrderByAggregateInput
    _avg?: FuncionarioAvgOrderByAggregateInput
    _max?: FuncionarioMaxOrderByAggregateInput
    _min?: FuncionarioMinOrderByAggregateInput
    _sum?: FuncionarioSumOrderByAggregateInput
  }

  export type FuncionarioScalarWhereWithAggregatesInput = {
    AND?: FuncionarioScalarWhereWithAggregatesInput | FuncionarioScalarWhereWithAggregatesInput[]
    OR?: FuncionarioScalarWhereWithAggregatesInput[]
    NOT?: FuncionarioScalarWhereWithAggregatesInput | FuncionarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Funcionario"> | number
    cpf?: StringWithAggregatesFilter<"Funcionario"> | string
    nome?: StringWithAggregatesFilter<"Funcionario"> | string
    endereco?: StringWithAggregatesFilter<"Funcionario"> | string
    genero?: StringWithAggregatesFilter<"Funcionario"> | string
    telefone?: StringWithAggregatesFilter<"Funcionario"> | string
    cargo?: StringWithAggregatesFilter<"Funcionario"> | string
    email?: StringWithAggregatesFilter<"Funcionario"> | string
    local?: StringWithAggregatesFilter<"Funcionario"> | string
    nivelAcesso?: StringWithAggregatesFilter<"Funcionario"> | string
    senhaHash?: StringWithAggregatesFilter<"Funcionario"> | string
    dataNascimento?: DateTimeWithAggregatesFilter<"Funcionario"> | Date | string
    gerenteId?: IntNullableWithAggregatesFilter<"Funcionario"> | number | null
  }

  export type ClienteWhereInput = {
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    endereco?: StringFilter<"Cliente"> | string
    funcionarioId?: IntFilter<"Cliente"> | number
    funilId?: IntFilter<"Cliente"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    funilVendas?: XOR<Funil_VendasScalarRelationFilter, Funil_VendasWhereInput>
    contatos?: ContatoClienteListRelationFilter
    agendamentos?: AgendamentoInteracaoListRelationFilter
    historicoFunil?: HistoricoFunilListRelationFilter
    interacoes?: InteracaoClienteListRelationFilter
    vendas?: VendaListRelationFilter
  }

  export type ClienteOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
    funcionario?: FuncionarioOrderByWithRelationInput
    funilVendas?: Funil_VendasOrderByWithRelationInput
    contatos?: ContatoClienteOrderByRelationAggregateInput
    agendamentos?: AgendamentoInteracaoOrderByRelationAggregateInput
    historicoFunil?: HistoricoFunilOrderByRelationAggregateInput
    interacoes?: InteracaoClienteOrderByRelationAggregateInput
    vendas?: VendaOrderByRelationAggregateInput
    _relevance?: ClienteOrderByRelevanceInput
  }

  export type ClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClienteWhereInput | ClienteWhereInput[]
    OR?: ClienteWhereInput[]
    NOT?: ClienteWhereInput | ClienteWhereInput[]
    nome?: StringFilter<"Cliente"> | string
    endereco?: StringFilter<"Cliente"> | string
    funcionarioId?: IntFilter<"Cliente"> | number
    funilId?: IntFilter<"Cliente"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    funilVendas?: XOR<Funil_VendasScalarRelationFilter, Funil_VendasWhereInput>
    contatos?: ContatoClienteListRelationFilter
    agendamentos?: AgendamentoInteracaoListRelationFilter
    historicoFunil?: HistoricoFunilListRelationFilter
    interacoes?: InteracaoClienteListRelationFilter
    vendas?: VendaListRelationFilter
  }, "id">

  export type ClienteOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
    _count?: ClienteCountOrderByAggregateInput
    _avg?: ClienteAvgOrderByAggregateInput
    _max?: ClienteMaxOrderByAggregateInput
    _min?: ClienteMinOrderByAggregateInput
    _sum?: ClienteSumOrderByAggregateInput
  }

  export type ClienteScalarWhereWithAggregatesInput = {
    AND?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    OR?: ClienteScalarWhereWithAggregatesInput[]
    NOT?: ClienteScalarWhereWithAggregatesInput | ClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cliente"> | number
    nome?: StringWithAggregatesFilter<"Cliente"> | string
    endereco?: StringWithAggregatesFilter<"Cliente"> | string
    funcionarioId?: IntWithAggregatesFilter<"Cliente"> | number
    funilId?: IntWithAggregatesFilter<"Cliente"> | number
  }

  export type Funil_VendasWhereInput = {
    AND?: Funil_VendasWhereInput | Funil_VendasWhereInput[]
    OR?: Funil_VendasWhereInput[]
    NOT?: Funil_VendasWhereInput | Funil_VendasWhereInput[]
    id?: IntFilter<"Funil_Vendas"> | number
    estagioNome?: StringFilter<"Funil_Vendas"> | string
    clientes?: ClienteListRelationFilter
    historico?: HistoricoFunilListRelationFilter
  }

  export type Funil_VendasOrderByWithRelationInput = {
    id?: SortOrder
    estagioNome?: SortOrder
    clientes?: ClienteOrderByRelationAggregateInput
    historico?: HistoricoFunilOrderByRelationAggregateInput
    _relevance?: Funil_VendasOrderByRelevanceInput
  }

  export type Funil_VendasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Funil_VendasWhereInput | Funil_VendasWhereInput[]
    OR?: Funil_VendasWhereInput[]
    NOT?: Funil_VendasWhereInput | Funil_VendasWhereInput[]
    estagioNome?: StringFilter<"Funil_Vendas"> | string
    clientes?: ClienteListRelationFilter
    historico?: HistoricoFunilListRelationFilter
  }, "id">

  export type Funil_VendasOrderByWithAggregationInput = {
    id?: SortOrder
    estagioNome?: SortOrder
    _count?: Funil_VendasCountOrderByAggregateInput
    _avg?: Funil_VendasAvgOrderByAggregateInput
    _max?: Funil_VendasMaxOrderByAggregateInput
    _min?: Funil_VendasMinOrderByAggregateInput
    _sum?: Funil_VendasSumOrderByAggregateInput
  }

  export type Funil_VendasScalarWhereWithAggregatesInput = {
    AND?: Funil_VendasScalarWhereWithAggregatesInput | Funil_VendasScalarWhereWithAggregatesInput[]
    OR?: Funil_VendasScalarWhereWithAggregatesInput[]
    NOT?: Funil_VendasScalarWhereWithAggregatesInput | Funil_VendasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Funil_Vendas"> | number
    estagioNome?: StringWithAggregatesFilter<"Funil_Vendas"> | string
  }

  export type EventoWhereInput = {
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    id?: IntFilter<"Evento"> | number
    titulo?: StringFilter<"Evento"> | string
    desc?: StringFilter<"Evento"> | string
    dataIni?: DateTimeFilter<"Evento"> | Date | string
    duracaoH?: IntFilter<"Evento"> | number
    link?: StringFilter<"Evento"> | string
    status?: StringFilter<"Evento"> | string
    organizadorId?: IntFilter<"Evento"> | number
    organizador?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    funcionariosConvidados?: FuncionariosConvidadosListRelationFilter
    notificacoes?: NotificacaoListRelationFilter
  }

  export type EventoOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    desc?: SortOrder
    dataIni?: SortOrder
    duracaoH?: SortOrder
    link?: SortOrder
    status?: SortOrder
    organizadorId?: SortOrder
    organizador?: FuncionarioOrderByWithRelationInput
    funcionariosConvidados?: FuncionariosConvidadosOrderByRelationAggregateInput
    notificacoes?: NotificacaoOrderByRelationAggregateInput
    _relevance?: EventoOrderByRelevanceInput
  }

  export type EventoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    titulo?: StringFilter<"Evento"> | string
    desc?: StringFilter<"Evento"> | string
    dataIni?: DateTimeFilter<"Evento"> | Date | string
    duracaoH?: IntFilter<"Evento"> | number
    link?: StringFilter<"Evento"> | string
    status?: StringFilter<"Evento"> | string
    organizadorId?: IntFilter<"Evento"> | number
    organizador?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    funcionariosConvidados?: FuncionariosConvidadosListRelationFilter
    notificacoes?: NotificacaoListRelationFilter
  }, "id">

  export type EventoOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    desc?: SortOrder
    dataIni?: SortOrder
    duracaoH?: SortOrder
    link?: SortOrder
    status?: SortOrder
    organizadorId?: SortOrder
    _count?: EventoCountOrderByAggregateInput
    _avg?: EventoAvgOrderByAggregateInput
    _max?: EventoMaxOrderByAggregateInput
    _min?: EventoMinOrderByAggregateInput
    _sum?: EventoSumOrderByAggregateInput
  }

  export type EventoScalarWhereWithAggregatesInput = {
    AND?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    OR?: EventoScalarWhereWithAggregatesInput[]
    NOT?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Evento"> | number
    titulo?: StringWithAggregatesFilter<"Evento"> | string
    desc?: StringWithAggregatesFilter<"Evento"> | string
    dataIni?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
    duracaoH?: IntWithAggregatesFilter<"Evento"> | number
    link?: StringWithAggregatesFilter<"Evento"> | string
    status?: StringWithAggregatesFilter<"Evento"> | string
    organizadorId?: IntWithAggregatesFilter<"Evento"> | number
  }

  export type ContatoClienteWhereInput = {
    AND?: ContatoClienteWhereInput | ContatoClienteWhereInput[]
    OR?: ContatoClienteWhereInput[]
    NOT?: ContatoClienteWhereInput | ContatoClienteWhereInput[]
    id?: IntFilter<"ContatoCliente"> | number
    tipoContato?: StringFilter<"ContatoCliente"> | string
    valorContrato?: StringFilter<"ContatoCliente"> | string
    clienteId?: IntFilter<"ContatoCliente"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }

  export type ContatoClienteOrderByWithRelationInput = {
    id?: SortOrder
    tipoContato?: SortOrder
    valorContrato?: SortOrder
    clienteId?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    _relevance?: ContatoClienteOrderByRelevanceInput
  }

  export type ContatoClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContatoClienteWhereInput | ContatoClienteWhereInput[]
    OR?: ContatoClienteWhereInput[]
    NOT?: ContatoClienteWhereInput | ContatoClienteWhereInput[]
    tipoContato?: StringFilter<"ContatoCliente"> | string
    valorContrato?: StringFilter<"ContatoCliente"> | string
    clienteId?: IntFilter<"ContatoCliente"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }, "id">

  export type ContatoClienteOrderByWithAggregationInput = {
    id?: SortOrder
    tipoContato?: SortOrder
    valorContrato?: SortOrder
    clienteId?: SortOrder
    _count?: ContatoClienteCountOrderByAggregateInput
    _avg?: ContatoClienteAvgOrderByAggregateInput
    _max?: ContatoClienteMaxOrderByAggregateInput
    _min?: ContatoClienteMinOrderByAggregateInput
    _sum?: ContatoClienteSumOrderByAggregateInput
  }

  export type ContatoClienteScalarWhereWithAggregatesInput = {
    AND?: ContatoClienteScalarWhereWithAggregatesInput | ContatoClienteScalarWhereWithAggregatesInput[]
    OR?: ContatoClienteScalarWhereWithAggregatesInput[]
    NOT?: ContatoClienteScalarWhereWithAggregatesInput | ContatoClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContatoCliente"> | number
    tipoContato?: StringWithAggregatesFilter<"ContatoCliente"> | string
    valorContrato?: StringWithAggregatesFilter<"ContatoCliente"> | string
    clienteId?: IntWithAggregatesFilter<"ContatoCliente"> | number
  }

  export type AgendamentoInteracaoWhereInput = {
    AND?: AgendamentoInteracaoWhereInput | AgendamentoInteracaoWhereInput[]
    OR?: AgendamentoInteracaoWhereInput[]
    NOT?: AgendamentoInteracaoWhereInput | AgendamentoInteracaoWhereInput[]
    id?: IntFilter<"AgendamentoInteracao"> | number
    dataMarcada?: DateTimeFilter<"AgendamentoInteracao"> | Date | string
    tipoInteracao?: StringFilter<"AgendamentoInteracao"> | string
    status?: StringFilter<"AgendamentoInteracao"> | string
    notas?: StringNullableFilter<"AgendamentoInteracao"> | string | null
    funcionarioId?: IntFilter<"AgendamentoInteracao"> | number
    clienteId?: IntFilter<"AgendamentoInteracao"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }

  export type AgendamentoInteracaoOrderByWithRelationInput = {
    id?: SortOrder
    dataMarcada?: SortOrder
    tipoInteracao?: SortOrder
    status?: SortOrder
    notas?: SortOrderInput | SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
    funcionario?: FuncionarioOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
    _relevance?: AgendamentoInteracaoOrderByRelevanceInput
  }

  export type AgendamentoInteracaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgendamentoInteracaoWhereInput | AgendamentoInteracaoWhereInput[]
    OR?: AgendamentoInteracaoWhereInput[]
    NOT?: AgendamentoInteracaoWhereInput | AgendamentoInteracaoWhereInput[]
    dataMarcada?: DateTimeFilter<"AgendamentoInteracao"> | Date | string
    tipoInteracao?: StringFilter<"AgendamentoInteracao"> | string
    status?: StringFilter<"AgendamentoInteracao"> | string
    notas?: StringNullableFilter<"AgendamentoInteracao"> | string | null
    funcionarioId?: IntFilter<"AgendamentoInteracao"> | number
    clienteId?: IntFilter<"AgendamentoInteracao"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }, "id">

  export type AgendamentoInteracaoOrderByWithAggregationInput = {
    id?: SortOrder
    dataMarcada?: SortOrder
    tipoInteracao?: SortOrder
    status?: SortOrder
    notas?: SortOrderInput | SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
    _count?: AgendamentoInteracaoCountOrderByAggregateInput
    _avg?: AgendamentoInteracaoAvgOrderByAggregateInput
    _max?: AgendamentoInteracaoMaxOrderByAggregateInput
    _min?: AgendamentoInteracaoMinOrderByAggregateInput
    _sum?: AgendamentoInteracaoSumOrderByAggregateInput
  }

  export type AgendamentoInteracaoScalarWhereWithAggregatesInput = {
    AND?: AgendamentoInteracaoScalarWhereWithAggregatesInput | AgendamentoInteracaoScalarWhereWithAggregatesInput[]
    OR?: AgendamentoInteracaoScalarWhereWithAggregatesInput[]
    NOT?: AgendamentoInteracaoScalarWhereWithAggregatesInput | AgendamentoInteracaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgendamentoInteracao"> | number
    dataMarcada?: DateTimeWithAggregatesFilter<"AgendamentoInteracao"> | Date | string
    tipoInteracao?: StringWithAggregatesFilter<"AgendamentoInteracao"> | string
    status?: StringWithAggregatesFilter<"AgendamentoInteracao"> | string
    notas?: StringNullableWithAggregatesFilter<"AgendamentoInteracao"> | string | null
    funcionarioId?: IntWithAggregatesFilter<"AgendamentoInteracao"> | number
    clienteId?: IntWithAggregatesFilter<"AgendamentoInteracao"> | number
  }

  export type HistoricoFunilWhereInput = {
    AND?: HistoricoFunilWhereInput | HistoricoFunilWhereInput[]
    OR?: HistoricoFunilWhereInput[]
    NOT?: HistoricoFunilWhereInput | HistoricoFunilWhereInput[]
    id?: IntFilter<"HistoricoFunil"> | number
    dataMovimentacao?: DateTimeFilter<"HistoricoFunil"> | Date | string
    clienteId?: IntFilter<"HistoricoFunil"> | number
    funilId?: IntFilter<"HistoricoFunil"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    funilVendas?: XOR<Funil_VendasScalarRelationFilter, Funil_VendasWhereInput>
  }

  export type HistoricoFunilOrderByWithRelationInput = {
    id?: SortOrder
    dataMovimentacao?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
    cliente?: ClienteOrderByWithRelationInput
    funilVendas?: Funil_VendasOrderByWithRelationInput
  }

  export type HistoricoFunilWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistoricoFunilWhereInput | HistoricoFunilWhereInput[]
    OR?: HistoricoFunilWhereInput[]
    NOT?: HistoricoFunilWhereInput | HistoricoFunilWhereInput[]
    dataMovimentacao?: DateTimeFilter<"HistoricoFunil"> | Date | string
    clienteId?: IntFilter<"HistoricoFunil"> | number
    funilId?: IntFilter<"HistoricoFunil"> | number
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
    funilVendas?: XOR<Funil_VendasScalarRelationFilter, Funil_VendasWhereInput>
  }, "id">

  export type HistoricoFunilOrderByWithAggregationInput = {
    id?: SortOrder
    dataMovimentacao?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
    _count?: HistoricoFunilCountOrderByAggregateInput
    _avg?: HistoricoFunilAvgOrderByAggregateInput
    _max?: HistoricoFunilMaxOrderByAggregateInput
    _min?: HistoricoFunilMinOrderByAggregateInput
    _sum?: HistoricoFunilSumOrderByAggregateInput
  }

  export type HistoricoFunilScalarWhereWithAggregatesInput = {
    AND?: HistoricoFunilScalarWhereWithAggregatesInput | HistoricoFunilScalarWhereWithAggregatesInput[]
    OR?: HistoricoFunilScalarWhereWithAggregatesInput[]
    NOT?: HistoricoFunilScalarWhereWithAggregatesInput | HistoricoFunilScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HistoricoFunil"> | number
    dataMovimentacao?: DateTimeWithAggregatesFilter<"HistoricoFunil"> | Date | string
    clienteId?: IntWithAggregatesFilter<"HistoricoFunil"> | number
    funilId?: IntWithAggregatesFilter<"HistoricoFunil"> | number
  }

  export type InteracaoClienteWhereInput = {
    AND?: InteracaoClienteWhereInput | InteracaoClienteWhereInput[]
    OR?: InteracaoClienteWhereInput[]
    NOT?: InteracaoClienteWhereInput | InteracaoClienteWhereInput[]
    id?: IntFilter<"InteracaoCliente"> | number
    dataInteracao?: DateTimeFilter<"InteracaoCliente"> | Date | string
    tipoInteracao?: StringFilter<"InteracaoCliente"> | string
    relatorioInteracao?: StringFilter<"InteracaoCliente"> | string
    funcionarioId?: IntFilter<"InteracaoCliente"> | number
    clienteId?: IntFilter<"InteracaoCliente"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }

  export type InteracaoClienteOrderByWithRelationInput = {
    id?: SortOrder
    dataInteracao?: SortOrder
    tipoInteracao?: SortOrder
    relatorioInteracao?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
    funcionario?: FuncionarioOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
    _relevance?: InteracaoClienteOrderByRelevanceInput
  }

  export type InteracaoClienteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InteracaoClienteWhereInput | InteracaoClienteWhereInput[]
    OR?: InteracaoClienteWhereInput[]
    NOT?: InteracaoClienteWhereInput | InteracaoClienteWhereInput[]
    dataInteracao?: DateTimeFilter<"InteracaoCliente"> | Date | string
    tipoInteracao?: StringFilter<"InteracaoCliente"> | string
    relatorioInteracao?: StringFilter<"InteracaoCliente"> | string
    funcionarioId?: IntFilter<"InteracaoCliente"> | number
    clienteId?: IntFilter<"InteracaoCliente"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }, "id">

  export type InteracaoClienteOrderByWithAggregationInput = {
    id?: SortOrder
    dataInteracao?: SortOrder
    tipoInteracao?: SortOrder
    relatorioInteracao?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
    _count?: InteracaoClienteCountOrderByAggregateInput
    _avg?: InteracaoClienteAvgOrderByAggregateInput
    _max?: InteracaoClienteMaxOrderByAggregateInput
    _min?: InteracaoClienteMinOrderByAggregateInput
    _sum?: InteracaoClienteSumOrderByAggregateInput
  }

  export type InteracaoClienteScalarWhereWithAggregatesInput = {
    AND?: InteracaoClienteScalarWhereWithAggregatesInput | InteracaoClienteScalarWhereWithAggregatesInput[]
    OR?: InteracaoClienteScalarWhereWithAggregatesInput[]
    NOT?: InteracaoClienteScalarWhereWithAggregatesInput | InteracaoClienteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InteracaoCliente"> | number
    dataInteracao?: DateTimeWithAggregatesFilter<"InteracaoCliente"> | Date | string
    tipoInteracao?: StringWithAggregatesFilter<"InteracaoCliente"> | string
    relatorioInteracao?: StringWithAggregatesFilter<"InteracaoCliente"> | string
    funcionarioId?: IntWithAggregatesFilter<"InteracaoCliente"> | number
    clienteId?: IntWithAggregatesFilter<"InteracaoCliente"> | number
  }

  export type VendaWhereInput = {
    AND?: VendaWhereInput | VendaWhereInput[]
    OR?: VendaWhereInput[]
    NOT?: VendaWhereInput | VendaWhereInput[]
    id?: IntFilter<"Venda"> | number
    dataVenda?: DateTimeFilter<"Venda"> | Date | string
    total?: DecimalFilter<"Venda"> | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFilter<"Venda"> | number
    clienteId?: IntFilter<"Venda"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }

  export type VendaOrderByWithRelationInput = {
    id?: SortOrder
    dataVenda?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
    funcionario?: FuncionarioOrderByWithRelationInput
    cliente?: ClienteOrderByWithRelationInput
  }

  export type VendaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VendaWhereInput | VendaWhereInput[]
    OR?: VendaWhereInput[]
    NOT?: VendaWhereInput | VendaWhereInput[]
    dataVenda?: DateTimeFilter<"Venda"> | Date | string
    total?: DecimalFilter<"Venda"> | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFilter<"Venda"> | number
    clienteId?: IntFilter<"Venda"> | number
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    cliente?: XOR<ClienteScalarRelationFilter, ClienteWhereInput>
  }, "id">

  export type VendaOrderByWithAggregationInput = {
    id?: SortOrder
    dataVenda?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
    _count?: VendaCountOrderByAggregateInput
    _avg?: VendaAvgOrderByAggregateInput
    _max?: VendaMaxOrderByAggregateInput
    _min?: VendaMinOrderByAggregateInput
    _sum?: VendaSumOrderByAggregateInput
  }

  export type VendaScalarWhereWithAggregatesInput = {
    AND?: VendaScalarWhereWithAggregatesInput | VendaScalarWhereWithAggregatesInput[]
    OR?: VendaScalarWhereWithAggregatesInput[]
    NOT?: VendaScalarWhereWithAggregatesInput | VendaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Venda"> | number
    dataVenda?: DateTimeWithAggregatesFilter<"Venda"> | Date | string
    total?: DecimalWithAggregatesFilter<"Venda"> | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntWithAggregatesFilter<"Venda"> | number
    clienteId?: IntWithAggregatesFilter<"Venda"> | number
  }

  export type FuncionariosConvidadosWhereInput = {
    AND?: FuncionariosConvidadosWhereInput | FuncionariosConvidadosWhereInput[]
    OR?: FuncionariosConvidadosWhereInput[]
    NOT?: FuncionariosConvidadosWhereInput | FuncionariosConvidadosWhereInput[]
    eventoId?: IntFilter<"FuncionariosConvidados"> | number
    funcionarioId?: IntFilter<"FuncionariosConvidados"> | number
    evento?: XOR<EventoScalarRelationFilter, EventoWhereInput>
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    notificacoes?: NotificacaoConvidadosListRelationFilter
    presenca?: XOR<PresencaNullableScalarRelationFilter, PresencaWhereInput> | null
  }

  export type FuncionariosConvidadosOrderByWithRelationInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    evento?: EventoOrderByWithRelationInput
    funcionario?: FuncionarioOrderByWithRelationInput
    notificacoes?: NotificacaoConvidadosOrderByRelationAggregateInput
    presenca?: PresencaOrderByWithRelationInput
  }

  export type FuncionariosConvidadosWhereUniqueInput = Prisma.AtLeast<{
    eventoId_funcionarioId?: FuncionariosConvidadosEventoIdFuncionarioIdCompoundUniqueInput
    AND?: FuncionariosConvidadosWhereInput | FuncionariosConvidadosWhereInput[]
    OR?: FuncionariosConvidadosWhereInput[]
    NOT?: FuncionariosConvidadosWhereInput | FuncionariosConvidadosWhereInput[]
    eventoId?: IntFilter<"FuncionariosConvidados"> | number
    funcionarioId?: IntFilter<"FuncionariosConvidados"> | number
    evento?: XOR<EventoScalarRelationFilter, EventoWhereInput>
    funcionario?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
    notificacoes?: NotificacaoConvidadosListRelationFilter
    presenca?: XOR<PresencaNullableScalarRelationFilter, PresencaWhereInput> | null
  }, "eventoId_funcionarioId">

  export type FuncionariosConvidadosOrderByWithAggregationInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    _count?: FuncionariosConvidadosCountOrderByAggregateInput
    _avg?: FuncionariosConvidadosAvgOrderByAggregateInput
    _max?: FuncionariosConvidadosMaxOrderByAggregateInput
    _min?: FuncionariosConvidadosMinOrderByAggregateInput
    _sum?: FuncionariosConvidadosSumOrderByAggregateInput
  }

  export type FuncionariosConvidadosScalarWhereWithAggregatesInput = {
    AND?: FuncionariosConvidadosScalarWhereWithAggregatesInput | FuncionariosConvidadosScalarWhereWithAggregatesInput[]
    OR?: FuncionariosConvidadosScalarWhereWithAggregatesInput[]
    NOT?: FuncionariosConvidadosScalarWhereWithAggregatesInput | FuncionariosConvidadosScalarWhereWithAggregatesInput[]
    eventoId?: IntWithAggregatesFilter<"FuncionariosConvidados"> | number
    funcionarioId?: IntWithAggregatesFilter<"FuncionariosConvidados"> | number
  }

  export type NotificacaoWhereInput = {
    AND?: NotificacaoWhereInput | NotificacaoWhereInput[]
    OR?: NotificacaoWhereInput[]
    NOT?: NotificacaoWhereInput | NotificacaoWhereInput[]
    id?: IntFilter<"Notificacao"> | number
    titulo?: StringFilter<"Notificacao"> | string
    corpo?: StringNullableFilter<"Notificacao"> | string | null
    eventoId?: IntFilter<"Notificacao"> | number
    evento?: XOR<EventoScalarRelationFilter, EventoWhereInput>
    convidados?: NotificacaoConvidadosListRelationFilter
  }

  export type NotificacaoOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    corpo?: SortOrderInput | SortOrder
    eventoId?: SortOrder
    evento?: EventoOrderByWithRelationInput
    convidados?: NotificacaoConvidadosOrderByRelationAggregateInput
    _relevance?: NotificacaoOrderByRelevanceInput
  }

  export type NotificacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificacaoWhereInput | NotificacaoWhereInput[]
    OR?: NotificacaoWhereInput[]
    NOT?: NotificacaoWhereInput | NotificacaoWhereInput[]
    titulo?: StringFilter<"Notificacao"> | string
    corpo?: StringNullableFilter<"Notificacao"> | string | null
    eventoId?: IntFilter<"Notificacao"> | number
    evento?: XOR<EventoScalarRelationFilter, EventoWhereInput>
    convidados?: NotificacaoConvidadosListRelationFilter
  }, "id">

  export type NotificacaoOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    corpo?: SortOrderInput | SortOrder
    eventoId?: SortOrder
    _count?: NotificacaoCountOrderByAggregateInput
    _avg?: NotificacaoAvgOrderByAggregateInput
    _max?: NotificacaoMaxOrderByAggregateInput
    _min?: NotificacaoMinOrderByAggregateInput
    _sum?: NotificacaoSumOrderByAggregateInput
  }

  export type NotificacaoScalarWhereWithAggregatesInput = {
    AND?: NotificacaoScalarWhereWithAggregatesInput | NotificacaoScalarWhereWithAggregatesInput[]
    OR?: NotificacaoScalarWhereWithAggregatesInput[]
    NOT?: NotificacaoScalarWhereWithAggregatesInput | NotificacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notificacao"> | number
    titulo?: StringWithAggregatesFilter<"Notificacao"> | string
    corpo?: StringNullableWithAggregatesFilter<"Notificacao"> | string | null
    eventoId?: IntWithAggregatesFilter<"Notificacao"> | number
  }

  export type NotificacaoConvidadosWhereInput = {
    AND?: NotificacaoConvidadosWhereInput | NotificacaoConvidadosWhereInput[]
    OR?: NotificacaoConvidadosWhereInput[]
    NOT?: NotificacaoConvidadosWhereInput | NotificacaoConvidadosWhereInput[]
    eventoId?: IntFilter<"NotificacaoConvidados"> | number
    funcionarioId?: IntFilter<"NotificacaoConvidados"> | number
    notificacaoId?: IntFilter<"NotificacaoConvidados"> | number
    statusLeitura?: BoolFilter<"NotificacaoConvidados"> | boolean
    dataLeitura?: DateTimeNullableFilter<"NotificacaoConvidados"> | Date | string | null
    prioridade?: StringFilter<"NotificacaoConvidados"> | string
    convite?: XOR<FuncionariosConvidadosScalarRelationFilter, FuncionariosConvidadosWhereInput>
    notificacao?: XOR<NotificacaoScalarRelationFilter, NotificacaoWhereInput>
  }

  export type NotificacaoConvidadosOrderByWithRelationInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
    statusLeitura?: SortOrder
    dataLeitura?: SortOrderInput | SortOrder
    prioridade?: SortOrder
    convite?: FuncionariosConvidadosOrderByWithRelationInput
    notificacao?: NotificacaoOrderByWithRelationInput
    _relevance?: NotificacaoConvidadosOrderByRelevanceInput
  }

  export type NotificacaoConvidadosWhereUniqueInput = Prisma.AtLeast<{
    eventoId_funcionarioId_notificacaoId?: NotificacaoConvidadosEventoIdFuncionarioIdNotificacaoIdCompoundUniqueInput
    AND?: NotificacaoConvidadosWhereInput | NotificacaoConvidadosWhereInput[]
    OR?: NotificacaoConvidadosWhereInput[]
    NOT?: NotificacaoConvidadosWhereInput | NotificacaoConvidadosWhereInput[]
    eventoId?: IntFilter<"NotificacaoConvidados"> | number
    funcionarioId?: IntFilter<"NotificacaoConvidados"> | number
    notificacaoId?: IntFilter<"NotificacaoConvidados"> | number
    statusLeitura?: BoolFilter<"NotificacaoConvidados"> | boolean
    dataLeitura?: DateTimeNullableFilter<"NotificacaoConvidados"> | Date | string | null
    prioridade?: StringFilter<"NotificacaoConvidados"> | string
    convite?: XOR<FuncionariosConvidadosScalarRelationFilter, FuncionariosConvidadosWhereInput>
    notificacao?: XOR<NotificacaoScalarRelationFilter, NotificacaoWhereInput>
  }, "eventoId_funcionarioId_notificacaoId">

  export type NotificacaoConvidadosOrderByWithAggregationInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
    statusLeitura?: SortOrder
    dataLeitura?: SortOrderInput | SortOrder
    prioridade?: SortOrder
    _count?: NotificacaoConvidadosCountOrderByAggregateInput
    _avg?: NotificacaoConvidadosAvgOrderByAggregateInput
    _max?: NotificacaoConvidadosMaxOrderByAggregateInput
    _min?: NotificacaoConvidadosMinOrderByAggregateInput
    _sum?: NotificacaoConvidadosSumOrderByAggregateInput
  }

  export type NotificacaoConvidadosScalarWhereWithAggregatesInput = {
    AND?: NotificacaoConvidadosScalarWhereWithAggregatesInput | NotificacaoConvidadosScalarWhereWithAggregatesInput[]
    OR?: NotificacaoConvidadosScalarWhereWithAggregatesInput[]
    NOT?: NotificacaoConvidadosScalarWhereWithAggregatesInput | NotificacaoConvidadosScalarWhereWithAggregatesInput[]
    eventoId?: IntWithAggregatesFilter<"NotificacaoConvidados"> | number
    funcionarioId?: IntWithAggregatesFilter<"NotificacaoConvidados"> | number
    notificacaoId?: IntWithAggregatesFilter<"NotificacaoConvidados"> | number
    statusLeitura?: BoolWithAggregatesFilter<"NotificacaoConvidados"> | boolean
    dataLeitura?: DateTimeNullableWithAggregatesFilter<"NotificacaoConvidados"> | Date | string | null
    prioridade?: StringWithAggregatesFilter<"NotificacaoConvidados"> | string
  }

  export type PresencaWhereInput = {
    AND?: PresencaWhereInput | PresencaWhereInput[]
    OR?: PresencaWhereInput[]
    NOT?: PresencaWhereInput | PresencaWhereInput[]
    id?: IntFilter<"Presenca"> | number
    presente?: BoolFilter<"Presenca"> | boolean
    razaoRecusa?: StringNullableFilter<"Presenca"> | string | null
    dataTermino?: DateTimeNullableFilter<"Presenca"> | Date | string | null
    linkFeedback?: StringNullableFilter<"Presenca"> | string | null
    eventoId?: IntFilter<"Presenca"> | number
    funcionarioId?: IntFilter<"Presenca"> | number
    convite?: XOR<FuncionariosConvidadosScalarRelationFilter, FuncionariosConvidadosWhereInput>
  }

  export type PresencaOrderByWithRelationInput = {
    id?: SortOrder
    presente?: SortOrder
    razaoRecusa?: SortOrderInput | SortOrder
    dataTermino?: SortOrderInput | SortOrder
    linkFeedback?: SortOrderInput | SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    convite?: FuncionariosConvidadosOrderByWithRelationInput
    _relevance?: PresencaOrderByRelevanceInput
  }

  export type PresencaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    eventoId_funcionarioId?: PresencaEventoIdFuncionarioIdCompoundUniqueInput
    AND?: PresencaWhereInput | PresencaWhereInput[]
    OR?: PresencaWhereInput[]
    NOT?: PresencaWhereInput | PresencaWhereInput[]
    presente?: BoolFilter<"Presenca"> | boolean
    razaoRecusa?: StringNullableFilter<"Presenca"> | string | null
    dataTermino?: DateTimeNullableFilter<"Presenca"> | Date | string | null
    linkFeedback?: StringNullableFilter<"Presenca"> | string | null
    eventoId?: IntFilter<"Presenca"> | number
    funcionarioId?: IntFilter<"Presenca"> | number
    convite?: XOR<FuncionariosConvidadosScalarRelationFilter, FuncionariosConvidadosWhereInput>
  }, "id" | "eventoId_funcionarioId">

  export type PresencaOrderByWithAggregationInput = {
    id?: SortOrder
    presente?: SortOrder
    razaoRecusa?: SortOrderInput | SortOrder
    dataTermino?: SortOrderInput | SortOrder
    linkFeedback?: SortOrderInput | SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    _count?: PresencaCountOrderByAggregateInput
    _avg?: PresencaAvgOrderByAggregateInput
    _max?: PresencaMaxOrderByAggregateInput
    _min?: PresencaMinOrderByAggregateInput
    _sum?: PresencaSumOrderByAggregateInput
  }

  export type PresencaScalarWhereWithAggregatesInput = {
    AND?: PresencaScalarWhereWithAggregatesInput | PresencaScalarWhereWithAggregatesInput[]
    OR?: PresencaScalarWhereWithAggregatesInput[]
    NOT?: PresencaScalarWhereWithAggregatesInput | PresencaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Presenca"> | number
    presente?: BoolWithAggregatesFilter<"Presenca"> | boolean
    razaoRecusa?: StringNullableWithAggregatesFilter<"Presenca"> | string | null
    dataTermino?: DateTimeNullableWithAggregatesFilter<"Presenca"> | Date | string | null
    linkFeedback?: StringNullableWithAggregatesFilter<"Presenca"> | string | null
    eventoId?: IntWithAggregatesFilter<"Presenca"> | number
    funcionarioId?: IntWithAggregatesFilter<"Presenca"> | number
  }

  export type FormTemplateWhereInput = {
    AND?: FormTemplateWhereInput | FormTemplateWhereInput[]
    OR?: FormTemplateWhereInput[]
    NOT?: FormTemplateWhereInput | FormTemplateWhereInput[]
    id?: IntFilter<"FormTemplate"> | number
    nome?: StringFilter<"FormTemplate"> | string
    descricao?: StringNullableFilter<"FormTemplate"> | string | null
    estrutura?: JsonFilter<"FormTemplate">
    criadoPorId?: IntFilter<"FormTemplate"> | number
    createdAt?: DateTimeFilter<"FormTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"FormTemplate"> | Date | string
    criadoPor?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
  }

  export type FormTemplateOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrderInput | SortOrder
    estrutura?: SortOrder
    criadoPorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    criadoPor?: FuncionarioOrderByWithRelationInput
    _relevance?: FormTemplateOrderByRelevanceInput
  }

  export type FormTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FormTemplateWhereInput | FormTemplateWhereInput[]
    OR?: FormTemplateWhereInput[]
    NOT?: FormTemplateWhereInput | FormTemplateWhereInput[]
    nome?: StringFilter<"FormTemplate"> | string
    descricao?: StringNullableFilter<"FormTemplate"> | string | null
    estrutura?: JsonFilter<"FormTemplate">
    criadoPorId?: IntFilter<"FormTemplate"> | number
    createdAt?: DateTimeFilter<"FormTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"FormTemplate"> | Date | string
    criadoPor?: XOR<FuncionarioScalarRelationFilter, FuncionarioWhereInput>
  }, "id">

  export type FormTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrderInput | SortOrder
    estrutura?: SortOrder
    criadoPorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FormTemplateCountOrderByAggregateInput
    _avg?: FormTemplateAvgOrderByAggregateInput
    _max?: FormTemplateMaxOrderByAggregateInput
    _min?: FormTemplateMinOrderByAggregateInput
    _sum?: FormTemplateSumOrderByAggregateInput
  }

  export type FormTemplateScalarWhereWithAggregatesInput = {
    AND?: FormTemplateScalarWhereWithAggregatesInput | FormTemplateScalarWhereWithAggregatesInput[]
    OR?: FormTemplateScalarWhereWithAggregatesInput[]
    NOT?: FormTemplateScalarWhereWithAggregatesInput | FormTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FormTemplate"> | number
    nome?: StringWithAggregatesFilter<"FormTemplate"> | string
    descricao?: StringNullableWithAggregatesFilter<"FormTemplate"> | string | null
    estrutura?: JsonWithAggregatesFilter<"FormTemplate">
    criadoPorId?: IntWithAggregatesFilter<"FormTemplate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FormTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FormTemplate"> | Date | string
  }

  export type CandidatoWhereInput = {
    AND?: CandidatoWhereInput | CandidatoWhereInput[]
    OR?: CandidatoWhereInput[]
    NOT?: CandidatoWhereInput | CandidatoWhereInput[]
    id?: IntFilter<"Candidato"> | number
    nome?: StringFilter<"Candidato"> | string
    dataNascimento?: DateTimeFilter<"Candidato"> | Date | string
    genero?: StringFilter<"Candidato"> | string
    telefone?: StringFilter<"Candidato"> | string
    cpf?: StringFilter<"Candidato"> | string
    estado?: StringFilter<"Candidato"> | string
    cidade?: StringFilter<"Candidato"> | string
    bairro?: StringFilter<"Candidato"> | string
    rua?: StringFilter<"Candidato"> | string
    numero?: StringFilter<"Candidato"> | string
    cep?: StringFilter<"Candidato"> | string
    complemento?: StringNullableFilter<"Candidato"> | string | null
    email?: StringFilter<"Candidato"> | string
    status?: StringFilter<"Candidato"> | string
    createdAt?: DateTimeFilter<"Candidato"> | Date | string
    updatedAt?: DateTimeFilter<"Candidato"> | Date | string
    arquivos?: ArquivoCandidatoListRelationFilter
  }

  export type CandidatoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    dataNascimento?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    estado?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    cep?: SortOrder
    complemento?: SortOrderInput | SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    arquivos?: ArquivoCandidatoOrderByRelationAggregateInput
    _relevance?: CandidatoOrderByRelevanceInput
  }

  export type CandidatoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CandidatoWhereInput | CandidatoWhereInput[]
    OR?: CandidatoWhereInput[]
    NOT?: CandidatoWhereInput | CandidatoWhereInput[]
    nome?: StringFilter<"Candidato"> | string
    dataNascimento?: DateTimeFilter<"Candidato"> | Date | string
    genero?: StringFilter<"Candidato"> | string
    telefone?: StringFilter<"Candidato"> | string
    cpf?: StringFilter<"Candidato"> | string
    estado?: StringFilter<"Candidato"> | string
    cidade?: StringFilter<"Candidato"> | string
    bairro?: StringFilter<"Candidato"> | string
    rua?: StringFilter<"Candidato"> | string
    numero?: StringFilter<"Candidato"> | string
    cep?: StringFilter<"Candidato"> | string
    complemento?: StringNullableFilter<"Candidato"> | string | null
    email?: StringFilter<"Candidato"> | string
    status?: StringFilter<"Candidato"> | string
    createdAt?: DateTimeFilter<"Candidato"> | Date | string
    updatedAt?: DateTimeFilter<"Candidato"> | Date | string
    arquivos?: ArquivoCandidatoListRelationFilter
  }, "id">

  export type CandidatoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    dataNascimento?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    estado?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    cep?: SortOrder
    complemento?: SortOrderInput | SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CandidatoCountOrderByAggregateInput
    _avg?: CandidatoAvgOrderByAggregateInput
    _max?: CandidatoMaxOrderByAggregateInput
    _min?: CandidatoMinOrderByAggregateInput
    _sum?: CandidatoSumOrderByAggregateInput
  }

  export type CandidatoScalarWhereWithAggregatesInput = {
    AND?: CandidatoScalarWhereWithAggregatesInput | CandidatoScalarWhereWithAggregatesInput[]
    OR?: CandidatoScalarWhereWithAggregatesInput[]
    NOT?: CandidatoScalarWhereWithAggregatesInput | CandidatoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Candidato"> | number
    nome?: StringWithAggregatesFilter<"Candidato"> | string
    dataNascimento?: DateTimeWithAggregatesFilter<"Candidato"> | Date | string
    genero?: StringWithAggregatesFilter<"Candidato"> | string
    telefone?: StringWithAggregatesFilter<"Candidato"> | string
    cpf?: StringWithAggregatesFilter<"Candidato"> | string
    estado?: StringWithAggregatesFilter<"Candidato"> | string
    cidade?: StringWithAggregatesFilter<"Candidato"> | string
    bairro?: StringWithAggregatesFilter<"Candidato"> | string
    rua?: StringWithAggregatesFilter<"Candidato"> | string
    numero?: StringWithAggregatesFilter<"Candidato"> | string
    cep?: StringWithAggregatesFilter<"Candidato"> | string
    complemento?: StringNullableWithAggregatesFilter<"Candidato"> | string | null
    email?: StringWithAggregatesFilter<"Candidato"> | string
    status?: StringWithAggregatesFilter<"Candidato"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Candidato"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Candidato"> | Date | string
  }

  export type ArquivoCandidatoWhereInput = {
    AND?: ArquivoCandidatoWhereInput | ArquivoCandidatoWhereInput[]
    OR?: ArquivoCandidatoWhereInput[]
    NOT?: ArquivoCandidatoWhereInput | ArquivoCandidatoWhereInput[]
    id?: IntFilter<"ArquivoCandidato"> | number
    nomeArquivo?: StringFilter<"ArquivoCandidato"> | string
    campoOriginal?: StringFilter<"ArquivoCandidato"> | string
    candidatoId?: IntFilter<"ArquivoCandidato"> | number
    candidato?: XOR<CandidatoScalarRelationFilter, CandidatoWhereInput>
  }

  export type ArquivoCandidatoOrderByWithRelationInput = {
    id?: SortOrder
    nomeArquivo?: SortOrder
    campoOriginal?: SortOrder
    candidatoId?: SortOrder
    candidato?: CandidatoOrderByWithRelationInput
    _relevance?: ArquivoCandidatoOrderByRelevanceInput
  }

  export type ArquivoCandidatoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArquivoCandidatoWhereInput | ArquivoCandidatoWhereInput[]
    OR?: ArquivoCandidatoWhereInput[]
    NOT?: ArquivoCandidatoWhereInput | ArquivoCandidatoWhereInput[]
    nomeArquivo?: StringFilter<"ArquivoCandidato"> | string
    campoOriginal?: StringFilter<"ArquivoCandidato"> | string
    candidatoId?: IntFilter<"ArquivoCandidato"> | number
    candidato?: XOR<CandidatoScalarRelationFilter, CandidatoWhereInput>
  }, "id">

  export type ArquivoCandidatoOrderByWithAggregationInput = {
    id?: SortOrder
    nomeArquivo?: SortOrder
    campoOriginal?: SortOrder
    candidatoId?: SortOrder
    _count?: ArquivoCandidatoCountOrderByAggregateInput
    _avg?: ArquivoCandidatoAvgOrderByAggregateInput
    _max?: ArquivoCandidatoMaxOrderByAggregateInput
    _min?: ArquivoCandidatoMinOrderByAggregateInput
    _sum?: ArquivoCandidatoSumOrderByAggregateInput
  }

  export type ArquivoCandidatoScalarWhereWithAggregatesInput = {
    AND?: ArquivoCandidatoScalarWhereWithAggregatesInput | ArquivoCandidatoScalarWhereWithAggregatesInput[]
    OR?: ArquivoCandidatoScalarWhereWithAggregatesInput[]
    NOT?: ArquivoCandidatoScalarWhereWithAggregatesInput | ArquivoCandidatoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ArquivoCandidato"> | number
    nomeArquivo?: StringWithAggregatesFilter<"ArquivoCandidato"> | string
    campoOriginal?: StringWithAggregatesFilter<"ArquivoCandidato"> | string
    candidatoId?: IntWithAggregatesFilter<"ArquivoCandidato"> | number
  }

  export type FuncionarioCreateInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioCreateManyInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
  }

  export type FuncionarioUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FuncionarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClienteCreateInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateManyInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
  }

  export type ClienteUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
  }

  export type ClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
  }

  export type Funil_VendasCreateInput = {
    estagioNome: string
    clientes?: ClienteCreateNestedManyWithoutFunilVendasInput
    historico?: HistoricoFunilCreateNestedManyWithoutFunilVendasInput
  }

  export type Funil_VendasUncheckedCreateInput = {
    id?: number
    estagioNome: string
    clientes?: ClienteUncheckedCreateNestedManyWithoutFunilVendasInput
    historico?: HistoricoFunilUncheckedCreateNestedManyWithoutFunilVendasInput
  }

  export type Funil_VendasUpdateInput = {
    estagioNome?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteUpdateManyWithoutFunilVendasNestedInput
    historico?: HistoricoFunilUpdateManyWithoutFunilVendasNestedInput
  }

  export type Funil_VendasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    estagioNome?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteUncheckedUpdateManyWithoutFunilVendasNestedInput
    historico?: HistoricoFunilUncheckedUpdateManyWithoutFunilVendasNestedInput
  }

  export type Funil_VendasCreateManyInput = {
    id?: number
    estagioNome: string
  }

  export type Funil_VendasUpdateManyMutationInput = {
    estagioNome?: StringFieldUpdateOperationsInput | string
  }

  export type Funil_VendasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    estagioNome?: StringFieldUpdateOperationsInput | string
  }

  export type EventoCreateInput = {
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizador: FuncionarioCreateNestedOneWithoutEventosOrganizadosInput
    funcionariosConvidados?: FuncionariosConvidadosCreateNestedManyWithoutEventoInput
    notificacoes?: NotificacaoCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateInput = {
    id?: number
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizadorId: number
    funcionariosConvidados?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutEventoInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizador?: FuncionarioUpdateOneRequiredWithoutEventosOrganizadosNestedInput | undefined
    funcionariosConvidados?: FuncionariosConvidadosUpdateManyWithoutEventoNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number | undefined
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizadorId?: IntFieldUpdateOperationsInput | number | undefined
    funcionariosConvidados?: FuncionariosConvidadosUncheckedUpdateManyWithoutEventoNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoCreateManyInput = {
    id?: number
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizadorId: number
  }

  export type EventoUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizadorId?: IntFieldUpdateOperationsInput | number
  }

  export type ContatoClienteCreateInput = {
    tipoContato: string
    valorContrato: string
    cliente: ClienteCreateNestedOneWithoutContatosInput
  }

  export type ContatoClienteUncheckedCreateInput = {
    id?: number
    tipoContato: string
    valorContrato: string
    clienteId: number
  }

  export type ContatoClienteUpdateInput = {
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutContatosNestedInput
  }

  export type ContatoClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type ContatoClienteCreateManyInput = {
    id?: number
    tipoContato: string
    valorContrato: string
    clienteId: number
  }

  export type ContatoClienteUpdateManyMutationInput = {
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
  }

  export type ContatoClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type AgendamentoInteracaoCreateInput = {
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    funcionario: FuncionarioCreateNestedOneWithoutAgendamentosInteracaoInput
    cliente: ClienteCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentoInteracaoUncheckedCreateInput = {
    id?: number
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    funcionarioId: number
    clienteId: number
  }

  export type AgendamentoInteracaoUpdateInput = {
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    funcionario?: FuncionarioUpdateOneRequiredWithoutAgendamentosInteracaoNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentoInteracaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    funcionarioId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type AgendamentoInteracaoCreateManyInput = {
    id?: number
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    funcionarioId: number
    clienteId: number
  }

  export type AgendamentoInteracaoUpdateManyMutationInput = {
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgendamentoInteracaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    funcionarioId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoFunilCreateInput = {
    dataMovimentacao: Date | string
    cliente: ClienteCreateNestedOneWithoutHistoricoFunilInput
    funilVendas: Funil_VendasCreateNestedOneWithoutHistoricoInput
  }

  export type HistoricoFunilUncheckedCreateInput = {
    id?: number
    dataMovimentacao: Date | string
    clienteId: number
    funilId: number
  }

  export type HistoricoFunilUpdateInput = {
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUpdateOneRequiredWithoutHistoricoFunilNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutHistoricoNestedInput
  }

  export type HistoricoFunilUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    clienteId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoFunilCreateManyInput = {
    id?: number
    dataMovimentacao: Date | string
    clienteId: number
    funilId: number
  }

  export type HistoricoFunilUpdateManyMutationInput = {
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoFunilUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    clienteId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
  }

  export type InteracaoClienteCreateInput = {
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    funcionario: FuncionarioCreateNestedOneWithoutInteracoesClienteInput
    cliente: ClienteCreateNestedOneWithoutInteracoesInput
  }

  export type InteracaoClienteUncheckedCreateInput = {
    id?: number
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    funcionarioId: number
    clienteId: number
  }

  export type InteracaoClienteUpdateInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutInteracoesClienteNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutInteracoesNestedInput
  }

  export type InteracaoClienteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type InteracaoClienteCreateManyInput = {
    id?: number
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    funcionarioId: number
    clienteId: number
  }

  export type InteracaoClienteUpdateManyMutationInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
  }

  export type InteracaoClienteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type VendaCreateInput = {
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    funcionario: FuncionarioCreateNestedOneWithoutVendasRealizadasInput
    cliente: ClienteCreateNestedOneWithoutVendasInput
  }

  export type VendaUncheckedCreateInput = {
    id?: number
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    funcionarioId: number
    clienteId: number
  }

  export type VendaUpdateInput = {
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutVendasRealizadasNestedInput
    cliente?: ClienteUpdateOneRequiredWithoutVendasNestedInput
  }

  export type VendaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type VendaCreateManyInput = {
    id?: number
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    funcionarioId: number
    clienteId: number
  }

  export type VendaUpdateManyMutationInput = {
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type VendaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type FuncionariosConvidadosCreateInput = {
    evento: EventoCreateNestedOneWithoutFuncionariosConvidadosInput
    funcionario: FuncionarioCreateNestedOneWithoutConvitesEventosInput
    notificacoes?: NotificacaoConvidadosCreateNestedManyWithoutConviteInput
    presenca?: PresencaCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosUncheckedCreateInput = {
    eventoId: number
    funcionarioId: number
    notificacoes?: NotificacaoConvidadosUncheckedCreateNestedManyWithoutConviteInput
    presenca?: PresencaUncheckedCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosUpdateInput = {
    evento?: EventoUpdateOneRequiredWithoutFuncionariosConvidadosNestedInput
    funcionario?: FuncionarioUpdateOneRequiredWithoutConvitesEventosNestedInput
    notificacoes?: NotificacaoConvidadosUpdateManyWithoutConviteNestedInput
    presenca?: PresencaUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    notificacoes?: NotificacaoConvidadosUncheckedUpdateManyWithoutConviteNestedInput
    presenca?: PresencaUncheckedUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosCreateManyInput = {
    eventoId: number
    funcionarioId: number
  }

  export type FuncionariosConvidadosUpdateManyMutationInput = {

  }

  export type FuncionariosConvidadosUncheckedUpdateManyInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificacaoCreateInput = {
    titulo: string
    corpo?: string | null
    evento: EventoCreateNestedOneWithoutNotificacoesInput
    convidados?: NotificacaoConvidadosCreateNestedManyWithoutNotificacaoInput
  }

  export type NotificacaoUncheckedCreateInput = {
    id?: number
    titulo: string
    corpo?: string | null
    eventoId: number
    convidados?: NotificacaoConvidadosUncheckedCreateNestedManyWithoutNotificacaoInput
  }

  export type NotificacaoUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    evento?: EventoUpdateOneRequiredWithoutNotificacoesNestedInput
    convidados?: NotificacaoConvidadosUpdateManyWithoutNotificacaoNestedInput
  }

  export type NotificacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    eventoId?: IntFieldUpdateOperationsInput | number
    convidados?: NotificacaoConvidadosUncheckedUpdateManyWithoutNotificacaoNestedInput
  }

  export type NotificacaoCreateManyInput = {
    id?: number
    titulo: string
    corpo?: string | null
    eventoId: number
  }

  export type NotificacaoUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    eventoId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificacaoConvidadosCreateInput = {
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
    convite: FuncionariosConvidadosCreateNestedOneWithoutNotificacoesInput
    notificacao: NotificacaoCreateNestedOneWithoutConvidadosInput
  }

  export type NotificacaoConvidadosUncheckedCreateInput = {
    eventoId: number
    funcionarioId: number
    notificacaoId: number
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
  }

  export type NotificacaoConvidadosUpdateInput = {
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
    convite?: FuncionariosConvidadosUpdateOneRequiredWithoutNotificacoesNestedInput
    notificacao?: NotificacaoUpdateOneRequiredWithoutConvidadosNestedInput
  }

  export type NotificacaoConvidadosUncheckedUpdateInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    notificacaoId?: IntFieldUpdateOperationsInput | number
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type NotificacaoConvidadosCreateManyInput = {
    eventoId: number
    funcionarioId: number
    notificacaoId: number
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
  }

  export type NotificacaoConvidadosUpdateManyMutationInput = {
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type NotificacaoConvidadosUncheckedUpdateManyInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    notificacaoId?: IntFieldUpdateOperationsInput | number
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type PresencaCreateInput = {
    presente: boolean
    razaoRecusa?: string | null
    dataTermino?: Date | string | null
    linkFeedback?: string | null
    convite: FuncionariosConvidadosCreateNestedOneWithoutPresencaInput
  }

  export type PresencaUncheckedCreateInput = {
    id?: number
    presente: boolean
    razaoRecusa?: string | null
    dataTermino?: Date | string | null
    linkFeedback?: string | null
    eventoId: number
    funcionarioId: number
  }

  export type PresencaUpdateInput = {
    presente?: BoolFieldUpdateOperationsInput | boolean
    razaoRecusa?: NullableStringFieldUpdateOperationsInput | string | null
    dataTermino?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    linkFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    convite?: FuncionariosConvidadosUpdateOneRequiredWithoutPresencaNestedInput
  }

  export type PresencaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    presente?: BoolFieldUpdateOperationsInput | boolean
    razaoRecusa?: NullableStringFieldUpdateOperationsInput | string | null
    dataTermino?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    linkFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type PresencaCreateManyInput = {
    id?: number
    presente: boolean
    razaoRecusa?: string | null
    dataTermino?: Date | string | null
    linkFeedback?: string | null
    eventoId: number
    funcionarioId: number
  }

  export type PresencaUpdateManyMutationInput = {
    presente?: BoolFieldUpdateOperationsInput | boolean
    razaoRecusa?: NullableStringFieldUpdateOperationsInput | string | null
    dataTermino?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    linkFeedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresencaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    presente?: BoolFieldUpdateOperationsInput | boolean
    razaoRecusa?: NullableStringFieldUpdateOperationsInput | string | null
    dataTermino?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    linkFeedback?: NullableStringFieldUpdateOperationsInput | string | null
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type FormTemplateCreateInput = {
    nome: string
    descricao?: string | null
    estrutura: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    criadoPor: FuncionarioCreateNestedOneWithoutFormTemplatesCriadosInput
  }

  export type FormTemplateUncheckedCreateInput = {
    id?: number
    nome: string
    descricao?: string | null
    estrutura: JsonNullValueInput | InputJsonValue
    criadoPorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FormTemplateUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    criadoPor?: FuncionarioUpdateOneRequiredWithoutFormTemplatesCriadosNestedInput
  }

  export type FormTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    criadoPorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormTemplateCreateManyInput = {
    id?: number
    nome: string
    descricao?: string | null
    estrutura: JsonNullValueInput | InputJsonValue
    criadoPorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FormTemplateUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    criadoPorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatoCreateInput = {
    nome: string
    dataNascimento: Date | string
    genero: string
    telefone: string
    cpf: string
    estado: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    cep: string
    complemento?: string | null
    email: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    arquivos?: ArquivoCandidatoCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUncheckedCreateInput = {
    id?: number
    nome: string
    dataNascimento: Date | string
    genero: string
    telefone: string
    cpf: string
    estado: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    cep: string
    complemento?: string | null
    email: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    arquivos?: ArquivoCandidatoUncheckedCreateNestedManyWithoutCandidatoInput
  }

  export type CandidatoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivos?: ArquivoCandidatoUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arquivos?: ArquivoCandidatoUncheckedUpdateManyWithoutCandidatoNestedInput
  }

  export type CandidatoCreateManyInput = {
    id?: number
    nome: string
    dataNascimento: Date | string
    genero: string
    telefone: string
    cpf: string
    estado: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    cep: string
    complemento?: string | null
    email: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidatoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArquivoCandidatoCreateInput = {
    nomeArquivo: string
    campoOriginal: string
    candidato: CandidatoCreateNestedOneWithoutArquivosInput
  }

  export type ArquivoCandidatoUncheckedCreateInput = {
    id?: number
    nomeArquivo: string
    campoOriginal: string
    candidatoId: number
  }

  export type ArquivoCandidatoUpdateInput = {
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
    candidato?: CandidatoUpdateOneRequiredWithoutArquivosNestedInput
  }

  export type ArquivoCandidatoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type ArquivoCandidatoCreateManyInput = {
    id?: number
    nomeArquivo: string
    campoOriginal: string
    candidatoId: number
  }

  export type ArquivoCandidatoUpdateManyMutationInput = {
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
  }

  export type ArquivoCandidatoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
    candidatoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FuncionarioNullableScalarRelationFilter = {
    is?: FuncionarioWhereInput | null
    isNot?: FuncionarioWhereInput | null
  }

  export type FuncionarioListRelationFilter = {
    every?: FuncionarioWhereInput
    some?: FuncionarioWhereInput
    none?: FuncionarioWhereInput
  }

  export type AgendamentoInteracaoListRelationFilter = {
    every?: AgendamentoInteracaoWhereInput
    some?: AgendamentoInteracaoWhereInput
    none?: AgendamentoInteracaoWhereInput
  }

  export type ClienteListRelationFilter = {
    every?: ClienteWhereInput
    some?: ClienteWhereInput
    none?: ClienteWhereInput
  }

  export type InteracaoClienteListRelationFilter = {
    every?: InteracaoClienteWhereInput
    some?: InteracaoClienteWhereInput
    none?: InteracaoClienteWhereInput
  }

  export type EventoListRelationFilter = {
    every?: EventoWhereInput
    some?: EventoWhereInput
    none?: EventoWhereInput
  }

  export type FuncionariosConvidadosListRelationFilter = {
    every?: FuncionariosConvidadosWhereInput
    some?: FuncionariosConvidadosWhereInput
    none?: FuncionariosConvidadosWhereInput
  }

  export type VendaListRelationFilter = {
    every?: VendaWhereInput
    some?: VendaWhereInput
    none?: VendaWhereInput
  }

  export type FormTemplateListRelationFilter = {
    every?: FormTemplateWhereInput
    some?: FormTemplateWhereInput
    none?: FormTemplateWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FuncionarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgendamentoInteracaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InteracaoClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FuncionariosConvidadosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VendaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FormTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FuncionarioOrderByRelevanceInput = {
    fields: FuncionarioOrderByRelevanceFieldEnum | FuncionarioOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FuncionarioCountOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cargo?: SortOrder
    email?: SortOrder
    local?: SortOrder
    nivelAcesso?: SortOrder
    senhaHash?: SortOrder
    dataNascimento?: SortOrder
    gerenteId?: SortOrder
  }

  export type FuncionarioAvgOrderByAggregateInput = {
    id?: SortOrder
    gerenteId?: SortOrder
  }

  export type FuncionarioMaxOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cargo?: SortOrder
    email?: SortOrder
    local?: SortOrder
    nivelAcesso?: SortOrder
    senhaHash?: SortOrder
    dataNascimento?: SortOrder
    gerenteId?: SortOrder
  }

  export type FuncionarioMinOrderByAggregateInput = {
    id?: SortOrder
    cpf?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cargo?: SortOrder
    email?: SortOrder
    local?: SortOrder
    nivelAcesso?: SortOrder
    senhaHash?: SortOrder
    dataNascimento?: SortOrder
    gerenteId?: SortOrder
  }

  export type FuncionarioSumOrderByAggregateInput = {
    id?: SortOrder
    gerenteId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FuncionarioScalarRelationFilter = {
    is?: FuncionarioWhereInput
    isNot?: FuncionarioWhereInput
  }

  export type Funil_VendasScalarRelationFilter = {
    is?: Funil_VendasWhereInput
    isNot?: Funil_VendasWhereInput
  }

  export type ContatoClienteListRelationFilter = {
    every?: ContatoClienteWhereInput
    some?: ContatoClienteWhereInput
    none?: ContatoClienteWhereInput
  }

  export type HistoricoFunilListRelationFilter = {
    every?: HistoricoFunilWhereInput
    some?: HistoricoFunilWhereInput
    none?: HistoricoFunilWhereInput
  }

  export type ContatoClienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoricoFunilOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClienteOrderByRelevanceInput = {
    fields: ClienteOrderByRelevanceFieldEnum | ClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ClienteCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
  }

  export type ClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
  }

  export type ClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
  }

  export type ClienteMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    endereco?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
  }

  export type ClienteSumOrderByAggregateInput = {
    id?: SortOrder
    funcionarioId?: SortOrder
    funilId?: SortOrder
  }

  export type Funil_VendasOrderByRelevanceInput = {
    fields: Funil_VendasOrderByRelevanceFieldEnum | Funil_VendasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Funil_VendasCountOrderByAggregateInput = {
    id?: SortOrder
    estagioNome?: SortOrder
  }

  export type Funil_VendasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Funil_VendasMaxOrderByAggregateInput = {
    id?: SortOrder
    estagioNome?: SortOrder
  }

  export type Funil_VendasMinOrderByAggregateInput = {
    id?: SortOrder
    estagioNome?: SortOrder
  }

  export type Funil_VendasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificacaoListRelationFilter = {
    every?: NotificacaoWhereInput
    some?: NotificacaoWhereInput
    none?: NotificacaoWhereInput
  }

  export type NotificacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoOrderByRelevanceInput = {
    fields: EventoOrderByRelevanceFieldEnum | EventoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EventoCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    desc?: SortOrder
    dataIni?: SortOrder
    duracaoH?: SortOrder
    link?: SortOrder
    status?: SortOrder
    organizadorId?: SortOrder
  }

  export type EventoAvgOrderByAggregateInput = {
    id?: SortOrder
    duracaoH?: SortOrder
    organizadorId?: SortOrder
  }

  export type EventoMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    desc?: SortOrder
    dataIni?: SortOrder
    duracaoH?: SortOrder
    link?: SortOrder
    status?: SortOrder
    organizadorId?: SortOrder
  }

  export type EventoMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    desc?: SortOrder
    dataIni?: SortOrder
    duracaoH?: SortOrder
    link?: SortOrder
    status?: SortOrder
    organizadorId?: SortOrder
  }

  export type EventoSumOrderByAggregateInput = {
    id?: SortOrder
    duracaoH?: SortOrder
    organizadorId?: SortOrder
  }

  export type ClienteScalarRelationFilter = {
    is?: ClienteWhereInput
    isNot?: ClienteWhereInput
  }

  export type ContatoClienteOrderByRelevanceInput = {
    fields: ContatoClienteOrderByRelevanceFieldEnum | ContatoClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ContatoClienteCountOrderByAggregateInput = {
    id?: SortOrder
    tipoContato?: SortOrder
    valorContrato?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    tipoContato?: SortOrder
    valorContrato?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoClienteMinOrderByAggregateInput = {
    id?: SortOrder
    tipoContato?: SortOrder
    valorContrato?: SortOrder
    clienteId?: SortOrder
  }

  export type ContatoClienteSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AgendamentoInteracaoOrderByRelevanceInput = {
    fields: AgendamentoInteracaoOrderByRelevanceFieldEnum | AgendamentoInteracaoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AgendamentoInteracaoCountOrderByAggregateInput = {
    id?: SortOrder
    dataMarcada?: SortOrder
    tipoInteracao?: SortOrder
    status?: SortOrder
    notas?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type AgendamentoInteracaoAvgOrderByAggregateInput = {
    id?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type AgendamentoInteracaoMaxOrderByAggregateInput = {
    id?: SortOrder
    dataMarcada?: SortOrder
    tipoInteracao?: SortOrder
    status?: SortOrder
    notas?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type AgendamentoInteracaoMinOrderByAggregateInput = {
    id?: SortOrder
    dataMarcada?: SortOrder
    tipoInteracao?: SortOrder
    status?: SortOrder
    notas?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type AgendamentoInteracaoSumOrderByAggregateInput = {
    id?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type HistoricoFunilCountOrderByAggregateInput = {
    id?: SortOrder
    dataMovimentacao?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
  }

  export type HistoricoFunilAvgOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
  }

  export type HistoricoFunilMaxOrderByAggregateInput = {
    id?: SortOrder
    dataMovimentacao?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
  }

  export type HistoricoFunilMinOrderByAggregateInput = {
    id?: SortOrder
    dataMovimentacao?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
  }

  export type HistoricoFunilSumOrderByAggregateInput = {
    id?: SortOrder
    clienteId?: SortOrder
    funilId?: SortOrder
  }

  export type InteracaoClienteOrderByRelevanceInput = {
    fields: InteracaoClienteOrderByRelevanceFieldEnum | InteracaoClienteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InteracaoClienteCountOrderByAggregateInput = {
    id?: SortOrder
    dataInteracao?: SortOrder
    tipoInteracao?: SortOrder
    relatorioInteracao?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type InteracaoClienteAvgOrderByAggregateInput = {
    id?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type InteracaoClienteMaxOrderByAggregateInput = {
    id?: SortOrder
    dataInteracao?: SortOrder
    tipoInteracao?: SortOrder
    relatorioInteracao?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type InteracaoClienteMinOrderByAggregateInput = {
    id?: SortOrder
    dataInteracao?: SortOrder
    tipoInteracao?: SortOrder
    relatorioInteracao?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type InteracaoClienteSumOrderByAggregateInput = {
    id?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type VendaCountOrderByAggregateInput = {
    id?: SortOrder
    dataVenda?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type VendaAvgOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type VendaMaxOrderByAggregateInput = {
    id?: SortOrder
    dataVenda?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type VendaMinOrderByAggregateInput = {
    id?: SortOrder
    dataVenda?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type VendaSumOrderByAggregateInput = {
    id?: SortOrder
    total?: SortOrder
    funcionarioId?: SortOrder
    clienteId?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EventoScalarRelationFilter = {
    is?: EventoWhereInput
    isNot?: EventoWhereInput
  }

  export type NotificacaoConvidadosListRelationFilter = {
    every?: NotificacaoConvidadosWhereInput
    some?: NotificacaoConvidadosWhereInput
    none?: NotificacaoConvidadosWhereInput
  }

  export type PresencaNullableScalarRelationFilter = {
    is?: PresencaWhereInput | null
    isNot?: PresencaWhereInput | null
  }

  export type NotificacaoConvidadosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FuncionariosConvidadosEventoIdFuncionarioIdCompoundUniqueInput = {
    eventoId: number
    funcionarioId: number
  }

  export type FuncionariosConvidadosCountOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type FuncionariosConvidadosAvgOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type FuncionariosConvidadosMaxOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type FuncionariosConvidadosMinOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type FuncionariosConvidadosSumOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type NotificacaoOrderByRelevanceInput = {
    fields: NotificacaoOrderByRelevanceFieldEnum | NotificacaoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificacaoCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    corpo?: SortOrder
    eventoId?: SortOrder
  }

  export type NotificacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
  }

  export type NotificacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    corpo?: SortOrder
    eventoId?: SortOrder
  }

  export type NotificacaoMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    corpo?: SortOrder
    eventoId?: SortOrder
  }

  export type NotificacaoSumOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FuncionariosConvidadosScalarRelationFilter = {
    is?: FuncionariosConvidadosWhereInput
    isNot?: FuncionariosConvidadosWhereInput
  }

  export type NotificacaoScalarRelationFilter = {
    is?: NotificacaoWhereInput
    isNot?: NotificacaoWhereInput
  }

  export type NotificacaoConvidadosOrderByRelevanceInput = {
    fields: NotificacaoConvidadosOrderByRelevanceFieldEnum | NotificacaoConvidadosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificacaoConvidadosEventoIdFuncionarioIdNotificacaoIdCompoundUniqueInput = {
    eventoId: number
    funcionarioId: number
    notificacaoId: number
  }

  export type NotificacaoConvidadosCountOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
    statusLeitura?: SortOrder
    dataLeitura?: SortOrder
    prioridade?: SortOrder
  }

  export type NotificacaoConvidadosAvgOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
  }

  export type NotificacaoConvidadosMaxOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
    statusLeitura?: SortOrder
    dataLeitura?: SortOrder
    prioridade?: SortOrder
  }

  export type NotificacaoConvidadosMinOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
    statusLeitura?: SortOrder
    dataLeitura?: SortOrder
    prioridade?: SortOrder
  }

  export type NotificacaoConvidadosSumOrderByAggregateInput = {
    eventoId?: SortOrder
    funcionarioId?: SortOrder
    notificacaoId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PresencaOrderByRelevanceInput = {
    fields: PresencaOrderByRelevanceFieldEnum | PresencaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PresencaEventoIdFuncionarioIdCompoundUniqueInput = {
    eventoId: number
    funcionarioId: number
  }

  export type PresencaCountOrderByAggregateInput = {
    id?: SortOrder
    presente?: SortOrder
    razaoRecusa?: SortOrder
    dataTermino?: SortOrder
    linkFeedback?: SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type PresencaAvgOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type PresencaMaxOrderByAggregateInput = {
    id?: SortOrder
    presente?: SortOrder
    razaoRecusa?: SortOrder
    dataTermino?: SortOrder
    linkFeedback?: SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type PresencaMinOrderByAggregateInput = {
    id?: SortOrder
    presente?: SortOrder
    razaoRecusa?: SortOrder
    dataTermino?: SortOrder
    linkFeedback?: SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }

  export type PresencaSumOrderByAggregateInput = {
    id?: SortOrder
    eventoId?: SortOrder
    funcionarioId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FormTemplateOrderByRelevanceInput = {
    fields: FormTemplateOrderByRelevanceFieldEnum | FormTemplateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type FormTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    estrutura?: SortOrder
    criadoPorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FormTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
    criadoPorId?: SortOrder
  }

  export type FormTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    criadoPorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FormTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    criadoPorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FormTemplateSumOrderByAggregateInput = {
    id?: SortOrder
    criadoPorId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ArquivoCandidatoListRelationFilter = {
    every?: ArquivoCandidatoWhereInput
    some?: ArquivoCandidatoWhereInput
    none?: ArquivoCandidatoWhereInput
  }

  export type ArquivoCandidatoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidatoOrderByRelevanceInput = {
    fields: CandidatoOrderByRelevanceFieldEnum | CandidatoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CandidatoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    dataNascimento?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    estado?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    cep?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidatoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CandidatoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    dataNascimento?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    estado?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    cep?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidatoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    dataNascimento?: SortOrder
    genero?: SortOrder
    telefone?: SortOrder
    cpf?: SortOrder
    estado?: SortOrder
    cidade?: SortOrder
    bairro?: SortOrder
    rua?: SortOrder
    numero?: SortOrder
    cep?: SortOrder
    complemento?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidatoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CandidatoScalarRelationFilter = {
    is?: CandidatoWhereInput
    isNot?: CandidatoWhereInput
  }

  export type ArquivoCandidatoOrderByRelevanceInput = {
    fields: ArquivoCandidatoOrderByRelevanceFieldEnum | ArquivoCandidatoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ArquivoCandidatoCountOrderByAggregateInput = {
    id?: SortOrder
    nomeArquivo?: SortOrder
    campoOriginal?: SortOrder
    candidatoId?: SortOrder
  }

  export type ArquivoCandidatoAvgOrderByAggregateInput = {
    id?: SortOrder
    candidatoId?: SortOrder
  }

  export type ArquivoCandidatoMaxOrderByAggregateInput = {
    id?: SortOrder
    nomeArquivo?: SortOrder
    campoOriginal?: SortOrder
    candidatoId?: SortOrder
  }

  export type ArquivoCandidatoMinOrderByAggregateInput = {
    id?: SortOrder
    nomeArquivo?: SortOrder
    campoOriginal?: SortOrder
    candidatoId?: SortOrder
  }

  export type ArquivoCandidatoSumOrderByAggregateInput = {
    id?: SortOrder
    candidatoId?: SortOrder
  }

  export type FuncionarioCreateNestedOneWithoutSubordinadosInput = {
    create?: XOR<FuncionarioCreateWithoutSubordinadosInput, FuncionarioUncheckedCreateWithoutSubordinadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutSubordinadosInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type FuncionarioCreateNestedManyWithoutGerenteInput = {
    create?: XOR<FuncionarioCreateWithoutGerenteInput, FuncionarioUncheckedCreateWithoutGerenteInput> | FuncionarioCreateWithoutGerenteInput[] | FuncionarioUncheckedCreateWithoutGerenteInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutGerenteInput | FuncionarioCreateOrConnectWithoutGerenteInput[]
    createMany?: FuncionarioCreateManyGerenteInputEnvelope
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
  }

  export type AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput> | AgendamentoInteracaoCreateWithoutFuncionarioInput[] | AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput | AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput[]
    createMany?: AgendamentoInteracaoCreateManyFuncionarioInputEnvelope
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
  }

  export type ClienteCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<ClienteCreateWithoutFuncionarioInput, ClienteUncheckedCreateWithoutFuncionarioInput> | ClienteCreateWithoutFuncionarioInput[] | ClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFuncionarioInput | ClienteCreateOrConnectWithoutFuncionarioInput[]
    createMany?: ClienteCreateManyFuncionarioInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type InteracaoClienteCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<InteracaoClienteCreateWithoutFuncionarioInput, InteracaoClienteUncheckedCreateWithoutFuncionarioInput> | InteracaoClienteCreateWithoutFuncionarioInput[] | InteracaoClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutFuncionarioInput | InteracaoClienteCreateOrConnectWithoutFuncionarioInput[]
    createMany?: InteracaoClienteCreateManyFuncionarioInputEnvelope
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
  }

  export type EventoCreateNestedManyWithoutOrganizadorInput = {
    create?: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput> | EventoCreateWithoutOrganizadorInput[] | EventoUncheckedCreateWithoutOrganizadorInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutOrganizadorInput | EventoCreateOrConnectWithoutOrganizadorInput[]
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput> | FuncionariosConvidadosCreateWithoutFuncionarioInput[] | FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput | FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput[]
    createMany?: FuncionariosConvidadosCreateManyFuncionarioInputEnvelope
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
  }

  export type VendaCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<VendaCreateWithoutFuncionarioInput, VendaUncheckedCreateWithoutFuncionarioInput> | VendaCreateWithoutFuncionarioInput[] | VendaUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutFuncionarioInput | VendaCreateOrConnectWithoutFuncionarioInput[]
    createMany?: VendaCreateManyFuncionarioInputEnvelope
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
  }

  export type FormTemplateCreateNestedManyWithoutCriadoPorInput = {
    create?: XOR<FormTemplateCreateWithoutCriadoPorInput, FormTemplateUncheckedCreateWithoutCriadoPorInput> | FormTemplateCreateWithoutCriadoPorInput[] | FormTemplateUncheckedCreateWithoutCriadoPorInput[]
    connectOrCreate?: FormTemplateCreateOrConnectWithoutCriadoPorInput | FormTemplateCreateOrConnectWithoutCriadoPorInput[]
    createMany?: FormTemplateCreateManyCriadoPorInputEnvelope
    connect?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
  }

  export type FuncionarioUncheckedCreateNestedManyWithoutGerenteInput = {
    create?: XOR<FuncionarioCreateWithoutGerenteInput, FuncionarioUncheckedCreateWithoutGerenteInput> | FuncionarioCreateWithoutGerenteInput[] | FuncionarioUncheckedCreateWithoutGerenteInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutGerenteInput | FuncionarioCreateOrConnectWithoutGerenteInput[]
    createMany?: FuncionarioCreateManyGerenteInputEnvelope
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
  }

  export type AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput> | AgendamentoInteracaoCreateWithoutFuncionarioInput[] | AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput | AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput[]
    createMany?: AgendamentoInteracaoCreateManyFuncionarioInputEnvelope
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<ClienteCreateWithoutFuncionarioInput, ClienteUncheckedCreateWithoutFuncionarioInput> | ClienteCreateWithoutFuncionarioInput[] | ClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFuncionarioInput | ClienteCreateOrConnectWithoutFuncionarioInput[]
    createMany?: ClienteCreateManyFuncionarioInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<InteracaoClienteCreateWithoutFuncionarioInput, InteracaoClienteUncheckedCreateWithoutFuncionarioInput> | InteracaoClienteCreateWithoutFuncionarioInput[] | InteracaoClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutFuncionarioInput | InteracaoClienteCreateOrConnectWithoutFuncionarioInput[]
    createMany?: InteracaoClienteCreateManyFuncionarioInputEnvelope
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
  }

  export type EventoUncheckedCreateNestedManyWithoutOrganizadorInput = {
    create?: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput> | EventoCreateWithoutOrganizadorInput[] | EventoUncheckedCreateWithoutOrganizadorInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutOrganizadorInput | EventoCreateOrConnectWithoutOrganizadorInput[]
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput> | FuncionariosConvidadosCreateWithoutFuncionarioInput[] | FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput | FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput[]
    createMany?: FuncionariosConvidadosCreateManyFuncionarioInputEnvelope
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
  }

  export type VendaUncheckedCreateNestedManyWithoutFuncionarioInput = {
    create?: XOR<VendaCreateWithoutFuncionarioInput, VendaUncheckedCreateWithoutFuncionarioInput> | VendaCreateWithoutFuncionarioInput[] | VendaUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutFuncionarioInput | VendaCreateOrConnectWithoutFuncionarioInput[]
    createMany?: VendaCreateManyFuncionarioInputEnvelope
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
  }

  export type FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput = {
    create?: XOR<FormTemplateCreateWithoutCriadoPorInput, FormTemplateUncheckedCreateWithoutCriadoPorInput> | FormTemplateCreateWithoutCriadoPorInput[] | FormTemplateUncheckedCreateWithoutCriadoPorInput[]
    connectOrCreate?: FormTemplateCreateOrConnectWithoutCriadoPorInput | FormTemplateCreateOrConnectWithoutCriadoPorInput[]
    createMany?: FormTemplateCreateManyCriadoPorInputEnvelope
    connect?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FuncionarioUpdateOneWithoutSubordinadosNestedInput = {
    create?: XOR<FuncionarioCreateWithoutSubordinadosInput, FuncionarioUncheckedCreateWithoutSubordinadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutSubordinadosInput
    upsert?: FuncionarioUpsertWithoutSubordinadosInput
    disconnect?: FuncionarioWhereInput | boolean
    delete?: FuncionarioWhereInput | boolean
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutSubordinadosInput, FuncionarioUpdateWithoutSubordinadosInput>, FuncionarioUncheckedUpdateWithoutSubordinadosInput>
  }

  export type FuncionarioUpdateManyWithoutGerenteNestedInput = {
    create?: XOR<FuncionarioCreateWithoutGerenteInput, FuncionarioUncheckedCreateWithoutGerenteInput> | FuncionarioCreateWithoutGerenteInput[] | FuncionarioUncheckedCreateWithoutGerenteInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutGerenteInput | FuncionarioCreateOrConnectWithoutGerenteInput[]
    upsert?: FuncionarioUpsertWithWhereUniqueWithoutGerenteInput | FuncionarioUpsertWithWhereUniqueWithoutGerenteInput[]
    createMany?: FuncionarioCreateManyGerenteInputEnvelope
    set?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    disconnect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    delete?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    update?: FuncionarioUpdateWithWhereUniqueWithoutGerenteInput | FuncionarioUpdateWithWhereUniqueWithoutGerenteInput[]
    updateMany?: FuncionarioUpdateManyWithWhereWithoutGerenteInput | FuncionarioUpdateManyWithWhereWithoutGerenteInput[]
    deleteMany?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
  }

  export type AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput> | AgendamentoInteracaoCreateWithoutFuncionarioInput[] | AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput | AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput[]
    upsert?: AgendamentoInteracaoUpsertWithWhereUniqueWithoutFuncionarioInput | AgendamentoInteracaoUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: AgendamentoInteracaoCreateManyFuncionarioInputEnvelope
    set?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    disconnect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    delete?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    update?: AgendamentoInteracaoUpdateWithWhereUniqueWithoutFuncionarioInput | AgendamentoInteracaoUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: AgendamentoInteracaoUpdateManyWithWhereWithoutFuncionarioInput | AgendamentoInteracaoUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: AgendamentoInteracaoScalarWhereInput | AgendamentoInteracaoScalarWhereInput[]
  }

  export type ClienteUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<ClienteCreateWithoutFuncionarioInput, ClienteUncheckedCreateWithoutFuncionarioInput> | ClienteCreateWithoutFuncionarioInput[] | ClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFuncionarioInput | ClienteCreateOrConnectWithoutFuncionarioInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutFuncionarioInput | ClienteUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: ClienteCreateManyFuncionarioInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutFuncionarioInput | ClienteUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutFuncionarioInput | ClienteUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type InteracaoClienteUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<InteracaoClienteCreateWithoutFuncionarioInput, InteracaoClienteUncheckedCreateWithoutFuncionarioInput> | InteracaoClienteCreateWithoutFuncionarioInput[] | InteracaoClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutFuncionarioInput | InteracaoClienteCreateOrConnectWithoutFuncionarioInput[]
    upsert?: InteracaoClienteUpsertWithWhereUniqueWithoutFuncionarioInput | InteracaoClienteUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: InteracaoClienteCreateManyFuncionarioInputEnvelope
    set?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    disconnect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    delete?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    update?: InteracaoClienteUpdateWithWhereUniqueWithoutFuncionarioInput | InteracaoClienteUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: InteracaoClienteUpdateManyWithWhereWithoutFuncionarioInput | InteracaoClienteUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: InteracaoClienteScalarWhereInput | InteracaoClienteScalarWhereInput[]
  }

  export type EventoUpdateManyWithoutOrganizadorNestedInput = {
    create?: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput> | EventoCreateWithoutOrganizadorInput[] | EventoUncheckedCreateWithoutOrganizadorInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutOrganizadorInput | EventoCreateOrConnectWithoutOrganizadorInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutOrganizadorInput | EventoUpsertWithWhereUniqueWithoutOrganizadorInput[]
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutOrganizadorInput | EventoUpdateWithWhereUniqueWithoutOrganizadorInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutOrganizadorInput | EventoUpdateManyWithWhereWithoutOrganizadorInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput> | FuncionariosConvidadosCreateWithoutFuncionarioInput[] | FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput | FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput[]
    upsert?: FuncionariosConvidadosUpsertWithWhereUniqueWithoutFuncionarioInput | FuncionariosConvidadosUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: FuncionariosConvidadosCreateManyFuncionarioInputEnvelope
    set?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    disconnect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    delete?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    update?: FuncionariosConvidadosUpdateWithWhereUniqueWithoutFuncionarioInput | FuncionariosConvidadosUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: FuncionariosConvidadosUpdateManyWithWhereWithoutFuncionarioInput | FuncionariosConvidadosUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: FuncionariosConvidadosScalarWhereInput | FuncionariosConvidadosScalarWhereInput[]
  }

  export type VendaUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<VendaCreateWithoutFuncionarioInput, VendaUncheckedCreateWithoutFuncionarioInput> | VendaCreateWithoutFuncionarioInput[] | VendaUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutFuncionarioInput | VendaCreateOrConnectWithoutFuncionarioInput[]
    upsert?: VendaUpsertWithWhereUniqueWithoutFuncionarioInput | VendaUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: VendaCreateManyFuncionarioInputEnvelope
    set?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    disconnect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    delete?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    update?: VendaUpdateWithWhereUniqueWithoutFuncionarioInput | VendaUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: VendaUpdateManyWithWhereWithoutFuncionarioInput | VendaUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: VendaScalarWhereInput | VendaScalarWhereInput[]
  }

  export type FormTemplateUpdateManyWithoutCriadoPorNestedInput = {
    create?: XOR<FormTemplateCreateWithoutCriadoPorInput, FormTemplateUncheckedCreateWithoutCriadoPorInput> | FormTemplateCreateWithoutCriadoPorInput[] | FormTemplateUncheckedCreateWithoutCriadoPorInput[]
    connectOrCreate?: FormTemplateCreateOrConnectWithoutCriadoPorInput | FormTemplateCreateOrConnectWithoutCriadoPorInput[]
    upsert?: FormTemplateUpsertWithWhereUniqueWithoutCriadoPorInput | FormTemplateUpsertWithWhereUniqueWithoutCriadoPorInput[]
    createMany?: FormTemplateCreateManyCriadoPorInputEnvelope
    set?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    disconnect?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    delete?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    connect?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    update?: FormTemplateUpdateWithWhereUniqueWithoutCriadoPorInput | FormTemplateUpdateWithWhereUniqueWithoutCriadoPorInput[]
    updateMany?: FormTemplateUpdateManyWithWhereWithoutCriadoPorInput | FormTemplateUpdateManyWithWhereWithoutCriadoPorInput[]
    deleteMany?: FormTemplateScalarWhereInput | FormTemplateScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput = {
    create?: XOR<FuncionarioCreateWithoutGerenteInput, FuncionarioUncheckedCreateWithoutGerenteInput> | FuncionarioCreateWithoutGerenteInput[] | FuncionarioUncheckedCreateWithoutGerenteInput[]
    connectOrCreate?: FuncionarioCreateOrConnectWithoutGerenteInput | FuncionarioCreateOrConnectWithoutGerenteInput[]
    upsert?: FuncionarioUpsertWithWhereUniqueWithoutGerenteInput | FuncionarioUpsertWithWhereUniqueWithoutGerenteInput[]
    createMany?: FuncionarioCreateManyGerenteInputEnvelope
    set?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    disconnect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    delete?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    connect?: FuncionarioWhereUniqueInput | FuncionarioWhereUniqueInput[]
    update?: FuncionarioUpdateWithWhereUniqueWithoutGerenteInput | FuncionarioUpdateWithWhereUniqueWithoutGerenteInput[]
    updateMany?: FuncionarioUpdateManyWithWhereWithoutGerenteInput | FuncionarioUpdateManyWithWhereWithoutGerenteInput[]
    deleteMany?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
  }

  export type AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput> | AgendamentoInteracaoCreateWithoutFuncionarioInput[] | AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput | AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput[]
    upsert?: AgendamentoInteracaoUpsertWithWhereUniqueWithoutFuncionarioInput | AgendamentoInteracaoUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: AgendamentoInteracaoCreateManyFuncionarioInputEnvelope
    set?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    disconnect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    delete?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    update?: AgendamentoInteracaoUpdateWithWhereUniqueWithoutFuncionarioInput | AgendamentoInteracaoUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: AgendamentoInteracaoUpdateManyWithWhereWithoutFuncionarioInput | AgendamentoInteracaoUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: AgendamentoInteracaoScalarWhereInput | AgendamentoInteracaoScalarWhereInput[]
  }

  export type ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<ClienteCreateWithoutFuncionarioInput, ClienteUncheckedCreateWithoutFuncionarioInput> | ClienteCreateWithoutFuncionarioInput[] | ClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFuncionarioInput | ClienteCreateOrConnectWithoutFuncionarioInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutFuncionarioInput | ClienteUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: ClienteCreateManyFuncionarioInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutFuncionarioInput | ClienteUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutFuncionarioInput | ClienteUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<InteracaoClienteCreateWithoutFuncionarioInput, InteracaoClienteUncheckedCreateWithoutFuncionarioInput> | InteracaoClienteCreateWithoutFuncionarioInput[] | InteracaoClienteUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutFuncionarioInput | InteracaoClienteCreateOrConnectWithoutFuncionarioInput[]
    upsert?: InteracaoClienteUpsertWithWhereUniqueWithoutFuncionarioInput | InteracaoClienteUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: InteracaoClienteCreateManyFuncionarioInputEnvelope
    set?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    disconnect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    delete?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    update?: InteracaoClienteUpdateWithWhereUniqueWithoutFuncionarioInput | InteracaoClienteUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: InteracaoClienteUpdateManyWithWhereWithoutFuncionarioInput | InteracaoClienteUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: InteracaoClienteScalarWhereInput | InteracaoClienteScalarWhereInput[]
  }

  export type EventoUncheckedUpdateManyWithoutOrganizadorNestedInput = {
    create?: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput> | EventoCreateWithoutOrganizadorInput[] | EventoUncheckedCreateWithoutOrganizadorInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutOrganizadorInput | EventoCreateOrConnectWithoutOrganizadorInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutOrganizadorInput | EventoUpsertWithWhereUniqueWithoutOrganizadorInput[]
    createMany?: EventoCreateManyOrganizadorInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutOrganizadorInput | EventoUpdateWithWhereUniqueWithoutOrganizadorInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutOrganizadorInput | EventoUpdateManyWithWhereWithoutOrganizadorInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput> | FuncionariosConvidadosCreateWithoutFuncionarioInput[] | FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput | FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput[]
    upsert?: FuncionariosConvidadosUpsertWithWhereUniqueWithoutFuncionarioInput | FuncionariosConvidadosUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: FuncionariosConvidadosCreateManyFuncionarioInputEnvelope
    set?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    disconnect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    delete?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    update?: FuncionariosConvidadosUpdateWithWhereUniqueWithoutFuncionarioInput | FuncionariosConvidadosUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: FuncionariosConvidadosUpdateManyWithWhereWithoutFuncionarioInput | FuncionariosConvidadosUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: FuncionariosConvidadosScalarWhereInput | FuncionariosConvidadosScalarWhereInput[]
  }

  export type VendaUncheckedUpdateManyWithoutFuncionarioNestedInput = {
    create?: XOR<VendaCreateWithoutFuncionarioInput, VendaUncheckedCreateWithoutFuncionarioInput> | VendaCreateWithoutFuncionarioInput[] | VendaUncheckedCreateWithoutFuncionarioInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutFuncionarioInput | VendaCreateOrConnectWithoutFuncionarioInput[]
    upsert?: VendaUpsertWithWhereUniqueWithoutFuncionarioInput | VendaUpsertWithWhereUniqueWithoutFuncionarioInput[]
    createMany?: VendaCreateManyFuncionarioInputEnvelope
    set?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    disconnect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    delete?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    update?: VendaUpdateWithWhereUniqueWithoutFuncionarioInput | VendaUpdateWithWhereUniqueWithoutFuncionarioInput[]
    updateMany?: VendaUpdateManyWithWhereWithoutFuncionarioInput | VendaUpdateManyWithWhereWithoutFuncionarioInput[]
    deleteMany?: VendaScalarWhereInput | VendaScalarWhereInput[]
  }

  export type FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput = {
    create?: XOR<FormTemplateCreateWithoutCriadoPorInput, FormTemplateUncheckedCreateWithoutCriadoPorInput> | FormTemplateCreateWithoutCriadoPorInput[] | FormTemplateUncheckedCreateWithoutCriadoPorInput[]
    connectOrCreate?: FormTemplateCreateOrConnectWithoutCriadoPorInput | FormTemplateCreateOrConnectWithoutCriadoPorInput[]
    upsert?: FormTemplateUpsertWithWhereUniqueWithoutCriadoPorInput | FormTemplateUpsertWithWhereUniqueWithoutCriadoPorInput[]
    createMany?: FormTemplateCreateManyCriadoPorInputEnvelope
    set?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    disconnect?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    delete?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    connect?: FormTemplateWhereUniqueInput | FormTemplateWhereUniqueInput[]
    update?: FormTemplateUpdateWithWhereUniqueWithoutCriadoPorInput | FormTemplateUpdateWithWhereUniqueWithoutCriadoPorInput[]
    updateMany?: FormTemplateUpdateManyWithWhereWithoutCriadoPorInput | FormTemplateUpdateManyWithWhereWithoutCriadoPorInput[]
    deleteMany?: FormTemplateScalarWhereInput | FormTemplateScalarWhereInput[]
  }

  export type FuncionarioCreateNestedOneWithoutClientesGerenciadosInput = {
    create?: XOR<FuncionarioCreateWithoutClientesGerenciadosInput, FuncionarioUncheckedCreateWithoutClientesGerenciadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutClientesGerenciadosInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type Funil_VendasCreateNestedOneWithoutClientesInput = {
    create?: XOR<Funil_VendasCreateWithoutClientesInput, Funil_VendasUncheckedCreateWithoutClientesInput>
    connectOrCreate?: Funil_VendasCreateOrConnectWithoutClientesInput
    connect?: Funil_VendasWhereUniqueInput
  }

  export type ContatoClienteCreateNestedManyWithoutClienteInput = {
    create?: XOR<ContatoClienteCreateWithoutClienteInput, ContatoClienteUncheckedCreateWithoutClienteInput> | ContatoClienteCreateWithoutClienteInput[] | ContatoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ContatoClienteCreateOrConnectWithoutClienteInput | ContatoClienteCreateOrConnectWithoutClienteInput[]
    createMany?: ContatoClienteCreateManyClienteInputEnvelope
    connect?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
  }

  export type AgendamentoInteracaoCreateNestedManyWithoutClienteInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutClienteInput, AgendamentoInteracaoUncheckedCreateWithoutClienteInput> | AgendamentoInteracaoCreateWithoutClienteInput[] | AgendamentoInteracaoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutClienteInput | AgendamentoInteracaoCreateOrConnectWithoutClienteInput[]
    createMany?: AgendamentoInteracaoCreateManyClienteInputEnvelope
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
  }

  export type HistoricoFunilCreateNestedManyWithoutClienteInput = {
    create?: XOR<HistoricoFunilCreateWithoutClienteInput, HistoricoFunilUncheckedCreateWithoutClienteInput> | HistoricoFunilCreateWithoutClienteInput[] | HistoricoFunilUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutClienteInput | HistoricoFunilCreateOrConnectWithoutClienteInput[]
    createMany?: HistoricoFunilCreateManyClienteInputEnvelope
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
  }

  export type InteracaoClienteCreateNestedManyWithoutClienteInput = {
    create?: XOR<InteracaoClienteCreateWithoutClienteInput, InteracaoClienteUncheckedCreateWithoutClienteInput> | InteracaoClienteCreateWithoutClienteInput[] | InteracaoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutClienteInput | InteracaoClienteCreateOrConnectWithoutClienteInput[]
    createMany?: InteracaoClienteCreateManyClienteInputEnvelope
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
  }

  export type VendaCreateNestedManyWithoutClienteInput = {
    create?: XOR<VendaCreateWithoutClienteInput, VendaUncheckedCreateWithoutClienteInput> | VendaCreateWithoutClienteInput[] | VendaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutClienteInput | VendaCreateOrConnectWithoutClienteInput[]
    createMany?: VendaCreateManyClienteInputEnvelope
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
  }

  export type ContatoClienteUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<ContatoClienteCreateWithoutClienteInput, ContatoClienteUncheckedCreateWithoutClienteInput> | ContatoClienteCreateWithoutClienteInput[] | ContatoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ContatoClienteCreateOrConnectWithoutClienteInput | ContatoClienteCreateOrConnectWithoutClienteInput[]
    createMany?: ContatoClienteCreateManyClienteInputEnvelope
    connect?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
  }

  export type AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutClienteInput, AgendamentoInteracaoUncheckedCreateWithoutClienteInput> | AgendamentoInteracaoCreateWithoutClienteInput[] | AgendamentoInteracaoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutClienteInput | AgendamentoInteracaoCreateOrConnectWithoutClienteInput[]
    createMany?: AgendamentoInteracaoCreateManyClienteInputEnvelope
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
  }

  export type HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<HistoricoFunilCreateWithoutClienteInput, HistoricoFunilUncheckedCreateWithoutClienteInput> | HistoricoFunilCreateWithoutClienteInput[] | HistoricoFunilUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutClienteInput | HistoricoFunilCreateOrConnectWithoutClienteInput[]
    createMany?: HistoricoFunilCreateManyClienteInputEnvelope
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
  }

  export type InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<InteracaoClienteCreateWithoutClienteInput, InteracaoClienteUncheckedCreateWithoutClienteInput> | InteracaoClienteCreateWithoutClienteInput[] | InteracaoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutClienteInput | InteracaoClienteCreateOrConnectWithoutClienteInput[]
    createMany?: InteracaoClienteCreateManyClienteInputEnvelope
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
  }

  export type VendaUncheckedCreateNestedManyWithoutClienteInput = {
    create?: XOR<VendaCreateWithoutClienteInput, VendaUncheckedCreateWithoutClienteInput> | VendaCreateWithoutClienteInput[] | VendaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutClienteInput | VendaCreateOrConnectWithoutClienteInput[]
    createMany?: VendaCreateManyClienteInputEnvelope
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
  }

  export type FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput = {
    create?: XOR<FuncionarioCreateWithoutClientesGerenciadosInput, FuncionarioUncheckedCreateWithoutClientesGerenciadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutClientesGerenciadosInput
    upsert?: FuncionarioUpsertWithoutClientesGerenciadosInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutClientesGerenciadosInput, FuncionarioUpdateWithoutClientesGerenciadosInput>, FuncionarioUncheckedUpdateWithoutClientesGerenciadosInput>
  }

  export type Funil_VendasUpdateOneRequiredWithoutClientesNestedInput = {
    create?: XOR<Funil_VendasCreateWithoutClientesInput, Funil_VendasUncheckedCreateWithoutClientesInput>
    connectOrCreate?: Funil_VendasCreateOrConnectWithoutClientesInput
    upsert?: Funil_VendasUpsertWithoutClientesInput
    connect?: Funil_VendasWhereUniqueInput
    update?: XOR<XOR<Funil_VendasUpdateToOneWithWhereWithoutClientesInput, Funil_VendasUpdateWithoutClientesInput>, Funil_VendasUncheckedUpdateWithoutClientesInput>
  }

  export type ContatoClienteUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ContatoClienteCreateWithoutClienteInput, ContatoClienteUncheckedCreateWithoutClienteInput> | ContatoClienteCreateWithoutClienteInput[] | ContatoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ContatoClienteCreateOrConnectWithoutClienteInput | ContatoClienteCreateOrConnectWithoutClienteInput[]
    upsert?: ContatoClienteUpsertWithWhereUniqueWithoutClienteInput | ContatoClienteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ContatoClienteCreateManyClienteInputEnvelope
    set?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    disconnect?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    delete?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    connect?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    update?: ContatoClienteUpdateWithWhereUniqueWithoutClienteInput | ContatoClienteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ContatoClienteUpdateManyWithWhereWithoutClienteInput | ContatoClienteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ContatoClienteScalarWhereInput | ContatoClienteScalarWhereInput[]
  }

  export type AgendamentoInteracaoUpdateManyWithoutClienteNestedInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutClienteInput, AgendamentoInteracaoUncheckedCreateWithoutClienteInput> | AgendamentoInteracaoCreateWithoutClienteInput[] | AgendamentoInteracaoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutClienteInput | AgendamentoInteracaoCreateOrConnectWithoutClienteInput[]
    upsert?: AgendamentoInteracaoUpsertWithWhereUniqueWithoutClienteInput | AgendamentoInteracaoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: AgendamentoInteracaoCreateManyClienteInputEnvelope
    set?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    disconnect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    delete?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    update?: AgendamentoInteracaoUpdateWithWhereUniqueWithoutClienteInput | AgendamentoInteracaoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: AgendamentoInteracaoUpdateManyWithWhereWithoutClienteInput | AgendamentoInteracaoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: AgendamentoInteracaoScalarWhereInput | AgendamentoInteracaoScalarWhereInput[]
  }

  export type HistoricoFunilUpdateManyWithoutClienteNestedInput = {
    create?: XOR<HistoricoFunilCreateWithoutClienteInput, HistoricoFunilUncheckedCreateWithoutClienteInput> | HistoricoFunilCreateWithoutClienteInput[] | HistoricoFunilUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutClienteInput | HistoricoFunilCreateOrConnectWithoutClienteInput[]
    upsert?: HistoricoFunilUpsertWithWhereUniqueWithoutClienteInput | HistoricoFunilUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: HistoricoFunilCreateManyClienteInputEnvelope
    set?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    disconnect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    delete?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    update?: HistoricoFunilUpdateWithWhereUniqueWithoutClienteInput | HistoricoFunilUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: HistoricoFunilUpdateManyWithWhereWithoutClienteInput | HistoricoFunilUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: HistoricoFunilScalarWhereInput | HistoricoFunilScalarWhereInput[]
  }

  export type InteracaoClienteUpdateManyWithoutClienteNestedInput = {
    create?: XOR<InteracaoClienteCreateWithoutClienteInput, InteracaoClienteUncheckedCreateWithoutClienteInput> | InteracaoClienteCreateWithoutClienteInput[] | InteracaoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutClienteInput | InteracaoClienteCreateOrConnectWithoutClienteInput[]
    upsert?: InteracaoClienteUpsertWithWhereUniqueWithoutClienteInput | InteracaoClienteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: InteracaoClienteCreateManyClienteInputEnvelope
    set?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    disconnect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    delete?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    update?: InteracaoClienteUpdateWithWhereUniqueWithoutClienteInput | InteracaoClienteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: InteracaoClienteUpdateManyWithWhereWithoutClienteInput | InteracaoClienteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: InteracaoClienteScalarWhereInput | InteracaoClienteScalarWhereInput[]
  }

  export type VendaUpdateManyWithoutClienteNestedInput = {
    create?: XOR<VendaCreateWithoutClienteInput, VendaUncheckedCreateWithoutClienteInput> | VendaCreateWithoutClienteInput[] | VendaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutClienteInput | VendaCreateOrConnectWithoutClienteInput[]
    upsert?: VendaUpsertWithWhereUniqueWithoutClienteInput | VendaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: VendaCreateManyClienteInputEnvelope
    set?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    disconnect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    delete?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    update?: VendaUpdateWithWhereUniqueWithoutClienteInput | VendaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: VendaUpdateManyWithWhereWithoutClienteInput | VendaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: VendaScalarWhereInput | VendaScalarWhereInput[]
  }

  export type ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<ContatoClienteCreateWithoutClienteInput, ContatoClienteUncheckedCreateWithoutClienteInput> | ContatoClienteCreateWithoutClienteInput[] | ContatoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: ContatoClienteCreateOrConnectWithoutClienteInput | ContatoClienteCreateOrConnectWithoutClienteInput[]
    upsert?: ContatoClienteUpsertWithWhereUniqueWithoutClienteInput | ContatoClienteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: ContatoClienteCreateManyClienteInputEnvelope
    set?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    disconnect?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    delete?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    connect?: ContatoClienteWhereUniqueInput | ContatoClienteWhereUniqueInput[]
    update?: ContatoClienteUpdateWithWhereUniqueWithoutClienteInput | ContatoClienteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: ContatoClienteUpdateManyWithWhereWithoutClienteInput | ContatoClienteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: ContatoClienteScalarWhereInput | ContatoClienteScalarWhereInput[]
  }

  export type AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<AgendamentoInteracaoCreateWithoutClienteInput, AgendamentoInteracaoUncheckedCreateWithoutClienteInput> | AgendamentoInteracaoCreateWithoutClienteInput[] | AgendamentoInteracaoUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: AgendamentoInteracaoCreateOrConnectWithoutClienteInput | AgendamentoInteracaoCreateOrConnectWithoutClienteInput[]
    upsert?: AgendamentoInteracaoUpsertWithWhereUniqueWithoutClienteInput | AgendamentoInteracaoUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: AgendamentoInteracaoCreateManyClienteInputEnvelope
    set?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    disconnect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    delete?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    connect?: AgendamentoInteracaoWhereUniqueInput | AgendamentoInteracaoWhereUniqueInput[]
    update?: AgendamentoInteracaoUpdateWithWhereUniqueWithoutClienteInput | AgendamentoInteracaoUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: AgendamentoInteracaoUpdateManyWithWhereWithoutClienteInput | AgendamentoInteracaoUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: AgendamentoInteracaoScalarWhereInput | AgendamentoInteracaoScalarWhereInput[]
  }

  export type HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<HistoricoFunilCreateWithoutClienteInput, HistoricoFunilUncheckedCreateWithoutClienteInput> | HistoricoFunilCreateWithoutClienteInput[] | HistoricoFunilUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutClienteInput | HistoricoFunilCreateOrConnectWithoutClienteInput[]
    upsert?: HistoricoFunilUpsertWithWhereUniqueWithoutClienteInput | HistoricoFunilUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: HistoricoFunilCreateManyClienteInputEnvelope
    set?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    disconnect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    delete?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    update?: HistoricoFunilUpdateWithWhereUniqueWithoutClienteInput | HistoricoFunilUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: HistoricoFunilUpdateManyWithWhereWithoutClienteInput | HistoricoFunilUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: HistoricoFunilScalarWhereInput | HistoricoFunilScalarWhereInput[]
  }

  export type InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<InteracaoClienteCreateWithoutClienteInput, InteracaoClienteUncheckedCreateWithoutClienteInput> | InteracaoClienteCreateWithoutClienteInput[] | InteracaoClienteUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: InteracaoClienteCreateOrConnectWithoutClienteInput | InteracaoClienteCreateOrConnectWithoutClienteInput[]
    upsert?: InteracaoClienteUpsertWithWhereUniqueWithoutClienteInput | InteracaoClienteUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: InteracaoClienteCreateManyClienteInputEnvelope
    set?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    disconnect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    delete?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    connect?: InteracaoClienteWhereUniqueInput | InteracaoClienteWhereUniqueInput[]
    update?: InteracaoClienteUpdateWithWhereUniqueWithoutClienteInput | InteracaoClienteUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: InteracaoClienteUpdateManyWithWhereWithoutClienteInput | InteracaoClienteUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: InteracaoClienteScalarWhereInput | InteracaoClienteScalarWhereInput[]
  }

  export type VendaUncheckedUpdateManyWithoutClienteNestedInput = {
    create?: XOR<VendaCreateWithoutClienteInput, VendaUncheckedCreateWithoutClienteInput> | VendaCreateWithoutClienteInput[] | VendaUncheckedCreateWithoutClienteInput[]
    connectOrCreate?: VendaCreateOrConnectWithoutClienteInput | VendaCreateOrConnectWithoutClienteInput[]
    upsert?: VendaUpsertWithWhereUniqueWithoutClienteInput | VendaUpsertWithWhereUniqueWithoutClienteInput[]
    createMany?: VendaCreateManyClienteInputEnvelope
    set?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    disconnect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    delete?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    connect?: VendaWhereUniqueInput | VendaWhereUniqueInput[]
    update?: VendaUpdateWithWhereUniqueWithoutClienteInput | VendaUpdateWithWhereUniqueWithoutClienteInput[]
    updateMany?: VendaUpdateManyWithWhereWithoutClienteInput | VendaUpdateManyWithWhereWithoutClienteInput[]
    deleteMany?: VendaScalarWhereInput | VendaScalarWhereInput[]
  }

  export type ClienteCreateNestedManyWithoutFunilVendasInput = {
    create?: XOR<ClienteCreateWithoutFunilVendasInput, ClienteUncheckedCreateWithoutFunilVendasInput> | ClienteCreateWithoutFunilVendasInput[] | ClienteUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFunilVendasInput | ClienteCreateOrConnectWithoutFunilVendasInput[]
    createMany?: ClienteCreateManyFunilVendasInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type HistoricoFunilCreateNestedManyWithoutFunilVendasInput = {
    create?: XOR<HistoricoFunilCreateWithoutFunilVendasInput, HistoricoFunilUncheckedCreateWithoutFunilVendasInput> | HistoricoFunilCreateWithoutFunilVendasInput[] | HistoricoFunilUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutFunilVendasInput | HistoricoFunilCreateOrConnectWithoutFunilVendasInput[]
    createMany?: HistoricoFunilCreateManyFunilVendasInputEnvelope
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
  }

  export type ClienteUncheckedCreateNestedManyWithoutFunilVendasInput = {
    create?: XOR<ClienteCreateWithoutFunilVendasInput, ClienteUncheckedCreateWithoutFunilVendasInput> | ClienteCreateWithoutFunilVendasInput[] | ClienteUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFunilVendasInput | ClienteCreateOrConnectWithoutFunilVendasInput[]
    createMany?: ClienteCreateManyFunilVendasInputEnvelope
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
  }

  export type HistoricoFunilUncheckedCreateNestedManyWithoutFunilVendasInput = {
    create?: XOR<HistoricoFunilCreateWithoutFunilVendasInput, HistoricoFunilUncheckedCreateWithoutFunilVendasInput> | HistoricoFunilCreateWithoutFunilVendasInput[] | HistoricoFunilUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutFunilVendasInput | HistoricoFunilCreateOrConnectWithoutFunilVendasInput[]
    createMany?: HistoricoFunilCreateManyFunilVendasInputEnvelope
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
  }

  export type ClienteUpdateManyWithoutFunilVendasNestedInput = {
    create?: XOR<ClienteCreateWithoutFunilVendasInput, ClienteUncheckedCreateWithoutFunilVendasInput> | ClienteCreateWithoutFunilVendasInput[] | ClienteUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFunilVendasInput | ClienteCreateOrConnectWithoutFunilVendasInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutFunilVendasInput | ClienteUpsertWithWhereUniqueWithoutFunilVendasInput[]
    createMany?: ClienteCreateManyFunilVendasInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutFunilVendasInput | ClienteUpdateWithWhereUniqueWithoutFunilVendasInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutFunilVendasInput | ClienteUpdateManyWithWhereWithoutFunilVendasInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type HistoricoFunilUpdateManyWithoutFunilVendasNestedInput = {
    create?: XOR<HistoricoFunilCreateWithoutFunilVendasInput, HistoricoFunilUncheckedCreateWithoutFunilVendasInput> | HistoricoFunilCreateWithoutFunilVendasInput[] | HistoricoFunilUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutFunilVendasInput | HistoricoFunilCreateOrConnectWithoutFunilVendasInput[]
    upsert?: HistoricoFunilUpsertWithWhereUniqueWithoutFunilVendasInput | HistoricoFunilUpsertWithWhereUniqueWithoutFunilVendasInput[]
    createMany?: HistoricoFunilCreateManyFunilVendasInputEnvelope
    set?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    disconnect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    delete?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    update?: HistoricoFunilUpdateWithWhereUniqueWithoutFunilVendasInput | HistoricoFunilUpdateWithWhereUniqueWithoutFunilVendasInput[]
    updateMany?: HistoricoFunilUpdateManyWithWhereWithoutFunilVendasInput | HistoricoFunilUpdateManyWithWhereWithoutFunilVendasInput[]
    deleteMany?: HistoricoFunilScalarWhereInput | HistoricoFunilScalarWhereInput[]
  }

  export type ClienteUncheckedUpdateManyWithoutFunilVendasNestedInput = {
    create?: XOR<ClienteCreateWithoutFunilVendasInput, ClienteUncheckedCreateWithoutFunilVendasInput> | ClienteCreateWithoutFunilVendasInput[] | ClienteUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: ClienteCreateOrConnectWithoutFunilVendasInput | ClienteCreateOrConnectWithoutFunilVendasInput[]
    upsert?: ClienteUpsertWithWhereUniqueWithoutFunilVendasInput | ClienteUpsertWithWhereUniqueWithoutFunilVendasInput[]
    createMany?: ClienteCreateManyFunilVendasInputEnvelope
    set?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    disconnect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    delete?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    connect?: ClienteWhereUniqueInput | ClienteWhereUniqueInput[]
    update?: ClienteUpdateWithWhereUniqueWithoutFunilVendasInput | ClienteUpdateWithWhereUniqueWithoutFunilVendasInput[]
    updateMany?: ClienteUpdateManyWithWhereWithoutFunilVendasInput | ClienteUpdateManyWithWhereWithoutFunilVendasInput[]
    deleteMany?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
  }

  export type HistoricoFunilUncheckedUpdateManyWithoutFunilVendasNestedInput = {
    create?: XOR<HistoricoFunilCreateWithoutFunilVendasInput, HistoricoFunilUncheckedCreateWithoutFunilVendasInput> | HistoricoFunilCreateWithoutFunilVendasInput[] | HistoricoFunilUncheckedCreateWithoutFunilVendasInput[]
    connectOrCreate?: HistoricoFunilCreateOrConnectWithoutFunilVendasInput | HistoricoFunilCreateOrConnectWithoutFunilVendasInput[]
    upsert?: HistoricoFunilUpsertWithWhereUniqueWithoutFunilVendasInput | HistoricoFunilUpsertWithWhereUniqueWithoutFunilVendasInput[]
    createMany?: HistoricoFunilCreateManyFunilVendasInputEnvelope
    set?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    disconnect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    delete?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    connect?: HistoricoFunilWhereUniqueInput | HistoricoFunilWhereUniqueInput[]
    update?: HistoricoFunilUpdateWithWhereUniqueWithoutFunilVendasInput | HistoricoFunilUpdateWithWhereUniqueWithoutFunilVendasInput[]
    updateMany?: HistoricoFunilUpdateManyWithWhereWithoutFunilVendasInput | HistoricoFunilUpdateManyWithWhereWithoutFunilVendasInput[]
    deleteMany?: HistoricoFunilScalarWhereInput | HistoricoFunilScalarWhereInput[]
  }

  export type FuncionarioCreateNestedOneWithoutEventosOrganizadosInput = {
    create?: XOR<FuncionarioCreateWithoutEventosOrganizadosInput, FuncionarioUncheckedCreateWithoutEventosOrganizadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutEventosOrganizadosInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type FuncionariosConvidadosCreateNestedManyWithoutEventoInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutEventoInput, FuncionariosConvidadosUncheckedCreateWithoutEventoInput> | FuncionariosConvidadosCreateWithoutEventoInput[] | FuncionariosConvidadosUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutEventoInput | FuncionariosConvidadosCreateOrConnectWithoutEventoInput[]
    createMany?: FuncionariosConvidadosCreateManyEventoInputEnvelope
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
  }

  export type NotificacaoCreateNestedManyWithoutEventoInput = {
    create?: XOR<NotificacaoCreateWithoutEventoInput, NotificacaoUncheckedCreateWithoutEventoInput> | NotificacaoCreateWithoutEventoInput[] | NotificacaoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutEventoInput | NotificacaoCreateOrConnectWithoutEventoInput[]
    createMany?: NotificacaoCreateManyEventoInputEnvelope
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
  }

  export type FuncionariosConvidadosUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutEventoInput, FuncionariosConvidadosUncheckedCreateWithoutEventoInput> | FuncionariosConvidadosCreateWithoutEventoInput[] | FuncionariosConvidadosUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutEventoInput | FuncionariosConvidadosCreateOrConnectWithoutEventoInput[]
    createMany?: FuncionariosConvidadosCreateManyEventoInputEnvelope
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
  }

  export type NotificacaoUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<NotificacaoCreateWithoutEventoInput, NotificacaoUncheckedCreateWithoutEventoInput> | NotificacaoCreateWithoutEventoInput[] | NotificacaoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutEventoInput | NotificacaoCreateOrConnectWithoutEventoInput[]
    createMany?: NotificacaoCreateManyEventoInputEnvelope
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
  }

  export type FuncionarioUpdateOneRequiredWithoutEventosOrganizadosNestedInput = {
    create?: XOR<FuncionarioCreateWithoutEventosOrganizadosInput, FuncionarioUncheckedCreateWithoutEventosOrganizadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutEventosOrganizadosInput
    upsert?: FuncionarioUpsertWithoutEventosOrganizadosInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutEventosOrganizadosInput, FuncionarioUpdateWithoutEventosOrganizadosInput>, FuncionarioUncheckedUpdateWithoutEventosOrganizadosInput>
  }

  export type FuncionariosConvidadosUpdateManyWithoutEventoNestedInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutEventoInput, FuncionariosConvidadosUncheckedCreateWithoutEventoInput> | FuncionariosConvidadosCreateWithoutEventoInput[] | FuncionariosConvidadosUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutEventoInput | FuncionariosConvidadosCreateOrConnectWithoutEventoInput[]
    upsert?: FuncionariosConvidadosUpsertWithWhereUniqueWithoutEventoInput | FuncionariosConvidadosUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: FuncionariosConvidadosCreateManyEventoInputEnvelope
    set?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    disconnect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    delete?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    update?: FuncionariosConvidadosUpdateWithWhereUniqueWithoutEventoInput | FuncionariosConvidadosUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: FuncionariosConvidadosUpdateManyWithWhereWithoutEventoInput | FuncionariosConvidadosUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: FuncionariosConvidadosScalarWhereInput | FuncionariosConvidadosScalarWhereInput[]
  }

  export type NotificacaoUpdateManyWithoutEventoNestedInput = {
    create?: XOR<NotificacaoCreateWithoutEventoInput, NotificacaoUncheckedCreateWithoutEventoInput> | NotificacaoCreateWithoutEventoInput[] | NotificacaoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutEventoInput | NotificacaoCreateOrConnectWithoutEventoInput[]
    upsert?: NotificacaoUpsertWithWhereUniqueWithoutEventoInput | NotificacaoUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: NotificacaoCreateManyEventoInputEnvelope
    set?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    disconnect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    delete?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    update?: NotificacaoUpdateWithWhereUniqueWithoutEventoInput | NotificacaoUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: NotificacaoUpdateManyWithWhereWithoutEventoInput | NotificacaoUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
  }

  export type FuncionariosConvidadosUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutEventoInput, FuncionariosConvidadosUncheckedCreateWithoutEventoInput> | FuncionariosConvidadosCreateWithoutEventoInput[] | FuncionariosConvidadosUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutEventoInput | FuncionariosConvidadosCreateOrConnectWithoutEventoInput[]
    upsert?: FuncionariosConvidadosUpsertWithWhereUniqueWithoutEventoInput | FuncionariosConvidadosUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: FuncionariosConvidadosCreateManyEventoInputEnvelope
    set?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    disconnect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    delete?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    connect?: FuncionariosConvidadosWhereUniqueInput | FuncionariosConvidadosWhereUniqueInput[]
    update?: FuncionariosConvidadosUpdateWithWhereUniqueWithoutEventoInput | FuncionariosConvidadosUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: FuncionariosConvidadosUpdateManyWithWhereWithoutEventoInput | FuncionariosConvidadosUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: FuncionariosConvidadosScalarWhereInput | FuncionariosConvidadosScalarWhereInput[]
  }

  export type NotificacaoUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<NotificacaoCreateWithoutEventoInput, NotificacaoUncheckedCreateWithoutEventoInput> | NotificacaoCreateWithoutEventoInput[] | NotificacaoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: NotificacaoCreateOrConnectWithoutEventoInput | NotificacaoCreateOrConnectWithoutEventoInput[]
    upsert?: NotificacaoUpsertWithWhereUniqueWithoutEventoInput | NotificacaoUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: NotificacaoCreateManyEventoInputEnvelope
    set?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    disconnect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    delete?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    connect?: NotificacaoWhereUniqueInput | NotificacaoWhereUniqueInput[]
    update?: NotificacaoUpdateWithWhereUniqueWithoutEventoInput | NotificacaoUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: NotificacaoUpdateManyWithWhereWithoutEventoInput | NotificacaoUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
  }

  export type ClienteCreateNestedOneWithoutContatosInput = {
    create?: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutContatosInput
    connect?: ClienteWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutContatosNestedInput = {
    create?: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutContatosInput
    upsert?: ClienteUpsertWithoutContatosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutContatosInput, ClienteUpdateWithoutContatosInput>, ClienteUncheckedUpdateWithoutContatosInput>
  }

  export type FuncionarioCreateNestedOneWithoutAgendamentosInteracaoInput = {
    create?: XOR<FuncionarioCreateWithoutAgendamentosInteracaoInput, FuncionarioUncheckedCreateWithoutAgendamentosInteracaoInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutAgendamentosInteracaoInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutAgendamentosInput = {
    create?: XOR<ClienteCreateWithoutAgendamentosInput, ClienteUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutAgendamentosInput
    connect?: ClienteWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FuncionarioUpdateOneRequiredWithoutAgendamentosInteracaoNestedInput = {
    create?: XOR<FuncionarioCreateWithoutAgendamentosInteracaoInput, FuncionarioUncheckedCreateWithoutAgendamentosInteracaoInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutAgendamentosInteracaoInput
    upsert?: FuncionarioUpsertWithoutAgendamentosInteracaoInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutAgendamentosInteracaoInput, FuncionarioUpdateWithoutAgendamentosInteracaoInput>, FuncionarioUncheckedUpdateWithoutAgendamentosInteracaoInput>
  }

  export type ClienteUpdateOneRequiredWithoutAgendamentosNestedInput = {
    create?: XOR<ClienteCreateWithoutAgendamentosInput, ClienteUncheckedCreateWithoutAgendamentosInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutAgendamentosInput
    upsert?: ClienteUpsertWithoutAgendamentosInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutAgendamentosInput, ClienteUpdateWithoutAgendamentosInput>, ClienteUncheckedUpdateWithoutAgendamentosInput>
  }

  export type ClienteCreateNestedOneWithoutHistoricoFunilInput = {
    create?: XOR<ClienteCreateWithoutHistoricoFunilInput, ClienteUncheckedCreateWithoutHistoricoFunilInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutHistoricoFunilInput
    connect?: ClienteWhereUniqueInput
  }

  export type Funil_VendasCreateNestedOneWithoutHistoricoInput = {
    create?: XOR<Funil_VendasCreateWithoutHistoricoInput, Funil_VendasUncheckedCreateWithoutHistoricoInput>
    connectOrCreate?: Funil_VendasCreateOrConnectWithoutHistoricoInput
    connect?: Funil_VendasWhereUniqueInput
  }

  export type ClienteUpdateOneRequiredWithoutHistoricoFunilNestedInput = {
    create?: XOR<ClienteCreateWithoutHistoricoFunilInput, ClienteUncheckedCreateWithoutHistoricoFunilInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutHistoricoFunilInput
    upsert?: ClienteUpsertWithoutHistoricoFunilInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutHistoricoFunilInput, ClienteUpdateWithoutHistoricoFunilInput>, ClienteUncheckedUpdateWithoutHistoricoFunilInput>
  }

  export type Funil_VendasUpdateOneRequiredWithoutHistoricoNestedInput = {
    create?: XOR<Funil_VendasCreateWithoutHistoricoInput, Funil_VendasUncheckedCreateWithoutHistoricoInput>
    connectOrCreate?: Funil_VendasCreateOrConnectWithoutHistoricoInput
    upsert?: Funil_VendasUpsertWithoutHistoricoInput
    connect?: Funil_VendasWhereUniqueInput
    update?: XOR<XOR<Funil_VendasUpdateToOneWithWhereWithoutHistoricoInput, Funil_VendasUpdateWithoutHistoricoInput>, Funil_VendasUncheckedUpdateWithoutHistoricoInput>
  }

  export type FuncionarioCreateNestedOneWithoutInteracoesClienteInput = {
    create?: XOR<FuncionarioCreateWithoutInteracoesClienteInput, FuncionarioUncheckedCreateWithoutInteracoesClienteInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutInteracoesClienteInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutInteracoesInput = {
    create?: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutInteracoesInput
    connect?: ClienteWhereUniqueInput
  }

  export type FuncionarioUpdateOneRequiredWithoutInteracoesClienteNestedInput = {
    create?: XOR<FuncionarioCreateWithoutInteracoesClienteInput, FuncionarioUncheckedCreateWithoutInteracoesClienteInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutInteracoesClienteInput
    upsert?: FuncionarioUpsertWithoutInteracoesClienteInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutInteracoesClienteInput, FuncionarioUpdateWithoutInteracoesClienteInput>, FuncionarioUncheckedUpdateWithoutInteracoesClienteInput>
  }

  export type ClienteUpdateOneRequiredWithoutInteracoesNestedInput = {
    create?: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutInteracoesInput
    upsert?: ClienteUpsertWithoutInteracoesInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutInteracoesInput, ClienteUpdateWithoutInteracoesInput>, ClienteUncheckedUpdateWithoutInteracoesInput>
  }

  export type FuncionarioCreateNestedOneWithoutVendasRealizadasInput = {
    create?: XOR<FuncionarioCreateWithoutVendasRealizadasInput, FuncionarioUncheckedCreateWithoutVendasRealizadasInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutVendasRealizadasInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type ClienteCreateNestedOneWithoutVendasInput = {
    create?: XOR<ClienteCreateWithoutVendasInput, ClienteUncheckedCreateWithoutVendasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutVendasInput
    connect?: ClienteWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type FuncionarioUpdateOneRequiredWithoutVendasRealizadasNestedInput = {
    create?: XOR<FuncionarioCreateWithoutVendasRealizadasInput, FuncionarioUncheckedCreateWithoutVendasRealizadasInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutVendasRealizadasInput
    upsert?: FuncionarioUpsertWithoutVendasRealizadasInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutVendasRealizadasInput, FuncionarioUpdateWithoutVendasRealizadasInput>, FuncionarioUncheckedUpdateWithoutVendasRealizadasInput>
  }

  export type ClienteUpdateOneRequiredWithoutVendasNestedInput = {
    create?: XOR<ClienteCreateWithoutVendasInput, ClienteUncheckedCreateWithoutVendasInput>
    connectOrCreate?: ClienteCreateOrConnectWithoutVendasInput
    upsert?: ClienteUpsertWithoutVendasInput
    connect?: ClienteWhereUniqueInput
    update?: XOR<XOR<ClienteUpdateToOneWithWhereWithoutVendasInput, ClienteUpdateWithoutVendasInput>, ClienteUncheckedUpdateWithoutVendasInput>
  }

  export type EventoCreateNestedOneWithoutFuncionariosConvidadosInput = {
    create?: XOR<EventoCreateWithoutFuncionariosConvidadosInput, EventoUncheckedCreateWithoutFuncionariosConvidadosInput>
    connectOrCreate?: EventoCreateOrConnectWithoutFuncionariosConvidadosInput
    connect?: EventoWhereUniqueInput
  }

  export type FuncionarioCreateNestedOneWithoutConvitesEventosInput = {
    create?: XOR<FuncionarioCreateWithoutConvitesEventosInput, FuncionarioUncheckedCreateWithoutConvitesEventosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutConvitesEventosInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type NotificacaoConvidadosCreateNestedManyWithoutConviteInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutConviteInput, NotificacaoConvidadosUncheckedCreateWithoutConviteInput> | NotificacaoConvidadosCreateWithoutConviteInput[] | NotificacaoConvidadosUncheckedCreateWithoutConviteInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutConviteInput | NotificacaoConvidadosCreateOrConnectWithoutConviteInput[]
    createMany?: NotificacaoConvidadosCreateManyConviteInputEnvelope
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
  }

  export type PresencaCreateNestedOneWithoutConviteInput = {
    create?: XOR<PresencaCreateWithoutConviteInput, PresencaUncheckedCreateWithoutConviteInput>
    connectOrCreate?: PresencaCreateOrConnectWithoutConviteInput
    connect?: PresencaWhereUniqueInput
  }

  export type NotificacaoConvidadosUncheckedCreateNestedManyWithoutConviteInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutConviteInput, NotificacaoConvidadosUncheckedCreateWithoutConviteInput> | NotificacaoConvidadosCreateWithoutConviteInput[] | NotificacaoConvidadosUncheckedCreateWithoutConviteInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutConviteInput | NotificacaoConvidadosCreateOrConnectWithoutConviteInput[]
    createMany?: NotificacaoConvidadosCreateManyConviteInputEnvelope
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
  }

  export type PresencaUncheckedCreateNestedOneWithoutConviteInput = {
    create?: XOR<PresencaCreateWithoutConviteInput, PresencaUncheckedCreateWithoutConviteInput>
    connectOrCreate?: PresencaCreateOrConnectWithoutConviteInput
    connect?: PresencaWhereUniqueInput
  }

  export type EventoUpdateOneRequiredWithoutFuncionariosConvidadosNestedInput = {
    create?: XOR<EventoCreateWithoutFuncionariosConvidadosInput, EventoUncheckedCreateWithoutFuncionariosConvidadosInput>
    connectOrCreate?: EventoCreateOrConnectWithoutFuncionariosConvidadosInput
    upsert?: EventoUpsertWithoutFuncionariosConvidadosInput
    connect?: EventoWhereUniqueInput
    update?: XOR<XOR<EventoUpdateToOneWithWhereWithoutFuncionariosConvidadosInput, EventoUpdateWithoutFuncionariosConvidadosInput>, EventoUncheckedUpdateWithoutFuncionariosConvidadosInput>
  }

  export type FuncionarioUpdateOneRequiredWithoutConvitesEventosNestedInput = {
    create?: XOR<FuncionarioCreateWithoutConvitesEventosInput, FuncionarioUncheckedCreateWithoutConvitesEventosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutConvitesEventosInput
    upsert?: FuncionarioUpsertWithoutConvitesEventosInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutConvitesEventosInput, FuncionarioUpdateWithoutConvitesEventosInput>, FuncionarioUncheckedUpdateWithoutConvitesEventosInput>
  }

  export type NotificacaoConvidadosUpdateManyWithoutConviteNestedInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutConviteInput, NotificacaoConvidadosUncheckedCreateWithoutConviteInput> | NotificacaoConvidadosCreateWithoutConviteInput[] | NotificacaoConvidadosUncheckedCreateWithoutConviteInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutConviteInput | NotificacaoConvidadosCreateOrConnectWithoutConviteInput[]
    upsert?: NotificacaoConvidadosUpsertWithWhereUniqueWithoutConviteInput | NotificacaoConvidadosUpsertWithWhereUniqueWithoutConviteInput[]
    createMany?: NotificacaoConvidadosCreateManyConviteInputEnvelope
    set?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    disconnect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    delete?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    update?: NotificacaoConvidadosUpdateWithWhereUniqueWithoutConviteInput | NotificacaoConvidadosUpdateWithWhereUniqueWithoutConviteInput[]
    updateMany?: NotificacaoConvidadosUpdateManyWithWhereWithoutConviteInput | NotificacaoConvidadosUpdateManyWithWhereWithoutConviteInput[]
    deleteMany?: NotificacaoConvidadosScalarWhereInput | NotificacaoConvidadosScalarWhereInput[]
  }

  export type PresencaUpdateOneWithoutConviteNestedInput = {
    create?: XOR<PresencaCreateWithoutConviteInput, PresencaUncheckedCreateWithoutConviteInput>
    connectOrCreate?: PresencaCreateOrConnectWithoutConviteInput
    upsert?: PresencaUpsertWithoutConviteInput
    disconnect?: PresencaWhereInput | boolean
    delete?: PresencaWhereInput | boolean
    connect?: PresencaWhereUniqueInput
    update?: XOR<XOR<PresencaUpdateToOneWithWhereWithoutConviteInput, PresencaUpdateWithoutConviteInput>, PresencaUncheckedUpdateWithoutConviteInput>
  }

  export type NotificacaoConvidadosUncheckedUpdateManyWithoutConviteNestedInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutConviteInput, NotificacaoConvidadosUncheckedCreateWithoutConviteInput> | NotificacaoConvidadosCreateWithoutConviteInput[] | NotificacaoConvidadosUncheckedCreateWithoutConviteInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutConviteInput | NotificacaoConvidadosCreateOrConnectWithoutConviteInput[]
    upsert?: NotificacaoConvidadosUpsertWithWhereUniqueWithoutConviteInput | NotificacaoConvidadosUpsertWithWhereUniqueWithoutConviteInput[]
    createMany?: NotificacaoConvidadosCreateManyConviteInputEnvelope
    set?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    disconnect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    delete?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    update?: NotificacaoConvidadosUpdateWithWhereUniqueWithoutConviteInput | NotificacaoConvidadosUpdateWithWhereUniqueWithoutConviteInput[]
    updateMany?: NotificacaoConvidadosUpdateManyWithWhereWithoutConviteInput | NotificacaoConvidadosUpdateManyWithWhereWithoutConviteInput[]
    deleteMany?: NotificacaoConvidadosScalarWhereInput | NotificacaoConvidadosScalarWhereInput[]
  }

  export type PresencaUncheckedUpdateOneWithoutConviteNestedInput = {
    create?: XOR<PresencaCreateWithoutConviteInput, PresencaUncheckedCreateWithoutConviteInput>
    connectOrCreate?: PresencaCreateOrConnectWithoutConviteInput
    upsert?: PresencaUpsertWithoutConviteInput
    disconnect?: PresencaWhereInput | boolean
    delete?: PresencaWhereInput | boolean
    connect?: PresencaWhereUniqueInput
    update?: XOR<XOR<PresencaUpdateToOneWithWhereWithoutConviteInput, PresencaUpdateWithoutConviteInput>, PresencaUncheckedUpdateWithoutConviteInput>
  }

  export type EventoCreateNestedOneWithoutNotificacoesInput = {
    create?: XOR<EventoCreateWithoutNotificacoesInput, EventoUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: EventoCreateOrConnectWithoutNotificacoesInput
    connect?: EventoWhereUniqueInput
  }

  export type NotificacaoConvidadosCreateNestedManyWithoutNotificacaoInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput> | NotificacaoConvidadosCreateWithoutNotificacaoInput[] | NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput | NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput[]
    createMany?: NotificacaoConvidadosCreateManyNotificacaoInputEnvelope
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
  }

  export type NotificacaoConvidadosUncheckedCreateNestedManyWithoutNotificacaoInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput> | NotificacaoConvidadosCreateWithoutNotificacaoInput[] | NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput | NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput[]
    createMany?: NotificacaoConvidadosCreateManyNotificacaoInputEnvelope
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
  }

  export type EventoUpdateOneRequiredWithoutNotificacoesNestedInput = {
    create?: XOR<EventoCreateWithoutNotificacoesInput, EventoUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: EventoCreateOrConnectWithoutNotificacoesInput
    upsert?: EventoUpsertWithoutNotificacoesInput
    connect?: EventoWhereUniqueInput
    update?: XOR<XOR<EventoUpdateToOneWithWhereWithoutNotificacoesInput, EventoUpdateWithoutNotificacoesInput>, EventoUncheckedUpdateWithoutNotificacoesInput>
  }

  export type NotificacaoConvidadosUpdateManyWithoutNotificacaoNestedInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput> | NotificacaoConvidadosCreateWithoutNotificacaoInput[] | NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput | NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput[]
    upsert?: NotificacaoConvidadosUpsertWithWhereUniqueWithoutNotificacaoInput | NotificacaoConvidadosUpsertWithWhereUniqueWithoutNotificacaoInput[]
    createMany?: NotificacaoConvidadosCreateManyNotificacaoInputEnvelope
    set?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    disconnect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    delete?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    update?: NotificacaoConvidadosUpdateWithWhereUniqueWithoutNotificacaoInput | NotificacaoConvidadosUpdateWithWhereUniqueWithoutNotificacaoInput[]
    updateMany?: NotificacaoConvidadosUpdateManyWithWhereWithoutNotificacaoInput | NotificacaoConvidadosUpdateManyWithWhereWithoutNotificacaoInput[]
    deleteMany?: NotificacaoConvidadosScalarWhereInput | NotificacaoConvidadosScalarWhereInput[]
  }

  export type NotificacaoConvidadosUncheckedUpdateManyWithoutNotificacaoNestedInput = {
    create?: XOR<NotificacaoConvidadosCreateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput> | NotificacaoConvidadosCreateWithoutNotificacaoInput[] | NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput[]
    connectOrCreate?: NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput | NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput[]
    upsert?: NotificacaoConvidadosUpsertWithWhereUniqueWithoutNotificacaoInput | NotificacaoConvidadosUpsertWithWhereUniqueWithoutNotificacaoInput[]
    createMany?: NotificacaoConvidadosCreateManyNotificacaoInputEnvelope
    set?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    disconnect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    delete?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    connect?: NotificacaoConvidadosWhereUniqueInput | NotificacaoConvidadosWhereUniqueInput[]
    update?: NotificacaoConvidadosUpdateWithWhereUniqueWithoutNotificacaoInput | NotificacaoConvidadosUpdateWithWhereUniqueWithoutNotificacaoInput[]
    updateMany?: NotificacaoConvidadosUpdateManyWithWhereWithoutNotificacaoInput | NotificacaoConvidadosUpdateManyWithWhereWithoutNotificacaoInput[]
    deleteMany?: NotificacaoConvidadosScalarWhereInput | NotificacaoConvidadosScalarWhereInput[]
  }

  export type FuncionariosConvidadosCreateNestedOneWithoutNotificacoesInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutNotificacoesInput, FuncionariosConvidadosUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutNotificacoesInput
    connect?: FuncionariosConvidadosWhereUniqueInput
  }

  export type NotificacaoCreateNestedOneWithoutConvidadosInput = {
    create?: XOR<NotificacaoCreateWithoutConvidadosInput, NotificacaoUncheckedCreateWithoutConvidadosInput>
    connectOrCreate?: NotificacaoCreateOrConnectWithoutConvidadosInput
    connect?: NotificacaoWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FuncionariosConvidadosUpdateOneRequiredWithoutNotificacoesNestedInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutNotificacoesInput, FuncionariosConvidadosUncheckedCreateWithoutNotificacoesInput>
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutNotificacoesInput
    upsert?: FuncionariosConvidadosUpsertWithoutNotificacoesInput
    connect?: FuncionariosConvidadosWhereUniqueInput
    update?: XOR<XOR<FuncionariosConvidadosUpdateToOneWithWhereWithoutNotificacoesInput, FuncionariosConvidadosUpdateWithoutNotificacoesInput>, FuncionariosConvidadosUncheckedUpdateWithoutNotificacoesInput>
  }

  export type NotificacaoUpdateOneRequiredWithoutConvidadosNestedInput = {
    create?: XOR<NotificacaoCreateWithoutConvidadosInput, NotificacaoUncheckedCreateWithoutConvidadosInput>
    connectOrCreate?: NotificacaoCreateOrConnectWithoutConvidadosInput
    upsert?: NotificacaoUpsertWithoutConvidadosInput
    connect?: NotificacaoWhereUniqueInput
    update?: XOR<XOR<NotificacaoUpdateToOneWithWhereWithoutConvidadosInput, NotificacaoUpdateWithoutConvidadosInput>, NotificacaoUncheckedUpdateWithoutConvidadosInput>
  }

  export type FuncionariosConvidadosCreateNestedOneWithoutPresencaInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutPresencaInput, FuncionariosConvidadosUncheckedCreateWithoutPresencaInput>
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutPresencaInput
    connect?: FuncionariosConvidadosWhereUniqueInput
  }

  export type FuncionariosConvidadosUpdateOneRequiredWithoutPresencaNestedInput = {
    create?: XOR<FuncionariosConvidadosCreateWithoutPresencaInput, FuncionariosConvidadosUncheckedCreateWithoutPresencaInput>
    connectOrCreate?: FuncionariosConvidadosCreateOrConnectWithoutPresencaInput
    upsert?: FuncionariosConvidadosUpsertWithoutPresencaInput
    connect?: FuncionariosConvidadosWhereUniqueInput
    update?: XOR<XOR<FuncionariosConvidadosUpdateToOneWithWhereWithoutPresencaInput, FuncionariosConvidadosUpdateWithoutPresencaInput>, FuncionariosConvidadosUncheckedUpdateWithoutPresencaInput>
  }

  export type FuncionarioCreateNestedOneWithoutFormTemplatesCriadosInput = {
    create?: XOR<FuncionarioCreateWithoutFormTemplatesCriadosInput, FuncionarioUncheckedCreateWithoutFormTemplatesCriadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutFormTemplatesCriadosInput
    connect?: FuncionarioWhereUniqueInput
  }

  export type FuncionarioUpdateOneRequiredWithoutFormTemplatesCriadosNestedInput = {
    create?: XOR<FuncionarioCreateWithoutFormTemplatesCriadosInput, FuncionarioUncheckedCreateWithoutFormTemplatesCriadosInput>
    connectOrCreate?: FuncionarioCreateOrConnectWithoutFormTemplatesCriadosInput
    upsert?: FuncionarioUpsertWithoutFormTemplatesCriadosInput
    connect?: FuncionarioWhereUniqueInput
    update?: XOR<XOR<FuncionarioUpdateToOneWithWhereWithoutFormTemplatesCriadosInput, FuncionarioUpdateWithoutFormTemplatesCriadosInput>, FuncionarioUncheckedUpdateWithoutFormTemplatesCriadosInput>
  }

  export type ArquivoCandidatoCreateNestedManyWithoutCandidatoInput = {
    create?: XOR<ArquivoCandidatoCreateWithoutCandidatoInput, ArquivoCandidatoUncheckedCreateWithoutCandidatoInput> | ArquivoCandidatoCreateWithoutCandidatoInput[] | ArquivoCandidatoUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: ArquivoCandidatoCreateOrConnectWithoutCandidatoInput | ArquivoCandidatoCreateOrConnectWithoutCandidatoInput[]
    createMany?: ArquivoCandidatoCreateManyCandidatoInputEnvelope
    connect?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
  }

  export type ArquivoCandidatoUncheckedCreateNestedManyWithoutCandidatoInput = {
    create?: XOR<ArquivoCandidatoCreateWithoutCandidatoInput, ArquivoCandidatoUncheckedCreateWithoutCandidatoInput> | ArquivoCandidatoCreateWithoutCandidatoInput[] | ArquivoCandidatoUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: ArquivoCandidatoCreateOrConnectWithoutCandidatoInput | ArquivoCandidatoCreateOrConnectWithoutCandidatoInput[]
    createMany?: ArquivoCandidatoCreateManyCandidatoInputEnvelope
    connect?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
  }

  export type ArquivoCandidatoUpdateManyWithoutCandidatoNestedInput = {
    create?: XOR<ArquivoCandidatoCreateWithoutCandidatoInput, ArquivoCandidatoUncheckedCreateWithoutCandidatoInput> | ArquivoCandidatoCreateWithoutCandidatoInput[] | ArquivoCandidatoUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: ArquivoCandidatoCreateOrConnectWithoutCandidatoInput | ArquivoCandidatoCreateOrConnectWithoutCandidatoInput[]
    upsert?: ArquivoCandidatoUpsertWithWhereUniqueWithoutCandidatoInput | ArquivoCandidatoUpsertWithWhereUniqueWithoutCandidatoInput[]
    createMany?: ArquivoCandidatoCreateManyCandidatoInputEnvelope
    set?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    disconnect?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    delete?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    connect?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    update?: ArquivoCandidatoUpdateWithWhereUniqueWithoutCandidatoInput | ArquivoCandidatoUpdateWithWhereUniqueWithoutCandidatoInput[]
    updateMany?: ArquivoCandidatoUpdateManyWithWhereWithoutCandidatoInput | ArquivoCandidatoUpdateManyWithWhereWithoutCandidatoInput[]
    deleteMany?: ArquivoCandidatoScalarWhereInput | ArquivoCandidatoScalarWhereInput[]
  }

  export type ArquivoCandidatoUncheckedUpdateManyWithoutCandidatoNestedInput = {
    create?: XOR<ArquivoCandidatoCreateWithoutCandidatoInput, ArquivoCandidatoUncheckedCreateWithoutCandidatoInput> | ArquivoCandidatoCreateWithoutCandidatoInput[] | ArquivoCandidatoUncheckedCreateWithoutCandidatoInput[]
    connectOrCreate?: ArquivoCandidatoCreateOrConnectWithoutCandidatoInput | ArquivoCandidatoCreateOrConnectWithoutCandidatoInput[]
    upsert?: ArquivoCandidatoUpsertWithWhereUniqueWithoutCandidatoInput | ArquivoCandidatoUpsertWithWhereUniqueWithoutCandidatoInput[]
    createMany?: ArquivoCandidatoCreateManyCandidatoInputEnvelope
    set?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    disconnect?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    delete?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    connect?: ArquivoCandidatoWhereUniqueInput | ArquivoCandidatoWhereUniqueInput[]
    update?: ArquivoCandidatoUpdateWithWhereUniqueWithoutCandidatoInput | ArquivoCandidatoUpdateWithWhereUniqueWithoutCandidatoInput[]
    updateMany?: ArquivoCandidatoUpdateManyWithWhereWithoutCandidatoInput | ArquivoCandidatoUpdateManyWithWhereWithoutCandidatoInput[]
    deleteMany?: ArquivoCandidatoScalarWhereInput | ArquivoCandidatoScalarWhereInput[]
  }

  export type CandidatoCreateNestedOneWithoutArquivosInput = {
    create?: XOR<CandidatoCreateWithoutArquivosInput, CandidatoUncheckedCreateWithoutArquivosInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutArquivosInput
    connect?: CandidatoWhereUniqueInput
  }

  export type CandidatoUpdateOneRequiredWithoutArquivosNestedInput = {
    create?: XOR<CandidatoCreateWithoutArquivosInput, CandidatoUncheckedCreateWithoutArquivosInput>
    connectOrCreate?: CandidatoCreateOrConnectWithoutArquivosInput
    upsert?: CandidatoUpsertWithoutArquivosInput
    connect?: CandidatoWhereUniqueInput
    update?: XOR<XOR<CandidatoUpdateToOneWithWhereWithoutArquivosInput, CandidatoUpdateWithoutArquivosInput>, CandidatoUncheckedUpdateWithoutArquivosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FuncionarioCreateWithoutSubordinadosInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutSubordinadosInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutSubordinadosInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutSubordinadosInput, FuncionarioUncheckedCreateWithoutSubordinadosInput>
  }

  export type FuncionarioCreateWithoutGerenteInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutGerenteInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutGerenteInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutGerenteInput, FuncionarioUncheckedCreateWithoutGerenteInput>
  }

  export type FuncionarioCreateManyGerenteInputEnvelope = {
    data: FuncionarioCreateManyGerenteInput | FuncionarioCreateManyGerenteInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentoInteracaoCreateWithoutFuncionarioInput = {
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    cliente: ClienteCreateNestedOneWithoutAgendamentosInput
  }

  export type AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput = {
    id?: number
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    clienteId: number
  }

  export type AgendamentoInteracaoCreateOrConnectWithoutFuncionarioInput = {
    where: AgendamentoInteracaoWhereUniqueInput
    create: XOR<AgendamentoInteracaoCreateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput>
  }

  export type AgendamentoInteracaoCreateManyFuncionarioInputEnvelope = {
    data: AgendamentoInteracaoCreateManyFuncionarioInput | AgendamentoInteracaoCreateManyFuncionarioInput[]
    skipDuplicates?: boolean
  }

  export type ClienteCreateWithoutFuncionarioInput = {
    nome: string
    endereco: string
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutFuncionarioInput = {
    id?: number
    nome: string
    endereco: string
    funilId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutFuncionarioInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutFuncionarioInput, ClienteUncheckedCreateWithoutFuncionarioInput>
  }

  export type ClienteCreateManyFuncionarioInputEnvelope = {
    data: ClienteCreateManyFuncionarioInput | ClienteCreateManyFuncionarioInput[]
    skipDuplicates?: boolean
  }

  export type InteracaoClienteCreateWithoutFuncionarioInput = {
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    cliente: ClienteCreateNestedOneWithoutInteracoesInput
  }

  export type InteracaoClienteUncheckedCreateWithoutFuncionarioInput = {
    id?: number
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    clienteId: number
  }

  export type InteracaoClienteCreateOrConnectWithoutFuncionarioInput = {
    where: InteracaoClienteWhereUniqueInput
    create: XOR<InteracaoClienteCreateWithoutFuncionarioInput, InteracaoClienteUncheckedCreateWithoutFuncionarioInput>
  }

  export type InteracaoClienteCreateManyFuncionarioInputEnvelope = {
    data: InteracaoClienteCreateManyFuncionarioInput | InteracaoClienteCreateManyFuncionarioInput[]
    skipDuplicates?: boolean
  }

  export type EventoCreateWithoutOrganizadorInput = {
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    funcionariosConvidados?: FuncionariosConvidadosCreateNestedManyWithoutEventoInput
    notificacoes?: NotificacaoCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutOrganizadorInput = {
    id?: number
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    funcionariosConvidados?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutEventoInput
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutOrganizadorInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput>
  }

  export type EventoCreateManyOrganizadorInputEnvelope = {
    data: EventoCreateManyOrganizadorInput | EventoCreateManyOrganizadorInput[]
    skipDuplicates?: boolean
  }

  export type FuncionariosConvidadosCreateWithoutFuncionarioInput = {
    evento: EventoCreateNestedOneWithoutFuncionariosConvidadosInput
    notificacoes?: NotificacaoConvidadosCreateNestedManyWithoutConviteInput
    presenca?: PresencaCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput = {
    eventoId: number
    notificacoes?: NotificacaoConvidadosUncheckedCreateNestedManyWithoutConviteInput
    presenca?: PresencaUncheckedCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosCreateOrConnectWithoutFuncionarioInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    create: XOR<FuncionariosConvidadosCreateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput>
  }

  export type FuncionariosConvidadosCreateManyFuncionarioInputEnvelope = {
    data: FuncionariosConvidadosCreateManyFuncionarioInput | FuncionariosConvidadosCreateManyFuncionarioInput[]
    skipDuplicates?: boolean
  }

  export type VendaCreateWithoutFuncionarioInput = {
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    cliente: ClienteCreateNestedOneWithoutVendasInput
  }

  export type VendaUncheckedCreateWithoutFuncionarioInput = {
    id?: number
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    clienteId: number
  }

  export type VendaCreateOrConnectWithoutFuncionarioInput = {
    where: VendaWhereUniqueInput
    create: XOR<VendaCreateWithoutFuncionarioInput, VendaUncheckedCreateWithoutFuncionarioInput>
  }

  export type VendaCreateManyFuncionarioInputEnvelope = {
    data: VendaCreateManyFuncionarioInput | VendaCreateManyFuncionarioInput[]
    skipDuplicates?: boolean
  }

  export type FormTemplateCreateWithoutCriadoPorInput = {
    nome: string
    descricao?: string | null
    estrutura: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FormTemplateUncheckedCreateWithoutCriadoPorInput = {
    id?: number
    nome: string
    descricao?: string | null
    estrutura: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FormTemplateCreateOrConnectWithoutCriadoPorInput = {
    where: FormTemplateWhereUniqueInput
    create: XOR<FormTemplateCreateWithoutCriadoPorInput, FormTemplateUncheckedCreateWithoutCriadoPorInput>
  }

  export type FormTemplateCreateManyCriadoPorInputEnvelope = {
    data: FormTemplateCreateManyCriadoPorInput | FormTemplateCreateManyCriadoPorInput[]
    skipDuplicates?: boolean
  }

  export type FuncionarioUpsertWithoutSubordinadosInput = {
    update: XOR<FuncionarioUpdateWithoutSubordinadosInput, FuncionarioUncheckedUpdateWithoutSubordinadosInput>
    create: XOR<FuncionarioCreateWithoutSubordinadosInput, FuncionarioUncheckedCreateWithoutSubordinadosInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutSubordinadosInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutSubordinadosInput, FuncionarioUncheckedUpdateWithoutSubordinadosInput>
  }

  export type FuncionarioUpdateWithoutSubordinadosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutSubordinadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUpsertWithWhereUniqueWithoutGerenteInput = {
    where: FuncionarioWhereUniqueInput
    update: XOR<FuncionarioUpdateWithoutGerenteInput, FuncionarioUncheckedUpdateWithoutGerenteInput>
    create: XOR<FuncionarioCreateWithoutGerenteInput, FuncionarioUncheckedCreateWithoutGerenteInput>
  }

  export type FuncionarioUpdateWithWhereUniqueWithoutGerenteInput = {
    where: FuncionarioWhereUniqueInput
    data: XOR<FuncionarioUpdateWithoutGerenteInput, FuncionarioUncheckedUpdateWithoutGerenteInput>
  }

  export type FuncionarioUpdateManyWithWhereWithoutGerenteInput = {
    where: FuncionarioScalarWhereInput
    data: XOR<FuncionarioUpdateManyMutationInput, FuncionarioUncheckedUpdateManyWithoutGerenteInput>
  }

  export type FuncionarioScalarWhereInput = {
    AND?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
    OR?: FuncionarioScalarWhereInput[]
    NOT?: FuncionarioScalarWhereInput | FuncionarioScalarWhereInput[]
    id?: IntFilter<"Funcionario"> | number
    cpf?: StringFilter<"Funcionario"> | string
    nome?: StringFilter<"Funcionario"> | string
    endereco?: StringFilter<"Funcionario"> | string
    genero?: StringFilter<"Funcionario"> | string
    telefone?: StringFilter<"Funcionario"> | string
    cargo?: StringFilter<"Funcionario"> | string
    email?: StringFilter<"Funcionario"> | string
    local?: StringFilter<"Funcionario"> | string
    nivelAcesso?: StringFilter<"Funcionario"> | string
    senhaHash?: StringFilter<"Funcionario"> | string
    dataNascimento?: DateTimeFilter<"Funcionario"> | Date | string
    gerenteId?: IntNullableFilter<"Funcionario"> | number | null
  }

  export type AgendamentoInteracaoUpsertWithWhereUniqueWithoutFuncionarioInput = {
    where: AgendamentoInteracaoWhereUniqueInput
    update: XOR<AgendamentoInteracaoUpdateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedUpdateWithoutFuncionarioInput>
    create: XOR<AgendamentoInteracaoCreateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedCreateWithoutFuncionarioInput>
  }

  export type AgendamentoInteracaoUpdateWithWhereUniqueWithoutFuncionarioInput = {
    where: AgendamentoInteracaoWhereUniqueInput
    data: XOR<AgendamentoInteracaoUpdateWithoutFuncionarioInput, AgendamentoInteracaoUncheckedUpdateWithoutFuncionarioInput>
  }

  export type AgendamentoInteracaoUpdateManyWithWhereWithoutFuncionarioInput = {
    where: AgendamentoInteracaoScalarWhereInput
    data: XOR<AgendamentoInteracaoUpdateManyMutationInput, AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioInput>
  }

  export type AgendamentoInteracaoScalarWhereInput = {
    AND?: AgendamentoInteracaoScalarWhereInput | AgendamentoInteracaoScalarWhereInput[]
    OR?: AgendamentoInteracaoScalarWhereInput[]
    NOT?: AgendamentoInteracaoScalarWhereInput | AgendamentoInteracaoScalarWhereInput[]
    id?: IntFilter<"AgendamentoInteracao"> | number
    dataMarcada?: DateTimeFilter<"AgendamentoInteracao"> | Date | string
    tipoInteracao?: StringFilter<"AgendamentoInteracao"> | string
    status?: StringFilter<"AgendamentoInteracao"> | string
    notas?: StringNullableFilter<"AgendamentoInteracao"> | string | null
    funcionarioId?: IntFilter<"AgendamentoInteracao"> | number
    clienteId?: IntFilter<"AgendamentoInteracao"> | number
  }

  export type ClienteUpsertWithWhereUniqueWithoutFuncionarioInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutFuncionarioInput, ClienteUncheckedUpdateWithoutFuncionarioInput>
    create: XOR<ClienteCreateWithoutFuncionarioInput, ClienteUncheckedCreateWithoutFuncionarioInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutFuncionarioInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutFuncionarioInput, ClienteUncheckedUpdateWithoutFuncionarioInput>
  }

  export type ClienteUpdateManyWithWhereWithoutFuncionarioInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutFuncionarioInput>
  }

  export type ClienteScalarWhereInput = {
    AND?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    OR?: ClienteScalarWhereInput[]
    NOT?: ClienteScalarWhereInput | ClienteScalarWhereInput[]
    id?: IntFilter<"Cliente"> | number
    nome?: StringFilter<"Cliente"> | string
    endereco?: StringFilter<"Cliente"> | string
    funcionarioId?: IntFilter<"Cliente"> | number
    funilId?: IntFilter<"Cliente"> | number
  }

  export type InteracaoClienteUpsertWithWhereUniqueWithoutFuncionarioInput = {
    where: InteracaoClienteWhereUniqueInput
    update: XOR<InteracaoClienteUpdateWithoutFuncionarioInput, InteracaoClienteUncheckedUpdateWithoutFuncionarioInput>
    create: XOR<InteracaoClienteCreateWithoutFuncionarioInput, InteracaoClienteUncheckedCreateWithoutFuncionarioInput>
  }

  export type InteracaoClienteUpdateWithWhereUniqueWithoutFuncionarioInput = {
    where: InteracaoClienteWhereUniqueInput
    data: XOR<InteracaoClienteUpdateWithoutFuncionarioInput, InteracaoClienteUncheckedUpdateWithoutFuncionarioInput>
  }

  export type InteracaoClienteUpdateManyWithWhereWithoutFuncionarioInput = {
    where: InteracaoClienteScalarWhereInput
    data: XOR<InteracaoClienteUpdateManyMutationInput, InteracaoClienteUncheckedUpdateManyWithoutFuncionarioInput>
  }

  export type InteracaoClienteScalarWhereInput = {
    AND?: InteracaoClienteScalarWhereInput | InteracaoClienteScalarWhereInput[]
    OR?: InteracaoClienteScalarWhereInput[]
    NOT?: InteracaoClienteScalarWhereInput | InteracaoClienteScalarWhereInput[]
    id?: IntFilter<"InteracaoCliente"> | number
    dataInteracao?: DateTimeFilter<"InteracaoCliente"> | Date | string
    tipoInteracao?: StringFilter<"InteracaoCliente"> | string
    relatorioInteracao?: StringFilter<"InteracaoCliente"> | string
    funcionarioId?: IntFilter<"InteracaoCliente"> | number
    clienteId?: IntFilter<"InteracaoCliente"> | number
  }

  export type EventoUpsertWithWhereUniqueWithoutOrganizadorInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutOrganizadorInput, EventoUncheckedUpdateWithoutOrganizadorInput>
    create: XOR<EventoCreateWithoutOrganizadorInput, EventoUncheckedCreateWithoutOrganizadorInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutOrganizadorInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutOrganizadorInput, EventoUncheckedUpdateWithoutOrganizadorInput>
  }

  export type EventoUpdateManyWithWhereWithoutOrganizadorInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutOrganizadorInput>
  }

  export type EventoScalarWhereInput = {
    AND?: EventoScalarWhereInput | EventoScalarWhereInput[]
    OR?: EventoScalarWhereInput[]
    NOT?: EventoScalarWhereInput | EventoScalarWhereInput[]
    id?: IntFilter<"Evento"> | number
    titulo?: StringFilter<"Evento"> | string
    desc?: StringFilter<"Evento"> | string
    dataIni?: DateTimeFilter<"Evento"> | Date | string
    duracaoH?: IntFilter<"Evento"> | number
    link?: StringFilter<"Evento"> | string
    status?: StringFilter<"Evento"> | string
    organizadorId?: IntFilter<"Evento"> | number
  }

  export type FuncionariosConvidadosUpsertWithWhereUniqueWithoutFuncionarioInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    update: XOR<FuncionariosConvidadosUpdateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedUpdateWithoutFuncionarioInput>
    create: XOR<FuncionariosConvidadosCreateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedCreateWithoutFuncionarioInput>
  }

  export type FuncionariosConvidadosUpdateWithWhereUniqueWithoutFuncionarioInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    data: XOR<FuncionariosConvidadosUpdateWithoutFuncionarioInput, FuncionariosConvidadosUncheckedUpdateWithoutFuncionarioInput>
  }

  export type FuncionariosConvidadosUpdateManyWithWhereWithoutFuncionarioInput = {
    where: FuncionariosConvidadosScalarWhereInput
    data: XOR<FuncionariosConvidadosUpdateManyMutationInput, FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioInput>
  }

  export type FuncionariosConvidadosScalarWhereInput = {
    AND?: FuncionariosConvidadosScalarWhereInput | FuncionariosConvidadosScalarWhereInput[]
    OR?: FuncionariosConvidadosScalarWhereInput[]
    NOT?: FuncionariosConvidadosScalarWhereInput | FuncionariosConvidadosScalarWhereInput[]
    eventoId?: IntFilter<"FuncionariosConvidados"> | number
    funcionarioId?: IntFilter<"FuncionariosConvidados"> | number
  }

  export type VendaUpsertWithWhereUniqueWithoutFuncionarioInput = {
    where: VendaWhereUniqueInput
    update: XOR<VendaUpdateWithoutFuncionarioInput, VendaUncheckedUpdateWithoutFuncionarioInput>
    create: XOR<VendaCreateWithoutFuncionarioInput, VendaUncheckedCreateWithoutFuncionarioInput>
  }

  export type VendaUpdateWithWhereUniqueWithoutFuncionarioInput = {
    where: VendaWhereUniqueInput
    data: XOR<VendaUpdateWithoutFuncionarioInput, VendaUncheckedUpdateWithoutFuncionarioInput>
  }

  export type VendaUpdateManyWithWhereWithoutFuncionarioInput = {
    where: VendaScalarWhereInput
    data: XOR<VendaUpdateManyMutationInput, VendaUncheckedUpdateManyWithoutFuncionarioInput>
  }

  export type VendaScalarWhereInput = {
    AND?: VendaScalarWhereInput | VendaScalarWhereInput[]
    OR?: VendaScalarWhereInput[]
    NOT?: VendaScalarWhereInput | VendaScalarWhereInput[]
    id?: IntFilter<"Venda"> | number
    dataVenda?: DateTimeFilter<"Venda"> | Date | string
    total?: DecimalFilter<"Venda"> | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFilter<"Venda"> | number
    clienteId?: IntFilter<"Venda"> | number
  }

  export type FormTemplateUpsertWithWhereUniqueWithoutCriadoPorInput = {
    where: FormTemplateWhereUniqueInput
    update: XOR<FormTemplateUpdateWithoutCriadoPorInput, FormTemplateUncheckedUpdateWithoutCriadoPorInput>
    create: XOR<FormTemplateCreateWithoutCriadoPorInput, FormTemplateUncheckedCreateWithoutCriadoPorInput>
  }

  export type FormTemplateUpdateWithWhereUniqueWithoutCriadoPorInput = {
    where: FormTemplateWhereUniqueInput
    data: XOR<FormTemplateUpdateWithoutCriadoPorInput, FormTemplateUncheckedUpdateWithoutCriadoPorInput>
  }

  export type FormTemplateUpdateManyWithWhereWithoutCriadoPorInput = {
    where: FormTemplateScalarWhereInput
    data: XOR<FormTemplateUpdateManyMutationInput, FormTemplateUncheckedUpdateManyWithoutCriadoPorInput>
  }

  export type FormTemplateScalarWhereInput = {
    AND?: FormTemplateScalarWhereInput | FormTemplateScalarWhereInput[]
    OR?: FormTemplateScalarWhereInput[]
    NOT?: FormTemplateScalarWhereInput | FormTemplateScalarWhereInput[]
    id?: IntFilter<"FormTemplate"> | number
    nome?: StringFilter<"FormTemplate"> | string
    descricao?: StringNullableFilter<"FormTemplate"> | string | null
    estrutura?: JsonFilter<"FormTemplate">
    criadoPorId?: IntFilter<"FormTemplate"> | number
    createdAt?: DateTimeFilter<"FormTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"FormTemplate"> | Date | string
  }

  export type FuncionarioCreateWithoutClientesGerenciadosInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutClientesGerenciadosInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutClientesGerenciadosInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutClientesGerenciadosInput, FuncionarioUncheckedCreateWithoutClientesGerenciadosInput>
  }

  export type Funil_VendasCreateWithoutClientesInput = {
    estagioNome: string
    historico?: HistoricoFunilCreateNestedManyWithoutFunilVendasInput
  }

  export type Funil_VendasUncheckedCreateWithoutClientesInput = {
    id?: number
    estagioNome: string
    historico?: HistoricoFunilUncheckedCreateNestedManyWithoutFunilVendasInput
  }

  export type Funil_VendasCreateOrConnectWithoutClientesInput = {
    where: Funil_VendasWhereUniqueInput
    create: XOR<Funil_VendasCreateWithoutClientesInput, Funil_VendasUncheckedCreateWithoutClientesInput>
  }

  export type ContatoClienteCreateWithoutClienteInput = {
    tipoContato: string
    valorContrato: string
  }

  export type ContatoClienteUncheckedCreateWithoutClienteInput = {
    id?: number
    tipoContato: string
    valorContrato: string
  }

  export type ContatoClienteCreateOrConnectWithoutClienteInput = {
    where: ContatoClienteWhereUniqueInput
    create: XOR<ContatoClienteCreateWithoutClienteInput, ContatoClienteUncheckedCreateWithoutClienteInput>
  }

  export type ContatoClienteCreateManyClienteInputEnvelope = {
    data: ContatoClienteCreateManyClienteInput | ContatoClienteCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type AgendamentoInteracaoCreateWithoutClienteInput = {
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    funcionario: FuncionarioCreateNestedOneWithoutAgendamentosInteracaoInput
  }

  export type AgendamentoInteracaoUncheckedCreateWithoutClienteInput = {
    id?: number
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    funcionarioId: number
  }

  export type AgendamentoInteracaoCreateOrConnectWithoutClienteInput = {
    where: AgendamentoInteracaoWhereUniqueInput
    create: XOR<AgendamentoInteracaoCreateWithoutClienteInput, AgendamentoInteracaoUncheckedCreateWithoutClienteInput>
  }

  export type AgendamentoInteracaoCreateManyClienteInputEnvelope = {
    data: AgendamentoInteracaoCreateManyClienteInput | AgendamentoInteracaoCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type HistoricoFunilCreateWithoutClienteInput = {
    dataMovimentacao: Date | string
    funilVendas: Funil_VendasCreateNestedOneWithoutHistoricoInput
  }

  export type HistoricoFunilUncheckedCreateWithoutClienteInput = {
    id?: number
    dataMovimentacao: Date | string
    funilId: number
  }

  export type HistoricoFunilCreateOrConnectWithoutClienteInput = {
    where: HistoricoFunilWhereUniqueInput
    create: XOR<HistoricoFunilCreateWithoutClienteInput, HistoricoFunilUncheckedCreateWithoutClienteInput>
  }

  export type HistoricoFunilCreateManyClienteInputEnvelope = {
    data: HistoricoFunilCreateManyClienteInput | HistoricoFunilCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type InteracaoClienteCreateWithoutClienteInput = {
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    funcionario: FuncionarioCreateNestedOneWithoutInteracoesClienteInput
  }

  export type InteracaoClienteUncheckedCreateWithoutClienteInput = {
    id?: number
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    funcionarioId: number
  }

  export type InteracaoClienteCreateOrConnectWithoutClienteInput = {
    where: InteracaoClienteWhereUniqueInput
    create: XOR<InteracaoClienteCreateWithoutClienteInput, InteracaoClienteUncheckedCreateWithoutClienteInput>
  }

  export type InteracaoClienteCreateManyClienteInputEnvelope = {
    data: InteracaoClienteCreateManyClienteInput | InteracaoClienteCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type VendaCreateWithoutClienteInput = {
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    funcionario: FuncionarioCreateNestedOneWithoutVendasRealizadasInput
  }

  export type VendaUncheckedCreateWithoutClienteInput = {
    id?: number
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    funcionarioId: number
  }

  export type VendaCreateOrConnectWithoutClienteInput = {
    where: VendaWhereUniqueInput
    create: XOR<VendaCreateWithoutClienteInput, VendaUncheckedCreateWithoutClienteInput>
  }

  export type VendaCreateManyClienteInputEnvelope = {
    data: VendaCreateManyClienteInput | VendaCreateManyClienteInput[]
    skipDuplicates?: boolean
  }

  export type FuncionarioUpsertWithoutClientesGerenciadosInput = {
    update: XOR<FuncionarioUpdateWithoutClientesGerenciadosInput, FuncionarioUncheckedUpdateWithoutClientesGerenciadosInput>
    create: XOR<FuncionarioCreateWithoutClientesGerenciadosInput, FuncionarioUncheckedCreateWithoutClientesGerenciadosInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutClientesGerenciadosInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutClientesGerenciadosInput, FuncionarioUncheckedUpdateWithoutClientesGerenciadosInput>
  }

  export type FuncionarioUpdateWithoutClientesGerenciadosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutClientesGerenciadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type Funil_VendasUpsertWithoutClientesInput = {
    update: XOR<Funil_VendasUpdateWithoutClientesInput, Funil_VendasUncheckedUpdateWithoutClientesInput>
    create: XOR<Funil_VendasCreateWithoutClientesInput, Funil_VendasUncheckedCreateWithoutClientesInput>
    where?: Funil_VendasWhereInput
  }

  export type Funil_VendasUpdateToOneWithWhereWithoutClientesInput = {
    where?: Funil_VendasWhereInput
    data: XOR<Funil_VendasUpdateWithoutClientesInput, Funil_VendasUncheckedUpdateWithoutClientesInput>
  }

  export type Funil_VendasUpdateWithoutClientesInput = {
    estagioNome?: StringFieldUpdateOperationsInput | string
    historico?: HistoricoFunilUpdateManyWithoutFunilVendasNestedInput
  }

  export type Funil_VendasUncheckedUpdateWithoutClientesInput = {
    id?: IntFieldUpdateOperationsInput | number
    estagioNome?: StringFieldUpdateOperationsInput | string
    historico?: HistoricoFunilUncheckedUpdateManyWithoutFunilVendasNestedInput
  }

  export type ContatoClienteUpsertWithWhereUniqueWithoutClienteInput = {
    where: ContatoClienteWhereUniqueInput
    update: XOR<ContatoClienteUpdateWithoutClienteInput, ContatoClienteUncheckedUpdateWithoutClienteInput>
    create: XOR<ContatoClienteCreateWithoutClienteInput, ContatoClienteUncheckedCreateWithoutClienteInput>
  }

  export type ContatoClienteUpdateWithWhereUniqueWithoutClienteInput = {
    where: ContatoClienteWhereUniqueInput
    data: XOR<ContatoClienteUpdateWithoutClienteInput, ContatoClienteUncheckedUpdateWithoutClienteInput>
  }

  export type ContatoClienteUpdateManyWithWhereWithoutClienteInput = {
    where: ContatoClienteScalarWhereInput
    data: XOR<ContatoClienteUpdateManyMutationInput, ContatoClienteUncheckedUpdateManyWithoutClienteInput>
  }

  export type ContatoClienteScalarWhereInput = {
    AND?: ContatoClienteScalarWhereInput | ContatoClienteScalarWhereInput[]
    OR?: ContatoClienteScalarWhereInput[]
    NOT?: ContatoClienteScalarWhereInput | ContatoClienteScalarWhereInput[]
    id?: IntFilter<"ContatoCliente"> | number
    tipoContato?: StringFilter<"ContatoCliente"> | string
    valorContrato?: StringFilter<"ContatoCliente"> | string
    clienteId?: IntFilter<"ContatoCliente"> | number
  }

  export type AgendamentoInteracaoUpsertWithWhereUniqueWithoutClienteInput = {
    where: AgendamentoInteracaoWhereUniqueInput
    update: XOR<AgendamentoInteracaoUpdateWithoutClienteInput, AgendamentoInteracaoUncheckedUpdateWithoutClienteInput>
    create: XOR<AgendamentoInteracaoCreateWithoutClienteInput, AgendamentoInteracaoUncheckedCreateWithoutClienteInput>
  }

  export type AgendamentoInteracaoUpdateWithWhereUniqueWithoutClienteInput = {
    where: AgendamentoInteracaoWhereUniqueInput
    data: XOR<AgendamentoInteracaoUpdateWithoutClienteInput, AgendamentoInteracaoUncheckedUpdateWithoutClienteInput>
  }

  export type AgendamentoInteracaoUpdateManyWithWhereWithoutClienteInput = {
    where: AgendamentoInteracaoScalarWhereInput
    data: XOR<AgendamentoInteracaoUpdateManyMutationInput, AgendamentoInteracaoUncheckedUpdateManyWithoutClienteInput>
  }

  export type HistoricoFunilUpsertWithWhereUniqueWithoutClienteInput = {
    where: HistoricoFunilWhereUniqueInput
    update: XOR<HistoricoFunilUpdateWithoutClienteInput, HistoricoFunilUncheckedUpdateWithoutClienteInput>
    create: XOR<HistoricoFunilCreateWithoutClienteInput, HistoricoFunilUncheckedCreateWithoutClienteInput>
  }

  export type HistoricoFunilUpdateWithWhereUniqueWithoutClienteInput = {
    where: HistoricoFunilWhereUniqueInput
    data: XOR<HistoricoFunilUpdateWithoutClienteInput, HistoricoFunilUncheckedUpdateWithoutClienteInput>
  }

  export type HistoricoFunilUpdateManyWithWhereWithoutClienteInput = {
    where: HistoricoFunilScalarWhereInput
    data: XOR<HistoricoFunilUpdateManyMutationInput, HistoricoFunilUncheckedUpdateManyWithoutClienteInput>
  }

  export type HistoricoFunilScalarWhereInput = {
    AND?: HistoricoFunilScalarWhereInput | HistoricoFunilScalarWhereInput[]
    OR?: HistoricoFunilScalarWhereInput[]
    NOT?: HistoricoFunilScalarWhereInput | HistoricoFunilScalarWhereInput[]
    id?: IntFilter<"HistoricoFunil"> | number
    dataMovimentacao?: DateTimeFilter<"HistoricoFunil"> | Date | string
    clienteId?: IntFilter<"HistoricoFunil"> | number
    funilId?: IntFilter<"HistoricoFunil"> | number
  }

  export type InteracaoClienteUpsertWithWhereUniqueWithoutClienteInput = {
    where: InteracaoClienteWhereUniqueInput
    update: XOR<InteracaoClienteUpdateWithoutClienteInput, InteracaoClienteUncheckedUpdateWithoutClienteInput>
    create: XOR<InteracaoClienteCreateWithoutClienteInput, InteracaoClienteUncheckedCreateWithoutClienteInput>
  }

  export type InteracaoClienteUpdateWithWhereUniqueWithoutClienteInput = {
    where: InteracaoClienteWhereUniqueInput
    data: XOR<InteracaoClienteUpdateWithoutClienteInput, InteracaoClienteUncheckedUpdateWithoutClienteInput>
  }

  export type InteracaoClienteUpdateManyWithWhereWithoutClienteInput = {
    where: InteracaoClienteScalarWhereInput
    data: XOR<InteracaoClienteUpdateManyMutationInput, InteracaoClienteUncheckedUpdateManyWithoutClienteInput>
  }

  export type VendaUpsertWithWhereUniqueWithoutClienteInput = {
    where: VendaWhereUniqueInput
    update: XOR<VendaUpdateWithoutClienteInput, VendaUncheckedUpdateWithoutClienteInput>
    create: XOR<VendaCreateWithoutClienteInput, VendaUncheckedCreateWithoutClienteInput>
  }

  export type VendaUpdateWithWhereUniqueWithoutClienteInput = {
    where: VendaWhereUniqueInput
    data: XOR<VendaUpdateWithoutClienteInput, VendaUncheckedUpdateWithoutClienteInput>
  }

  export type VendaUpdateManyWithWhereWithoutClienteInput = {
    where: VendaScalarWhereInput
    data: XOR<VendaUpdateManyMutationInput, VendaUncheckedUpdateManyWithoutClienteInput>
  }

  export type ClienteCreateWithoutFunilVendasInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutFunilVendasInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutFunilVendasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutFunilVendasInput, ClienteUncheckedCreateWithoutFunilVendasInput>
  }

  export type ClienteCreateManyFunilVendasInputEnvelope = {
    data: ClienteCreateManyFunilVendasInput | ClienteCreateManyFunilVendasInput[]
    skipDuplicates?: boolean
  }

  export type HistoricoFunilCreateWithoutFunilVendasInput = {
    dataMovimentacao: Date | string
    cliente: ClienteCreateNestedOneWithoutHistoricoFunilInput
  }

  export type HistoricoFunilUncheckedCreateWithoutFunilVendasInput = {
    id?: number
    dataMovimentacao: Date | string
    clienteId: number
  }

  export type HistoricoFunilCreateOrConnectWithoutFunilVendasInput = {
    where: HistoricoFunilWhereUniqueInput
    create: XOR<HistoricoFunilCreateWithoutFunilVendasInput, HistoricoFunilUncheckedCreateWithoutFunilVendasInput>
  }

  export type HistoricoFunilCreateManyFunilVendasInputEnvelope = {
    data: HistoricoFunilCreateManyFunilVendasInput | HistoricoFunilCreateManyFunilVendasInput[]
    skipDuplicates?: boolean
  }

  export type ClienteUpsertWithWhereUniqueWithoutFunilVendasInput = {
    where: ClienteWhereUniqueInput
    update: XOR<ClienteUpdateWithoutFunilVendasInput, ClienteUncheckedUpdateWithoutFunilVendasInput>
    create: XOR<ClienteCreateWithoutFunilVendasInput, ClienteUncheckedCreateWithoutFunilVendasInput>
  }

  export type ClienteUpdateWithWhereUniqueWithoutFunilVendasInput = {
    where: ClienteWhereUniqueInput
    data: XOR<ClienteUpdateWithoutFunilVendasInput, ClienteUncheckedUpdateWithoutFunilVendasInput>
  }

  export type ClienteUpdateManyWithWhereWithoutFunilVendasInput = {
    where: ClienteScalarWhereInput
    data: XOR<ClienteUpdateManyMutationInput, ClienteUncheckedUpdateManyWithoutFunilVendasInput>
  }

  export type HistoricoFunilUpsertWithWhereUniqueWithoutFunilVendasInput = {
    where: HistoricoFunilWhereUniqueInput
    update: XOR<HistoricoFunilUpdateWithoutFunilVendasInput, HistoricoFunilUncheckedUpdateWithoutFunilVendasInput>
    create: XOR<HistoricoFunilCreateWithoutFunilVendasInput, HistoricoFunilUncheckedCreateWithoutFunilVendasInput>
  }

  export type HistoricoFunilUpdateWithWhereUniqueWithoutFunilVendasInput = {
    where: HistoricoFunilWhereUniqueInput
    data: XOR<HistoricoFunilUpdateWithoutFunilVendasInput, HistoricoFunilUncheckedUpdateWithoutFunilVendasInput>
  }

  export type HistoricoFunilUpdateManyWithWhereWithoutFunilVendasInput = {
    where: HistoricoFunilScalarWhereInput
    data: XOR<HistoricoFunilUpdateManyMutationInput, HistoricoFunilUncheckedUpdateManyWithoutFunilVendasInput>
  }

  export type FuncionarioCreateWithoutEventosOrganizadosInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutEventosOrganizadosInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutEventosOrganizadosInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutEventosOrganizadosInput, FuncionarioUncheckedCreateWithoutEventosOrganizadosInput>
  }

  export type FuncionariosConvidadosCreateWithoutEventoInput = {
    funcionario: FuncionarioCreateNestedOneWithoutConvitesEventosInput
    notificacoes?: NotificacaoConvidadosCreateNestedManyWithoutConviteInput
    presenca?: PresencaCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosUncheckedCreateWithoutEventoInput = {
    funcionarioId: number
    notificacoes?: NotificacaoConvidadosUncheckedCreateNestedManyWithoutConviteInput
    presenca?: PresencaUncheckedCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosCreateOrConnectWithoutEventoInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    create: XOR<FuncionariosConvidadosCreateWithoutEventoInput, FuncionariosConvidadosUncheckedCreateWithoutEventoInput>
  }

  export type FuncionariosConvidadosCreateManyEventoInputEnvelope = {
    data: FuncionariosConvidadosCreateManyEventoInput | FuncionariosConvidadosCreateManyEventoInput[]
    skipDuplicates?: boolean
  }

  export type NotificacaoCreateWithoutEventoInput = {
    titulo: string
    corpo?: string | null
    convidados?: NotificacaoConvidadosCreateNestedManyWithoutNotificacaoInput
  }

  export type NotificacaoUncheckedCreateWithoutEventoInput = {
    id?: number
    titulo: string
    corpo?: string | null
    convidados?: NotificacaoConvidadosUncheckedCreateNestedManyWithoutNotificacaoInput
  }

  export type NotificacaoCreateOrConnectWithoutEventoInput = {
    where: NotificacaoWhereUniqueInput
    create: XOR<NotificacaoCreateWithoutEventoInput, NotificacaoUncheckedCreateWithoutEventoInput>
  }

  export type NotificacaoCreateManyEventoInputEnvelope = {
    data: NotificacaoCreateManyEventoInput | NotificacaoCreateManyEventoInput[]
    skipDuplicates?: boolean
  }

  export type FuncionarioUpsertWithoutEventosOrganizadosInput = {
    update: XOR<FuncionarioUpdateWithoutEventosOrganizadosInput, FuncionarioUncheckedUpdateWithoutEventosOrganizadosInput>
    create: XOR<FuncionarioCreateWithoutEventosOrganizadosInput, FuncionarioUncheckedCreateWithoutEventosOrganizadosInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutEventosOrganizadosInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutEventosOrganizadosInput, FuncionarioUncheckedUpdateWithoutEventosOrganizadosInput>
  }

  export type FuncionarioUpdateWithoutEventosOrganizadosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutEventosOrganizadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionariosConvidadosUpsertWithWhereUniqueWithoutEventoInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    update: XOR<FuncionariosConvidadosUpdateWithoutEventoInput, FuncionariosConvidadosUncheckedUpdateWithoutEventoInput>
    create: XOR<FuncionariosConvidadosCreateWithoutEventoInput, FuncionariosConvidadosUncheckedCreateWithoutEventoInput>
  }

  export type FuncionariosConvidadosUpdateWithWhereUniqueWithoutEventoInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    data: XOR<FuncionariosConvidadosUpdateWithoutEventoInput, FuncionariosConvidadosUncheckedUpdateWithoutEventoInput>
  }

  export type FuncionariosConvidadosUpdateManyWithWhereWithoutEventoInput = {
    where: FuncionariosConvidadosScalarWhereInput
    data: XOR<FuncionariosConvidadosUpdateManyMutationInput, FuncionariosConvidadosUncheckedUpdateManyWithoutEventoInput>
  }

  export type NotificacaoUpsertWithWhereUniqueWithoutEventoInput = {
    where: NotificacaoWhereUniqueInput
    update: XOR<NotificacaoUpdateWithoutEventoInput, NotificacaoUncheckedUpdateWithoutEventoInput>
    create: XOR<NotificacaoCreateWithoutEventoInput, NotificacaoUncheckedCreateWithoutEventoInput>
  }

  export type NotificacaoUpdateWithWhereUniqueWithoutEventoInput = {
    where: NotificacaoWhereUniqueInput
    data: XOR<NotificacaoUpdateWithoutEventoInput, NotificacaoUncheckedUpdateWithoutEventoInput>
  }

  export type NotificacaoUpdateManyWithWhereWithoutEventoInput = {
    where: NotificacaoScalarWhereInput
    data: XOR<NotificacaoUpdateManyMutationInput, NotificacaoUncheckedUpdateManyWithoutEventoInput>
  }

  export type NotificacaoScalarWhereInput = {
    AND?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
    OR?: NotificacaoScalarWhereInput[]
    NOT?: NotificacaoScalarWhereInput | NotificacaoScalarWhereInput[]
    id?: IntFilter<"Notificacao"> | number
    titulo?: StringFilter<"Notificacao"> | string
    corpo?: StringNullableFilter<"Notificacao"> | string | null
    eventoId?: IntFilter<"Notificacao"> | number
  }

  export type ClienteCreateWithoutContatosInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutContatosInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutContatosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
  }

  export type ClienteUpsertWithoutContatosInput = {
    update: XOR<ClienteUpdateWithoutContatosInput, ClienteUncheckedUpdateWithoutContatosInput>
    create: XOR<ClienteCreateWithoutContatosInput, ClienteUncheckedCreateWithoutContatosInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutContatosInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutContatosInput, ClienteUncheckedUpdateWithoutContatosInput>
  }

  export type ClienteUpdateWithoutContatosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutContatosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type FuncionarioCreateWithoutAgendamentosInteracaoInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutAgendamentosInteracaoInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutAgendamentosInteracaoInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutAgendamentosInteracaoInput, FuncionarioUncheckedCreateWithoutAgendamentosInteracaoInput>
  }

  export type ClienteCreateWithoutAgendamentosInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutAgendamentosInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutAgendamentosInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutAgendamentosInput, ClienteUncheckedCreateWithoutAgendamentosInput>
  }

  export type FuncionarioUpsertWithoutAgendamentosInteracaoInput = {
    update: XOR<FuncionarioUpdateWithoutAgendamentosInteracaoInput, FuncionarioUncheckedUpdateWithoutAgendamentosInteracaoInput>
    create: XOR<FuncionarioCreateWithoutAgendamentosInteracaoInput, FuncionarioUncheckedCreateWithoutAgendamentosInteracaoInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutAgendamentosInteracaoInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutAgendamentosInteracaoInput, FuncionarioUncheckedUpdateWithoutAgendamentosInteracaoInput>
  }

  export type FuncionarioUpdateWithoutAgendamentosInteracaoInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutAgendamentosInteracaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type ClienteUpsertWithoutAgendamentosInput = {
    update: XOR<ClienteUpdateWithoutAgendamentosInput, ClienteUncheckedUpdateWithoutAgendamentosInput>
    create: XOR<ClienteCreateWithoutAgendamentosInput, ClienteUncheckedCreateWithoutAgendamentosInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutAgendamentosInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutAgendamentosInput, ClienteUncheckedUpdateWithoutAgendamentosInput>
  }

  export type ClienteUpdateWithoutAgendamentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutAgendamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteCreateWithoutHistoricoFunilInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutHistoricoFunilInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutHistoricoFunilInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutHistoricoFunilInput, ClienteUncheckedCreateWithoutHistoricoFunilInput>
  }

  export type Funil_VendasCreateWithoutHistoricoInput = {
    estagioNome: string
    clientes?: ClienteCreateNestedManyWithoutFunilVendasInput
  }

  export type Funil_VendasUncheckedCreateWithoutHistoricoInput = {
    id?: number
    estagioNome: string
    clientes?: ClienteUncheckedCreateNestedManyWithoutFunilVendasInput
  }

  export type Funil_VendasCreateOrConnectWithoutHistoricoInput = {
    where: Funil_VendasWhereUniqueInput
    create: XOR<Funil_VendasCreateWithoutHistoricoInput, Funil_VendasUncheckedCreateWithoutHistoricoInput>
  }

  export type ClienteUpsertWithoutHistoricoFunilInput = {
    update: XOR<ClienteUpdateWithoutHistoricoFunilInput, ClienteUncheckedUpdateWithoutHistoricoFunilInput>
    create: XOR<ClienteCreateWithoutHistoricoFunilInput, ClienteUncheckedCreateWithoutHistoricoFunilInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutHistoricoFunilInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutHistoricoFunilInput, ClienteUncheckedUpdateWithoutHistoricoFunilInput>
  }

  export type ClienteUpdateWithoutHistoricoFunilInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutHistoricoFunilInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type Funil_VendasUpsertWithoutHistoricoInput = {
    update: XOR<Funil_VendasUpdateWithoutHistoricoInput, Funil_VendasUncheckedUpdateWithoutHistoricoInput>
    create: XOR<Funil_VendasCreateWithoutHistoricoInput, Funil_VendasUncheckedCreateWithoutHistoricoInput>
    where?: Funil_VendasWhereInput
  }

  export type Funil_VendasUpdateToOneWithWhereWithoutHistoricoInput = {
    where?: Funil_VendasWhereInput
    data: XOR<Funil_VendasUpdateWithoutHistoricoInput, Funil_VendasUncheckedUpdateWithoutHistoricoInput>
  }

  export type Funil_VendasUpdateWithoutHistoricoInput = {
    estagioNome?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteUpdateManyWithoutFunilVendasNestedInput
  }

  export type Funil_VendasUncheckedUpdateWithoutHistoricoInput = {
    id?: IntFieldUpdateOperationsInput | number
    estagioNome?: StringFieldUpdateOperationsInput | string
    clientes?: ClienteUncheckedUpdateManyWithoutFunilVendasNestedInput
  }

  export type FuncionarioCreateWithoutInteracoesClienteInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutInteracoesClienteInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutInteracoesClienteInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutInteracoesClienteInput, FuncionarioUncheckedCreateWithoutInteracoesClienteInput>
  }

  export type ClienteCreateWithoutInteracoesInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    vendas?: VendaCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutInteracoesInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    vendas?: VendaUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutInteracoesInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
  }

  export type FuncionarioUpsertWithoutInteracoesClienteInput = {
    update: XOR<FuncionarioUpdateWithoutInteracoesClienteInput, FuncionarioUncheckedUpdateWithoutInteracoesClienteInput>
    create: XOR<FuncionarioCreateWithoutInteracoesClienteInput, FuncionarioUncheckedCreateWithoutInteracoesClienteInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutInteracoesClienteInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutInteracoesClienteInput, FuncionarioUncheckedUpdateWithoutInteracoesClienteInput>
  }

  export type FuncionarioUpdateWithoutInteracoesClienteInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutInteracoesClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type ClienteUpsertWithoutInteracoesInput = {
    update: XOR<ClienteUpdateWithoutInteracoesInput, ClienteUncheckedUpdateWithoutInteracoesInput>
    create: XOR<ClienteCreateWithoutInteracoesInput, ClienteUncheckedCreateWithoutInteracoesInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutInteracoesInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutInteracoesInput, ClienteUncheckedUpdateWithoutInteracoesInput>
  }

  export type ClienteUpdateWithoutInteracoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutInteracoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type FuncionarioCreateWithoutVendasRealizadasInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutVendasRealizadasInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutVendasRealizadasInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutVendasRealizadasInput, FuncionarioUncheckedCreateWithoutVendasRealizadasInput>
  }

  export type ClienteCreateWithoutVendasInput = {
    nome: string
    endereco: string
    funcionario: FuncionarioCreateNestedOneWithoutClientesGerenciadosInput
    funilVendas: Funil_VendasCreateNestedOneWithoutClientesInput
    contatos?: ContatoClienteCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteCreateNestedManyWithoutClienteInput
  }

  export type ClienteUncheckedCreateWithoutVendasInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
    funilId: number
    contatos?: ContatoClienteUncheckedCreateNestedManyWithoutClienteInput
    agendamentos?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutClienteInput
    historicoFunil?: HistoricoFunilUncheckedCreateNestedManyWithoutClienteInput
    interacoes?: InteracaoClienteUncheckedCreateNestedManyWithoutClienteInput
  }

  export type ClienteCreateOrConnectWithoutVendasInput = {
    where: ClienteWhereUniqueInput
    create: XOR<ClienteCreateWithoutVendasInput, ClienteUncheckedCreateWithoutVendasInput>
  }

  export type FuncionarioUpsertWithoutVendasRealizadasInput = {
    update: XOR<FuncionarioUpdateWithoutVendasRealizadasInput, FuncionarioUncheckedUpdateWithoutVendasRealizadasInput>
    create: XOR<FuncionarioCreateWithoutVendasRealizadasInput, FuncionarioUncheckedCreateWithoutVendasRealizadasInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutVendasRealizadasInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutVendasRealizadasInput, FuncionarioUncheckedUpdateWithoutVendasRealizadasInput>
  }

  export type FuncionarioUpdateWithoutVendasRealizadasInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutVendasRealizadasInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type ClienteUpsertWithoutVendasInput = {
    update: XOR<ClienteUpdateWithoutVendasInput, ClienteUncheckedUpdateWithoutVendasInput>
    create: XOR<ClienteCreateWithoutVendasInput, ClienteUncheckedCreateWithoutVendasInput>
    where?: ClienteWhereInput
  }

  export type ClienteUpdateToOneWithWhereWithoutVendasInput = {
    where?: ClienteWhereInput
    data: XOR<ClienteUpdateWithoutVendasInput, ClienteUncheckedUpdateWithoutVendasInput>
  }

  export type ClienteUpdateWithoutVendasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    funilId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type EventoCreateWithoutFuncionariosConvidadosInput = {
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizador: FuncionarioCreateNestedOneWithoutEventosOrganizadosInput
    notificacoes?: NotificacaoCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutFuncionariosConvidadosInput = {
    id?: number
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizadorId: number
    notificacoes?: NotificacaoUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutFuncionariosConvidadosInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutFuncionariosConvidadosInput, EventoUncheckedCreateWithoutFuncionariosConvidadosInput>
  }

  export type FuncionarioCreateWithoutConvitesEventosInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioUncheckedCreateWithoutConvitesEventosInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
    formTemplatesCriados?: FormTemplateUncheckedCreateNestedManyWithoutCriadoPorInput
  }

  export type FuncionarioCreateOrConnectWithoutConvitesEventosInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutConvitesEventosInput, FuncionarioUncheckedCreateWithoutConvitesEventosInput>
  }

  export type NotificacaoConvidadosCreateWithoutConviteInput = {
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
    notificacao: NotificacaoCreateNestedOneWithoutConvidadosInput
  }

  export type NotificacaoConvidadosUncheckedCreateWithoutConviteInput = {
    notificacaoId: number
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
  }

  export type NotificacaoConvidadosCreateOrConnectWithoutConviteInput = {
    where: NotificacaoConvidadosWhereUniqueInput
    create: XOR<NotificacaoConvidadosCreateWithoutConviteInput, NotificacaoConvidadosUncheckedCreateWithoutConviteInput>
  }

  export type NotificacaoConvidadosCreateManyConviteInputEnvelope = {
    data: NotificacaoConvidadosCreateManyConviteInput | NotificacaoConvidadosCreateManyConviteInput[]
    skipDuplicates?: boolean
  }

  export type PresencaCreateWithoutConviteInput = {
    presente: boolean
    razaoRecusa?: string | null
    dataTermino?: Date | string | null
    linkFeedback?: string | null
  }

  export type PresencaUncheckedCreateWithoutConviteInput = {
    id?: number
    presente: boolean
    razaoRecusa?: string | null
    dataTermino?: Date | string | null
    linkFeedback?: string | null
  }

  export type PresencaCreateOrConnectWithoutConviteInput = {
    where: PresencaWhereUniqueInput
    create: XOR<PresencaCreateWithoutConviteInput, PresencaUncheckedCreateWithoutConviteInput>
  }

  export type EventoUpsertWithoutFuncionariosConvidadosInput = {
    update: XOR<EventoUpdateWithoutFuncionariosConvidadosInput, EventoUncheckedUpdateWithoutFuncionariosConvidadosInput>
    create: XOR<EventoCreateWithoutFuncionariosConvidadosInput, EventoUncheckedCreateWithoutFuncionariosConvidadosInput>
    where?: EventoWhereInput
  }

  export type EventoUpdateToOneWithWhereWithoutFuncionariosConvidadosInput = {
    where?: EventoWhereInput
    data: XOR<EventoUpdateWithoutFuncionariosConvidadosInput, EventoUncheckedUpdateWithoutFuncionariosConvidadosInput>
  }

  export type EventoUpdateWithoutFuncionariosConvidadosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizador?: FuncionarioUpdateOneRequiredWithoutEventosOrganizadosNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutFuncionariosConvidadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizadorId?: IntFieldUpdateOperationsInput | number
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type FuncionarioUpsertWithoutConvitesEventosInput = {
    update: XOR<FuncionarioUpdateWithoutConvitesEventosInput, FuncionarioUncheckedUpdateWithoutConvitesEventosInput>
    create: XOR<FuncionarioCreateWithoutConvitesEventosInput, FuncionarioUncheckedCreateWithoutConvitesEventosInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutConvitesEventosInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutConvitesEventosInput, FuncionarioUncheckedUpdateWithoutConvitesEventosInput>
  }

  export type FuncionarioUpdateWithoutConvitesEventosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutConvitesEventosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type NotificacaoConvidadosUpsertWithWhereUniqueWithoutConviteInput = {
    where: NotificacaoConvidadosWhereUniqueInput
    update: XOR<NotificacaoConvidadosUpdateWithoutConviteInput, NotificacaoConvidadosUncheckedUpdateWithoutConviteInput>
    create: XOR<NotificacaoConvidadosCreateWithoutConviteInput, NotificacaoConvidadosUncheckedCreateWithoutConviteInput>
  }

  export type NotificacaoConvidadosUpdateWithWhereUniqueWithoutConviteInput = {
    where: NotificacaoConvidadosWhereUniqueInput
    data: XOR<NotificacaoConvidadosUpdateWithoutConviteInput, NotificacaoConvidadosUncheckedUpdateWithoutConviteInput>
  }

  export type NotificacaoConvidadosUpdateManyWithWhereWithoutConviteInput = {
    where: NotificacaoConvidadosScalarWhereInput
    data: XOR<NotificacaoConvidadosUpdateManyMutationInput, NotificacaoConvidadosUncheckedUpdateManyWithoutConviteInput>
  }

  export type NotificacaoConvidadosScalarWhereInput = {
    AND?: NotificacaoConvidadosScalarWhereInput | NotificacaoConvidadosScalarWhereInput[]
    OR?: NotificacaoConvidadosScalarWhereInput[]
    NOT?: NotificacaoConvidadosScalarWhereInput | NotificacaoConvidadosScalarWhereInput[]
    eventoId?: IntFilter<"NotificacaoConvidados"> | number
    funcionarioId?: IntFilter<"NotificacaoConvidados"> | number
    notificacaoId?: IntFilter<"NotificacaoConvidados"> | number
    statusLeitura?: BoolFilter<"NotificacaoConvidados"> | boolean
    dataLeitura?: DateTimeNullableFilter<"NotificacaoConvidados"> | Date | string | null
    prioridade?: StringFilter<"NotificacaoConvidados"> | string
  }

  export type PresencaUpsertWithoutConviteInput = {
    update: XOR<PresencaUpdateWithoutConviteInput, PresencaUncheckedUpdateWithoutConviteInput>
    create: XOR<PresencaCreateWithoutConviteInput, PresencaUncheckedCreateWithoutConviteInput>
    where?: PresencaWhereInput
  }

  export type PresencaUpdateToOneWithWhereWithoutConviteInput = {
    where?: PresencaWhereInput
    data: XOR<PresencaUpdateWithoutConviteInput, PresencaUncheckedUpdateWithoutConviteInput>
  }

  export type PresencaUpdateWithoutConviteInput = {
    presente?: BoolFieldUpdateOperationsInput | boolean
    razaoRecusa?: NullableStringFieldUpdateOperationsInput | string | null
    dataTermino?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    linkFeedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PresencaUncheckedUpdateWithoutConviteInput = {
    id?: IntFieldUpdateOperationsInput | number
    presente?: BoolFieldUpdateOperationsInput | boolean
    razaoRecusa?: NullableStringFieldUpdateOperationsInput | string | null
    dataTermino?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    linkFeedback?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventoCreateWithoutNotificacoesInput = {
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizador: FuncionarioCreateNestedOneWithoutEventosOrganizadosInput
    funcionariosConvidados?: FuncionariosConvidadosCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutNotificacoesInput = {
    id?: number
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
    organizadorId: number
    funcionariosConvidados?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutNotificacoesInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutNotificacoesInput, EventoUncheckedCreateWithoutNotificacoesInput>
  }

  export type NotificacaoConvidadosCreateWithoutNotificacaoInput = {
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
    convite: FuncionariosConvidadosCreateNestedOneWithoutNotificacoesInput
  }

  export type NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput = {
    eventoId: number
    funcionarioId: number
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
  }

  export type NotificacaoConvidadosCreateOrConnectWithoutNotificacaoInput = {
    where: NotificacaoConvidadosWhereUniqueInput
    create: XOR<NotificacaoConvidadosCreateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput>
  }

  export type NotificacaoConvidadosCreateManyNotificacaoInputEnvelope = {
    data: NotificacaoConvidadosCreateManyNotificacaoInput | NotificacaoConvidadosCreateManyNotificacaoInput[]
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithoutNotificacoesInput = {
    update: XOR<EventoUpdateWithoutNotificacoesInput, EventoUncheckedUpdateWithoutNotificacoesInput>
    create: XOR<EventoCreateWithoutNotificacoesInput, EventoUncheckedCreateWithoutNotificacoesInput>
    where?: EventoWhereInput
  }

  export type EventoUpdateToOneWithWhereWithoutNotificacoesInput = {
    where?: EventoWhereInput
    data: XOR<EventoUpdateWithoutNotificacoesInput, EventoUncheckedUpdateWithoutNotificacoesInput>
  }

  export type EventoUpdateWithoutNotificacoesInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizador?: FuncionarioUpdateOneRequiredWithoutEventosOrganizadosNestedInput
    funcionariosConvidados?: FuncionariosConvidadosUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutNotificacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    organizadorId?: IntFieldUpdateOperationsInput | number
    funcionariosConvidados?: FuncionariosConvidadosUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type NotificacaoConvidadosUpsertWithWhereUniqueWithoutNotificacaoInput = {
    where: NotificacaoConvidadosWhereUniqueInput
    update: XOR<NotificacaoConvidadosUpdateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedUpdateWithoutNotificacaoInput>
    create: XOR<NotificacaoConvidadosCreateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedCreateWithoutNotificacaoInput>
  }

  export type NotificacaoConvidadosUpdateWithWhereUniqueWithoutNotificacaoInput = {
    where: NotificacaoConvidadosWhereUniqueInput
    data: XOR<NotificacaoConvidadosUpdateWithoutNotificacaoInput, NotificacaoConvidadosUncheckedUpdateWithoutNotificacaoInput>
  }

  export type NotificacaoConvidadosUpdateManyWithWhereWithoutNotificacaoInput = {
    where: NotificacaoConvidadosScalarWhereInput
    data: XOR<NotificacaoConvidadosUpdateManyMutationInput, NotificacaoConvidadosUncheckedUpdateManyWithoutNotificacaoInput>
  }

  export type FuncionariosConvidadosCreateWithoutNotificacoesInput = {
    evento: EventoCreateNestedOneWithoutFuncionariosConvidadosInput
    funcionario: FuncionarioCreateNestedOneWithoutConvitesEventosInput
    presenca?: PresencaCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosUncheckedCreateWithoutNotificacoesInput = {
    eventoId: number
    funcionarioId: number
    presenca?: PresencaUncheckedCreateNestedOneWithoutConviteInput
  }

  export type FuncionariosConvidadosCreateOrConnectWithoutNotificacoesInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    create: XOR<FuncionariosConvidadosCreateWithoutNotificacoesInput, FuncionariosConvidadosUncheckedCreateWithoutNotificacoesInput>
  }

  export type NotificacaoCreateWithoutConvidadosInput = {
    titulo: string
    corpo?: string | null
    evento: EventoCreateNestedOneWithoutNotificacoesInput
  }

  export type NotificacaoUncheckedCreateWithoutConvidadosInput = {
    id?: number
    titulo: string
    corpo?: string | null
    eventoId: number
  }

  export type NotificacaoCreateOrConnectWithoutConvidadosInput = {
    where: NotificacaoWhereUniqueInput
    create: XOR<NotificacaoCreateWithoutConvidadosInput, NotificacaoUncheckedCreateWithoutConvidadosInput>
  }

  export type FuncionariosConvidadosUpsertWithoutNotificacoesInput = {
    update: XOR<FuncionariosConvidadosUpdateWithoutNotificacoesInput, FuncionariosConvidadosUncheckedUpdateWithoutNotificacoesInput>
    create: XOR<FuncionariosConvidadosCreateWithoutNotificacoesInput, FuncionariosConvidadosUncheckedCreateWithoutNotificacoesInput>
    where?: FuncionariosConvidadosWhereInput
  }

  export type FuncionariosConvidadosUpdateToOneWithWhereWithoutNotificacoesInput = {
    where?: FuncionariosConvidadosWhereInput
    data: XOR<FuncionariosConvidadosUpdateWithoutNotificacoesInput, FuncionariosConvidadosUncheckedUpdateWithoutNotificacoesInput>
  }

  export type FuncionariosConvidadosUpdateWithoutNotificacoesInput = {
    evento?: EventoUpdateOneRequiredWithoutFuncionariosConvidadosNestedInput
    funcionario?: FuncionarioUpdateOneRequiredWithoutConvitesEventosNestedInput
    presenca?: PresencaUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateWithoutNotificacoesInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    presenca?: PresencaUncheckedUpdateOneWithoutConviteNestedInput
  }

  export type NotificacaoUpsertWithoutConvidadosInput = {
    update: XOR<NotificacaoUpdateWithoutConvidadosInput, NotificacaoUncheckedUpdateWithoutConvidadosInput>
    create: XOR<NotificacaoCreateWithoutConvidadosInput, NotificacaoUncheckedCreateWithoutConvidadosInput>
    where?: NotificacaoWhereInput
  }

  export type NotificacaoUpdateToOneWithWhereWithoutConvidadosInput = {
    where?: NotificacaoWhereInput
    data: XOR<NotificacaoUpdateWithoutConvidadosInput, NotificacaoUncheckedUpdateWithoutConvidadosInput>
  }

  export type NotificacaoUpdateWithoutConvidadosInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    evento?: EventoUpdateOneRequiredWithoutNotificacoesNestedInput
  }

  export type NotificacaoUncheckedUpdateWithoutConvidadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    eventoId?: IntFieldUpdateOperationsInput | number
  }

  export type FuncionariosConvidadosCreateWithoutPresencaInput = {
    evento: EventoCreateNestedOneWithoutFuncionariosConvidadosInput
    funcionario: FuncionarioCreateNestedOneWithoutConvitesEventosInput
    notificacoes?: NotificacaoConvidadosCreateNestedManyWithoutConviteInput
  }

  export type FuncionariosConvidadosUncheckedCreateWithoutPresencaInput = {
    eventoId: number
    funcionarioId: number
    notificacoes?: NotificacaoConvidadosUncheckedCreateNestedManyWithoutConviteInput
  }

  export type FuncionariosConvidadosCreateOrConnectWithoutPresencaInput = {
    where: FuncionariosConvidadosWhereUniqueInput
    create: XOR<FuncionariosConvidadosCreateWithoutPresencaInput, FuncionariosConvidadosUncheckedCreateWithoutPresencaInput>
  }

  export type FuncionariosConvidadosUpsertWithoutPresencaInput = {
    update: XOR<FuncionariosConvidadosUpdateWithoutPresencaInput, FuncionariosConvidadosUncheckedUpdateWithoutPresencaInput>
    create: XOR<FuncionariosConvidadosCreateWithoutPresencaInput, FuncionariosConvidadosUncheckedCreateWithoutPresencaInput>
    where?: FuncionariosConvidadosWhereInput
  }

  export type FuncionariosConvidadosUpdateToOneWithWhereWithoutPresencaInput = {
    where?: FuncionariosConvidadosWhereInput
    data: XOR<FuncionariosConvidadosUpdateWithoutPresencaInput, FuncionariosConvidadosUncheckedUpdateWithoutPresencaInput>
  }

  export type FuncionariosConvidadosUpdateWithoutPresencaInput = {
    evento?: EventoUpdateOneRequiredWithoutFuncionariosConvidadosNestedInput
    funcionario?: FuncionarioUpdateOneRequiredWithoutConvitesEventosNestedInput
    notificacoes?: NotificacaoConvidadosUpdateManyWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateWithoutPresencaInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    notificacoes?: NotificacaoConvidadosUncheckedUpdateManyWithoutConviteNestedInput
  }

  export type FuncionarioCreateWithoutFormTemplatesCriadosInput = {
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerente?: FuncionarioCreateNestedOneWithoutSubordinadosInput
    subordinados?: FuncionarioCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaCreateNestedManyWithoutFuncionarioInput
  }

  export type FuncionarioUncheckedCreateWithoutFormTemplatesCriadosInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
    gerenteId?: number | null
    subordinados?: FuncionarioUncheckedCreateNestedManyWithoutGerenteInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedCreateNestedManyWithoutFuncionarioInput
    clientesGerenciados?: ClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    interacoesCliente?: InteracaoClienteUncheckedCreateNestedManyWithoutFuncionarioInput
    eventosOrganizados?: EventoUncheckedCreateNestedManyWithoutOrganizadorInput
    convitesEventos?: FuncionariosConvidadosUncheckedCreateNestedManyWithoutFuncionarioInput
    vendasRealizadas?: VendaUncheckedCreateNestedManyWithoutFuncionarioInput
  }

  export type FuncionarioCreateOrConnectWithoutFormTemplatesCriadosInput = {
    where: FuncionarioWhereUniqueInput
    create: XOR<FuncionarioCreateWithoutFormTemplatesCriadosInput, FuncionarioUncheckedCreateWithoutFormTemplatesCriadosInput>
  }

  export type FuncionarioUpsertWithoutFormTemplatesCriadosInput = {
    update: XOR<FuncionarioUpdateWithoutFormTemplatesCriadosInput, FuncionarioUncheckedUpdateWithoutFormTemplatesCriadosInput>
    create: XOR<FuncionarioCreateWithoutFormTemplatesCriadosInput, FuncionarioUncheckedCreateWithoutFormTemplatesCriadosInput>
    where?: FuncionarioWhereInput
  }

  export type FuncionarioUpdateToOneWithWhereWithoutFormTemplatesCriadosInput = {
    where?: FuncionarioWhereInput
    data: XOR<FuncionarioUpdateWithoutFormTemplatesCriadosInput, FuncionarioUncheckedUpdateWithoutFormTemplatesCriadosInput>
  }

  export type FuncionarioUpdateWithoutFormTemplatesCriadosInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerente?: FuncionarioUpdateOneWithoutSubordinadosNestedInput
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutFormTemplatesCriadosInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    gerenteId?: NullableIntFieldUpdateOperationsInput | number | null
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
  }

  export type ArquivoCandidatoCreateWithoutCandidatoInput = {
    nomeArquivo: string
    campoOriginal: string
  }

  export type ArquivoCandidatoUncheckedCreateWithoutCandidatoInput = {
    id?: number
    nomeArquivo: string
    campoOriginal: string
  }

  export type ArquivoCandidatoCreateOrConnectWithoutCandidatoInput = {
    where: ArquivoCandidatoWhereUniqueInput
    create: XOR<ArquivoCandidatoCreateWithoutCandidatoInput, ArquivoCandidatoUncheckedCreateWithoutCandidatoInput>
  }

  export type ArquivoCandidatoCreateManyCandidatoInputEnvelope = {
    data: ArquivoCandidatoCreateManyCandidatoInput | ArquivoCandidatoCreateManyCandidatoInput[]
    skipDuplicates?: boolean
  }

  export type ArquivoCandidatoUpsertWithWhereUniqueWithoutCandidatoInput = {
    where: ArquivoCandidatoWhereUniqueInput
    update: XOR<ArquivoCandidatoUpdateWithoutCandidatoInput, ArquivoCandidatoUncheckedUpdateWithoutCandidatoInput>
    create: XOR<ArquivoCandidatoCreateWithoutCandidatoInput, ArquivoCandidatoUncheckedCreateWithoutCandidatoInput>
  }

  export type ArquivoCandidatoUpdateWithWhereUniqueWithoutCandidatoInput = {
    where: ArquivoCandidatoWhereUniqueInput
    data: XOR<ArquivoCandidatoUpdateWithoutCandidatoInput, ArquivoCandidatoUncheckedUpdateWithoutCandidatoInput>
  }

  export type ArquivoCandidatoUpdateManyWithWhereWithoutCandidatoInput = {
    where: ArquivoCandidatoScalarWhereInput
    data: XOR<ArquivoCandidatoUpdateManyMutationInput, ArquivoCandidatoUncheckedUpdateManyWithoutCandidatoInput>
  }

  export type ArquivoCandidatoScalarWhereInput = {
    AND?: ArquivoCandidatoScalarWhereInput | ArquivoCandidatoScalarWhereInput[]
    OR?: ArquivoCandidatoScalarWhereInput[]
    NOT?: ArquivoCandidatoScalarWhereInput | ArquivoCandidatoScalarWhereInput[]
    id?: IntFilter<"ArquivoCandidato"> | number
    nomeArquivo?: StringFilter<"ArquivoCandidato"> | string
    campoOriginal?: StringFilter<"ArquivoCandidato"> | string
    candidatoId?: IntFilter<"ArquivoCandidato"> | number
  }

  export type CandidatoCreateWithoutArquivosInput = {
    nome: string
    dataNascimento: Date | string
    genero: string
    telefone: string
    cpf: string
    estado: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    cep: string
    complemento?: string | null
    email: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidatoUncheckedCreateWithoutArquivosInput = {
    id?: number
    nome: string
    dataNascimento: Date | string
    genero: string
    telefone: string
    cpf: string
    estado: string
    cidade: string
    bairro: string
    rua: string
    numero: string
    cep: string
    complemento?: string | null
    email: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidatoCreateOrConnectWithoutArquivosInput = {
    where: CandidatoWhereUniqueInput
    create: XOR<CandidatoCreateWithoutArquivosInput, CandidatoUncheckedCreateWithoutArquivosInput>
  }

  export type CandidatoUpsertWithoutArquivosInput = {
    update: XOR<CandidatoUpdateWithoutArquivosInput, CandidatoUncheckedUpdateWithoutArquivosInput>
    create: XOR<CandidatoCreateWithoutArquivosInput, CandidatoUncheckedCreateWithoutArquivosInput>
    where?: CandidatoWhereInput
  }

  export type CandidatoUpdateToOneWithWhereWithoutArquivosInput = {
    where?: CandidatoWhereInput
    data: XOR<CandidatoUpdateWithoutArquivosInput, CandidatoUncheckedUpdateWithoutArquivosInput>
  }

  export type CandidatoUpdateWithoutArquivosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidatoUncheckedUpdateWithoutArquivosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    estado?: StringFieldUpdateOperationsInput | string
    cidade?: StringFieldUpdateOperationsInput | string
    bairro?: StringFieldUpdateOperationsInput | string
    rua?: StringFieldUpdateOperationsInput | string
    numero?: StringFieldUpdateOperationsInput | string
    cep?: StringFieldUpdateOperationsInput | string
    complemento?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FuncionarioCreateManyGerenteInput = {
    id?: number
    cpf: string
    nome: string
    endereco: string
    genero: string
    telefone: string
    cargo: string
    email: string
    local: string
    nivelAcesso: string
    senhaHash: string
    dataNascimento: Date | string
  }

  export type AgendamentoInteracaoCreateManyFuncionarioInput = {
    id?: number
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    clienteId: number
  }

  export type ClienteCreateManyFuncionarioInput = {
    id?: number
    nome: string
    endereco: string
    funilId: number
  }

  export type InteracaoClienteCreateManyFuncionarioInput = {
    id?: number
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    clienteId: number
  }

  export type EventoCreateManyOrganizadorInput = {
    id?: number
    titulo: string
    desc: string
    dataIni: Date | string
    duracaoH: number
    link: string
    status: string
  }

  export type FuncionariosConvidadosCreateManyFuncionarioInput = {
    eventoId: number
  }

  export type VendaCreateManyFuncionarioInput = {
    id?: number
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    clienteId: number
  }

  export type FormTemplateCreateManyCriadoPorInput = {
    id?: number
    nome: string
    descricao?: string | null
    estrutura: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FuncionarioUpdateWithoutGerenteInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    subordinados?: FuncionarioUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateWithoutGerenteInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    subordinados?: FuncionarioUncheckedUpdateManyWithoutGerenteNestedInput
    agendamentosInteracao?: AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioNestedInput
    clientesGerenciados?: ClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    interacoesCliente?: InteracaoClienteUncheckedUpdateManyWithoutFuncionarioNestedInput
    eventosOrganizados?: EventoUncheckedUpdateManyWithoutOrganizadorNestedInput
    convitesEventos?: FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioNestedInput
    vendasRealizadas?: VendaUncheckedUpdateManyWithoutFuncionarioNestedInput
    formTemplatesCriados?: FormTemplateUncheckedUpdateManyWithoutCriadoPorNestedInput
  }

  export type FuncionarioUncheckedUpdateManyWithoutGerenteInput = {
    id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    telefone?: StringFieldUpdateOperationsInput | string
    cargo?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    local?: StringFieldUpdateOperationsInput | string
    nivelAcesso?: StringFieldUpdateOperationsInput | string
    senhaHash?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendamentoInteracaoUpdateWithoutFuncionarioInput = {
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    cliente?: ClienteUpdateOneRequiredWithoutAgendamentosNestedInput
  }

  export type AgendamentoInteracaoUncheckedUpdateWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type AgendamentoInteracaoUncheckedUpdateManyWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteUpdateWithoutFuncionarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutClientesNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funilId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateManyWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funilId?: IntFieldUpdateOperationsInput | number
  }

  export type InteracaoClienteUpdateWithoutFuncionarioInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    cliente?: ClienteUpdateOneRequiredWithoutInteracoesNestedInput
  }

  export type InteracaoClienteUncheckedUpdateWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type InteracaoClienteUncheckedUpdateManyWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type EventoUpdateWithoutOrganizadorInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    funcionariosConvidados?: FuncionariosConvidadosUpdateManyWithoutEventoNestedInput
    notificacoes?: NotificacaoUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutOrganizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    funcionariosConvidados?: FuncionariosConvidadosUncheckedUpdateManyWithoutEventoNestedInput
    notificacoes?: NotificacaoUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateManyWithoutOrganizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    dataIni?: DateTimeFieldUpdateOperationsInput | Date | string
    duracaoH?: IntFieldUpdateOperationsInput | number
    link?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type FuncionariosConvidadosUpdateWithoutFuncionarioInput = {
    evento?: EventoUpdateOneRequiredWithoutFuncionariosConvidadosNestedInput
    notificacoes?: NotificacaoConvidadosUpdateManyWithoutConviteNestedInput
    presenca?: PresencaUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateWithoutFuncionarioInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    notificacoes?: NotificacaoConvidadosUncheckedUpdateManyWithoutConviteNestedInput
    presenca?: PresencaUncheckedUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateManyWithoutFuncionarioInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
  }

  export type VendaUpdateWithoutFuncionarioInput = {
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    cliente?: ClienteUpdateOneRequiredWithoutVendasNestedInput
  }

  export type VendaUncheckedUpdateWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type VendaUncheckedUpdateManyWithoutFuncionarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type FormTemplateUpdateWithoutCriadoPorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormTemplateUncheckedUpdateWithoutCriadoPorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FormTemplateUncheckedUpdateManyWithoutCriadoPorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    estrutura?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContatoClienteCreateManyClienteInput = {
    id?: number
    tipoContato: string
    valorContrato: string
  }

  export type AgendamentoInteracaoCreateManyClienteInput = {
    id?: number
    dataMarcada: Date | string
    tipoInteracao: string
    status: string
    notas?: string | null
    funcionarioId: number
  }

  export type HistoricoFunilCreateManyClienteInput = {
    id?: number
    dataMovimentacao: Date | string
    funilId: number
  }

  export type InteracaoClienteCreateManyClienteInput = {
    id?: number
    dataInteracao: Date | string
    tipoInteracao: string
    relatorioInteracao: string
    funcionarioId: number
  }

  export type VendaCreateManyClienteInput = {
    id?: number
    dataVenda: Date | string
    total: Decimal | DecimalJsLike | number | string
    funcionarioId: number
  }

  export type ContatoClienteUpdateWithoutClienteInput = {
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
  }

  export type ContatoClienteUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
  }

  export type ContatoClienteUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoContato?: StringFieldUpdateOperationsInput | string
    valorContrato?: StringFieldUpdateOperationsInput | string
  }

  export type AgendamentoInteracaoUpdateWithoutClienteInput = {
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    funcionario?: FuncionarioUpdateOneRequiredWithoutAgendamentosInteracaoNestedInput
  }

  export type AgendamentoInteracaoUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type AgendamentoInteracaoUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMarcada?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notas?: NullableStringFieldUpdateOperationsInput | string | null
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoFunilUpdateWithoutClienteInput = {
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    funilVendas?: Funil_VendasUpdateOneRequiredWithoutHistoricoNestedInput
  }

  export type HistoricoFunilUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    funilId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoFunilUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    funilId?: IntFieldUpdateOperationsInput | number
  }

  export type InteracaoClienteUpdateWithoutClienteInput = {
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutInteracoesClienteNestedInput
  }

  export type InteracaoClienteUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type InteracaoClienteUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataInteracao?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoInteracao?: StringFieldUpdateOperationsInput | string
    relatorioInteracao?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type VendaUpdateWithoutClienteInput = {
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutVendasRealizadasNestedInput
  }

  export type VendaUncheckedUpdateWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type VendaUncheckedUpdateManyWithoutClienteInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataVenda?: DateTimeFieldUpdateOperationsInput | Date | string
    total?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type ClienteCreateManyFunilVendasInput = {
    id?: number
    nome: string
    endereco: string
    funcionarioId: number
  }

  export type HistoricoFunilCreateManyFunilVendasInput = {
    id?: number
    dataMovimentacao: Date | string
    clienteId: number
  }

  export type ClienteUpdateWithoutFunilVendasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionario?: FuncionarioUpdateOneRequiredWithoutClientesGerenciadosNestedInput
    contatos?: ContatoClienteUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUpdateManyWithoutClienteNestedInput
    vendas?: VendaUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateWithoutFunilVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
    contatos?: ContatoClienteUncheckedUpdateManyWithoutClienteNestedInput
    agendamentos?: AgendamentoInteracaoUncheckedUpdateManyWithoutClienteNestedInput
    historicoFunil?: HistoricoFunilUncheckedUpdateManyWithoutClienteNestedInput
    interacoes?: InteracaoClienteUncheckedUpdateManyWithoutClienteNestedInput
    vendas?: VendaUncheckedUpdateManyWithoutClienteNestedInput
  }

  export type ClienteUncheckedUpdateManyWithoutFunilVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    endereco?: StringFieldUpdateOperationsInput | string
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoFunilUpdateWithoutFunilVendasInput = {
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    cliente?: ClienteUpdateOneRequiredWithoutHistoricoFunilNestedInput
  }

  export type HistoricoFunilUncheckedUpdateWithoutFunilVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoricoFunilUncheckedUpdateManyWithoutFunilVendasInput = {
    id?: IntFieldUpdateOperationsInput | number
    dataMovimentacao?: DateTimeFieldUpdateOperationsInput | Date | string
    clienteId?: IntFieldUpdateOperationsInput | number
  }

  export type FuncionariosConvidadosCreateManyEventoInput = {
    funcionarioId: number
  }

  export type NotificacaoCreateManyEventoInput = {
    id?: number
    titulo: string
    corpo?: string | null
  }

  export type FuncionariosConvidadosUpdateWithoutEventoInput = {
    funcionario?: FuncionarioUpdateOneRequiredWithoutConvitesEventosNestedInput
    notificacoes?: NotificacaoConvidadosUpdateManyWithoutConviteNestedInput
    presenca?: PresencaUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateWithoutEventoInput = {
    funcionarioId?: IntFieldUpdateOperationsInput | number
    notificacoes?: NotificacaoConvidadosUncheckedUpdateManyWithoutConviteNestedInput
    presenca?: PresencaUncheckedUpdateOneWithoutConviteNestedInput
  }

  export type FuncionariosConvidadosUncheckedUpdateManyWithoutEventoInput = {
    funcionarioId?: IntFieldUpdateOperationsInput | number
  }

  export type NotificacaoUpdateWithoutEventoInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    convidados?: NotificacaoConvidadosUpdateManyWithoutNotificacaoNestedInput
  }

  export type NotificacaoUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
    convidados?: NotificacaoConvidadosUncheckedUpdateManyWithoutNotificacaoNestedInput
  }

  export type NotificacaoUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    corpo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificacaoConvidadosCreateManyConviteInput = {
    notificacaoId: number
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
  }

  export type NotificacaoConvidadosUpdateWithoutConviteInput = {
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
    notificacao?: NotificacaoUpdateOneRequiredWithoutConvidadosNestedInput
  }

  export type NotificacaoConvidadosUncheckedUpdateWithoutConviteInput = {
    notificacaoId?: IntFieldUpdateOperationsInput | number
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type NotificacaoConvidadosUncheckedUpdateManyWithoutConviteInput = {
    notificacaoId?: IntFieldUpdateOperationsInput | number
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type NotificacaoConvidadosCreateManyNotificacaoInput = {
    eventoId: number
    funcionarioId: number
    statusLeitura: boolean
    dataLeitura?: Date | string | null
    prioridade: string
  }

  export type NotificacaoConvidadosUpdateWithoutNotificacaoInput = {
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
    convite?: FuncionariosConvidadosUpdateOneRequiredWithoutNotificacoesNestedInput
  }

  export type NotificacaoConvidadosUncheckedUpdateWithoutNotificacaoInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type NotificacaoConvidadosUncheckedUpdateManyWithoutNotificacaoInput = {
    eventoId?: IntFieldUpdateOperationsInput | number
    funcionarioId?: IntFieldUpdateOperationsInput | number
    statusLeitura?: BoolFieldUpdateOperationsInput | boolean
    dataLeitura?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    prioridade?: StringFieldUpdateOperationsInput | string
  }

  export type ArquivoCandidatoCreateManyCandidatoInput = {
    id?: number
    nomeArquivo: string
    campoOriginal: string
  }

  export type ArquivoCandidatoUpdateWithoutCandidatoInput = {
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
  }

  export type ArquivoCandidatoUncheckedUpdateWithoutCandidatoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
  }

  export type ArquivoCandidatoUncheckedUpdateManyWithoutCandidatoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nomeArquivo?: StringFieldUpdateOperationsInput | string
    campoOriginal?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}